<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="eval-factor">
	<select id="findListEvalFactor" resultType="Map">
	/* eval-factor.findListEvalFactor : 평가항목목록 조회 */
		SELECT EF.TEN_ID                         /* 테넌트 아이디 */
			 , EF.EVALFACT_UUID                   /* 평가항목 UUID */
			 , EF.EVALFACT_CD                     /* 평가항목 코드 */
			 , EF.EVALFACT_NM                     /* 평가항목 명 */
		     , EET.EVAL_TASK_TYP_CCD              /* 평가업무 유형 공통코드(R704)*/
			 , EF.EVALFACT_TYP_CCD              /* 항목 유형 공통코드(R001) */
			 , EF.ADD_CND_CCD                /* 추가 조건 공통코드(EVKD)*/
			 , EF.SCALE_APPL_YN                   /* 스케일 적용 여부 */  /* 공통코드(R002) */
			 , CASE WHEN EF.EVALFACT_TYP_CCD = 'QUALI_SC_INP' THEN 'N'
			        ELSE EF.SCALE_APPL_YN
			    END  AS DISPLAY_SCALE_APPL_YN    /* 스케일 적용 여부. 평가항목유형이 점수입력인 경우, 스케일적용여부를 N으로 표시하기 위해 별도 컬럼으로 조회 */
			 , EF.QUANT_FMLA_EXPLN                /* 정량 계산식 설명 */
			 , EF.QUANT_FMLA                      /* 정량 계산식 */
			 , EF.QUALI_EVAL_METH_TYP_CCD        /* 정성 평가 방식 유형 공통코드 */
			 , EF.SCALE_RNG_SETUP_CCD             /* 스케일 구간 설정 공통코드 */
			 , EF.NULLV_DATFIL_METH_CCD           /* NULL값 데이터보정 방식 공통코드 공통코드(R006)*/
			 , EF.EVALFACT_DTL_DSPY_TYP_CCD       /* 평가항목 상세 표시 유형 공통코드 */
			 , EF.QUANT_VAL_UNIT                  /* 정량 값 단위 */
			 , EF.SORT                            /* 정렬 */
			 , EF.EVALFACT_EXPLN                  /* 평가항목 설명 */
			 , (SELECT COUNT(DISTINCT EG.EFACTG_UUID)
				  FROM EFACTG EG
				  LEFT OUTER JOIN EVALTMPL_EFACTG ETEG
				    ON EG.TEN_ID = ETEG.TEN_ID
				   AND EG.EFACTG_UUID = ETEG.EFACTG_UUID
				   AND ETEG.STS != 'D'
				   LEFT OUTER JOIN EVALTMPL_EVALFACT ETEF
				    ON ETEG.TEN_ID = ETEF.TEN_ID
				   AND ETEG.EVALTMPL_EFACTG_UUID = ETEF.EVALTMPL_EFACTG_UUID
				   AND ETEF.STS != 'D'
				   WHERE ETEF.TEN_ID = EF.TEN_ID
				   AND ETEF.EVALFACT_UUID = EF.EVALFACT_UUID
				   AND EF.STS != 'D') AS APPLY_EFACTG
		     , (SELECT COUNT(DISTINCT EET.EVAL_TASK_TYP_CCD) FROM EVALFACT_EVAL_TASK EET WHERE TEN_ID = EF.TEN_ID AND EVALFACT_UUID  = EF.EVALFACT_UUID AND STS != 'D') AS APPLY_EVAL_TASK
			 , (SELECT CASE WHEN COUNT(*) &gt; 0 THEN 'Y' ELSE 'N' END FROM EVALTMPL_EVALFACT WHERE TEN_ID = EF.TEN_ID AND EVALFACT_UUID = EF.EVALFACT_UUID AND STS != 'D') AS USE_YN
			 , EF.CNFD_YN                         /* 확정 여부 */
			 , EF.RMK                             /* 비고 */
			 , EF.STS                             /* 상태 */
			 , EF.REGR_ID                         /* 등록자아이디 */
			 , EF.REG_DTTM                        /* 등록일시 */
			 , EF.MODR_ID                         /* 수정자아이디 */
			 , EF.MOD_DTTM                        /* 수정일시 */
			 , (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN USR.USR_NM
			                ELSE (CASE WHEN USR.USR_NM_EN IS NULL OR USR.USR_NM_EN = '' THEN USR.USR_NM ELSE USR.USR_NM_EN END) END FROM USR WHERE TEN_ID = EF.TEN_ID AND USR_ID = EF.MODR_ID) AS MOD_NM
		  FROM EVALFACT EF
		  LEFT OUTER JOIN EVALFACT_EVAL_TASK EET
			ON EF.TEN_ID = EET.TEN_ID
		   AND EF.EVALFACT_UUID = EET.EVALFACT_UUID
		 WHERE EF.TEN_ID          = #{g.tenant}       /* 시스템아이디 */
		   AND EF.EVALFACT_CD		!= 'ROOT'
		   AND EF.STS            != 'D'               /* 상태 */
		   <if test="p.evalfact_typ_ccd != null and p.evalfact_typ_ccd !=''">
		     AND EF.EVALFACT_TYP_CCD = #{p.evalfact_typ_ccd}    /* 정량정성구분 */
		   </if>
		   <if test="p.eval_task_typ_ccd != null and p.eval_task_typ_ccd !=''">
		     AND EET.EVAL_TASK_TYP_CCD = #{p.eval_task_typ_ccd}
		   </if>
		   <if test="p.cnfd_yn != null and p.cnfd_yn !=''">
			 AND EF.CNFD_YN = #{p.cnfd_yn}
		   </if>
		   <if test="p.evalfact_nm != null and p.evalfact_nm !=''">
			   <bind name="evalfactNmPattern" value="'%' + p.evalfact_nm + '%'"/>
			   AND UPPER(EF.EVALFACT_NM) LIKE UPPER(#{evalfactNmPattern})
		   </if>
		   <if test="p.efactg_uuid != null and p.efactg_uuid != ''"> /* 선택한 평가항목군에 적용된 평가항목만 조회 */
			  AND EF.EVALFACT_UUID IN (
				  SELECT ETEF.EVALFACT_UUID
				    FROM EVALTMPL_EVALFACT ETEF
				    LEFT OUTER JOIN EVALTMPL_EFACTG ETEG
				      ON ETEF.TEN_ID = ETEG.TEN_ID
				     AND ETEF.EVALTMPL_EFACTG_UUID  = ETEG.EVALTMPL_EFACTG_UUID
				     AND ETEG.EFACTG_UUID  = #{p.efactg_uuid}
				    LEFT OUTER JOIN EVALTMPL ET
				      ON ETEG.TEN_ID = ET.TEN_ID
				     AND ET.EVALTMPL_UUID  = ETEG.EVALTMPL_UUID
				   WHERE ETEF.TEN_ID = #{g.tenant}
				     AND ET.STS != 'D'
			   )
		   </if>
		  ORDER BY EF.SORT, EF.EVALFACT_NM
	</select>
	<select id="selectEvalFactorCnfdYnForDelete" resultType="String">
	/* eval-factor.selectEvalFactorCnfdYnForDelete : 평가항목 확정여부 조회 - 삭제 */
		SELECT CASE WHEN COUNT(1) &gt; 0 THEN 'Y' ELSE 'N' END
		  FROM EVALFACT
		 WHERE TEN_ID       = #{g.tenant}
		   AND CNFD_YN       = 'Y' /* 확정 */
		<choose>
			<when test="p.deleteList != null and p.deleteList.size() &gt; 0">
				AND EVALFACT_UUID IN
				<foreach close=")" collection="p.deleteList" item="item" open="(" separator=",">
					#{item.evalfact_uuid}
				</foreach>
			</when>
			<when test="p.evalfact_uuid != null and p.evalfact_uuid != ''">
				AND EVALFACT_UUID = #{p.evalfact_uuid}
			</when>
			<otherwise>
				AND 1 = 0
			</otherwise>
		</choose>
	</select>
	<delete id="deleteEvalfactScale">
	/* eval-factor.deleteEvalfactScale : 평가항목에 매핑된 모든 스케일 항목 삭제 */
		DELETE FROM EVALFACT_SCALE
		 WHERE TEN_ID          = #{g.tenant}             /* 시스템아이디 */
		   AND EVALFACT_UUID   = #{p.evalfact_uuid}      /* 평가항목아이디 */
	</delete>
	<delete id="deleteEvalFactCalcFact">
	/* eval-factor.deleteEvalFactCalcFact : 평가항목 계산항목 삭제 */
		DELETE FROM EVALFACT_CALCFACT
		WHERE TEN_ID         = #{g.tenant}
		  AND EVALFACT_UUID  = #{p.evalfact_uuid}       /* 평가항목아이디 */
	</delete>
	<delete id="deleteEvalFactEvalTask">
	/* eval-factor.deleteEvalFactEvalTask : 평가항목 평가 업무 유형 삭제 */
		DELETE FROM EVALFACT_EVAL_TASK
		 WHERE TEN_ID = #{g.tenant}
		   AND EVALFACT_UUID = #{p.evalfact_uuid}
	</delete>
	<delete id="deleteEvalFactor">
	/* eval-factor.deleteEvalFactor : 평가항목 삭제 */
		DELETE FROM EVALFACT
		 WHERE TEN_ID = #{g.tenant}
		   AND EVALFACT_UUID  = #{p.evalfact_uuid}
	</delete>
	<select id="findEvalFactor" resultType="Map">
	/* eval-factor.findEvalFactor : 평가항목정보 조회 */
		SELECT EF.TEN_ID                         /* 테넌트 아이디 */
			 , EF.EVALFACT_UUID                   /* 평가항목 UUID */
			 , EF.EVALFACT_CD                     /* 평가항목 코드 */
			 , EF.EVALFACT_NM                     /* 평가항목 명 */
			 , EF.EVALFACT_TYP_CCD              /* 항목 유형 공통코드(R001) */
			 , EF.ADD_CND_CCD                /* 추가 조건 공통코드(EVKD)*/
			 , EF.SCALE_APPL_YN                   /* 스케일 적용 여부 */  /* 공통코드(R002) */
			 , EF.QUANT_FMLA_EXPLN                /* 정량 계산식 설명 */
			 , EF.QUANT_FMLA                      /* 정량 계산식 */
			 , EF.QUALI_EVAL_METH_TYP_CCD         /* 정성 평가 방식 유형 공통코드 */
			 , EF.SCALE_RNG_SETUP_CCD             /* 스케일 구간 설정 공통코드 */
			 , EF.NULLV_DATFIL_METH_CCD           /* NULL값 데이터보정 방식 공통코드 (R006) */
		     , EF.NULLV_ELEM_SC					  /* NULL값 기본 점수 */
			 , EF.EVALFACT_DTL_DSPY_TYP_CCD       /* 평가항목 상세 표시 유형 공통코드 (R808) */
			 , EF.QUANT_VAL_UNIT                  /* 정량 값 단위 */
			 , EF.SORT                            /* 정렬 */
			 , EF.EVALFACT_EXPLN                  /* 평가항목 설명 */
			 , EF.CNFD_YN                         /* 확정 여부 */
			 , EF.RMK                             /* 비고 */
			 , EF.STS                             /* 상태 */
			 , EF.REGR_ID                         /* 등록자아이디 */
			 , EF.REG_DTTM                        /* 등록일시 */
			 , EF.MODR_ID                         /* 수정자아이디 */
			 , EF.MOD_DTTM                        /* 수정일시 */
			 , (SELECT USR_NM FROM USR WHERE TEN_ID = EF.TEN_ID AND USR_ID = EF.MODR_ID) AS MOD_NM
		FROM EVALFACT EF  /* EF : 평가항목마스터 */
	   WHERE EF.TEN_ID       = #{g.tenant}      /* 시스템아이디 */
		AND EF.EVALFACT_UUID        = #{p.evalfact_uuid}       /* 평가항목아이디 */
		<if test="p.evalfact_cd != null and p.evalfact_cd != ''">
			AND EF.EVALFACT_CD        = #{p.evalfact_cd}       /* 평가항목코드 */
		</if>
		AND EF.STS         != 'D'              /* 상태 */
	</select>
	<select id="findListEvalFactRecFact" resultType="map">
	/* eval-factor.findListEvalFactRecFact : 평가항목 정량 계산항목 조회 */
		SELECT EFRF.EVALFACT_UUID
			 , EFRF.CALCFACT_UUID
			 , RM.CALCFACT_NM
			 , RM.RMK
			 , RM.NMTR_DNTR_DIV_CCD
			 , RM.NMTR_VAL_NULLV_DATFIL_METH_CCD
		FROM EVALFACT_CALCFACT EFRF
			     INNER JOIN
		     CALCFACT RM
		     ON (    EFRF.TEN_ID = RM.TEN_ID
			     AND EFRF.CALCFACT_UUID = RM.CALCFACT_UUID
			     )
		WHERE EFRF.TEN_ID = #{g.tenant}
		  AND EFRF.EVALFACT_UUID = #{p.evalfact_uuid}
	</select>
	<select id="findListEvalfactScale" resultType="Map">
	/* eval-factor.findListEvalfactScale : 평가항목 스케일 목록 조회 */
		SELECT TEN_ID                   /* 테넌트 아이디 */
			 , EVALFACT_SCALE_UUID           /* 평가항목 스케일 UUID */
			 , EVALFACT_UUID                 /* 평가항목 UUID */
			 , SCALE_CD                      /* 스케일 코드 */
			 , SCALE_NM                      /* 스케일 명 */
			 , ST_VAL                        /* 시작 값 */
			 , STP_VAL                       /* 멈춤 값 */
			 , SC                     	     /* 점수 */
			 , SCALE_SORT                    /* 스케일 정렬 */
			 , NULLV_APPL_SUBJ_SCALE_YN      /* NULL값 적용 대상 스케일 여부 */
			 , RMK                           /* 비고 */
			 , STS                           /* 상태 */
			 , REGR_ID                       /* 등록자 아이디 */
			 , REG_DTTM                      /* 등록 일시 */
			 , MODR_ID                       /* 수정자 아이디 */
			 , MOD_DTTM                      /* 수정 일시 */
		  FROM EVALFACT_SCALE             /* 평가항목 스케일 */
		 WHERE TEN_ID       = #{g.tenant}      /* 시스템아이디 */
		   AND EVALFACT_UUID        = #{p.evalfact_uuid}       /* 평가항목아이디 */
		   AND STS         != 'D'              /* 상태 */
		 ORDER BY SCALE_SORT
	</select>
	<insert id="insertEvalFactorCopy">
	/* eval-factor.insertEvalFactorCopy : 평가항목 복사 */
		INSERT INTO EVALFACT (
			TEN_ID                        /* 테넌트 아이디 */
			, EVALFACT_UUID                   /* 평가항목 UUID */
			, EVALFACT_CD                     /* 평가항목 코드 */
			, EVALFACT_NM                     /* 평가항목 명 */
			, EVALFACT_TYP_CCD              /* 항목 유형 공통코드(R001) */
			, ADD_CND_CCD                /* 추가 조건 공통코드(EVKD)*/
			, SCALE_APPL_YN                   /* 스케일 적용 여부 */  /* 공통코드(R002) */
			, QUANT_FMLA_EXPLN                /* 정량 계산식 설명 */
			, QUANT_FMLA                      /* 정량 계산식 */
			, QUALI_EVAL_METH_TYP_CCD         /* 정성 평가 방식 유형 공통코드 */
			, SCALE_RNG_SETUP_CCD             /* 스케일 구간 설정 공통코드 */
			, NULLV_DATFIL_METH_CCD           /* NULL값 데이터보정 방식 공통코드 공통코드(R006)*/
			, EVALFACT_DTL_DSPY_TYP_CCD       /* 평가항목 상세 표시 유형 공통코드 */
			, QUANT_VAL_UNIT                  /* 정량 값 단위 */
			, SORT                            /* 정렬 */
			, EVALFACT_EXPLN                  /* 평가항목 설명 */
			, CNFD_YN                         /* 확정 여부 */
			, RMK                             /* 비고 */
			, STS                             /* 상태 */
			, REGR_ID                         /* 등록자아이디 */
			, REG_DTTM                        /* 등록일시 */
			, MODR_ID                         /* 수정자아이디 */
			, MOD_DTTM                        /* 수정일시 */
		)
		SELECT TEN_ID                              /* 테넌트 아이디 */
			 , #{p.evalfact_new_uuid}              /* 평가항목 UUID */
			 , #{p.evalfact_new_cd}                /* 평가항목 코드 */
			 , CONCAT(#{p.copy_nm}, EVALFACT_NM)   /* 평가항목 명 */
			 , #{p.evalfact_typ_ccd}             /* 항목 유형 공통코드(R001) */
			 , ADD_CND_CCD                    /* 추가 조건 공통코드(EVKD)*/
			 , SCALE_APPL_YN                       /* 스케일 적용 여부 */  /* 공통코드(R002) */
			 , QUANT_FMLA_EXPLN                    /* 정량 계산식 설명 */
			 , QUANT_FMLA                          /* 정량 계산식 */
			 , QUALI_EVAL_METH_TYP_CCD             /* 정성 평가 방식 유형 공통코드 */
			 , SCALE_RNG_SETUP_CCD                 /* 스케일 구간 설정 공통코드 */
			 , NULLV_DATFIL_METH_CCD               /* NULL값 데이터보정 방식 공통코드 공통코드(R006)*/
			 , EVALFACT_DTL_DSPY_TYP_CCD           /* 평가항목 상세 표시 유형 공통코드 */
			 , QUANT_VAL_UNIT                      /* 정량 값 단위 */
			 , SORT                                /* 정렬 */
			 , EVALFACT_EXPLN                      /* 평가항목 설명 */
			 , 'N'                                 /* 확정 여부 */
			 , RMK                     /* 비고 */
			 , 'C'                     /* 상태 */
			 , #{g.username}           /* 등록자아이디 */
			 , #{g.now}                /* 등록일시 */
			 , #{g.username}           /* 수정자아이디 */
			 , #{g.now}                /* 수정일시 */
	 	  FROM EVALFACT  /* 평가항목마스터 */
	 	 WHERE TEN_ID               = #{g.tenant}       /* 시스템아이디 */
	 	   AND EVALFACT_UUID        = #{p.evalfact_uuid}        /* 평가항목아이디 */
	 	   AND STS                 != 'D'               /* 상태 */
	</insert>
    <insert id="insertEvalFactCalcFactCopy">
    /* eval-factor.insertEvalFactCalcFactCopy  : 정량항목 복사 시 평가항목 계산항목을 복사한다. */
    INSERT INTO EVALFACT_CALCFACT (
           TEN_ID
         , EVALFACT_UUID
         , CALCFACT_UUID
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT ORGN.TEN_ID
         , #{p.evalfact_new_uuid}
         , ORGN.CALCFACT_UUID
         , 'C'
         , #{g.username}
         , #{g.now}
         , #{g.username}
         , #{g.now}
      FROM EVALFACT_CALCFACT ORGN
     WHERE ORGN.TEN_ID = #{g.tenant}
       AND ORGN.EVALFACT_UUID = #{p.evalfact_uuid}
       AND ORGN.STS != 'D'
    </insert>
	<insert id="insertEvalTaskTypCcdCopy">
	/* eval-factor.insertEvalTaskTypCcdCopy : 평가항목 업무유형 복사 */
		INSERT INTO EVALFACT_EVAL_TASK (
			TEN_ID                        /* 테넌트 아이디 */
			, EVALFACT_UUID                   /* 평가항목 UUID */
			, EVAL_TASK_TYP_CCD               /* 평가 업무 유형 공통 코드 */
			, STS                             /* 상태 */
			, REGR_ID                         /* 등록자아이디 */
			, REG_DTTM                        /* 등록일시 */
			, MODR_ID                         /* 수정자아이디 */
			, MOD_DTTM                        /* 수정일시 */
		) SELECT EFACT.TEN_ID
		       , #{p.evalfact_new_uuid}
		       , EVAL_TASK_TYP.EVAL_TASK_TYP_CCD
		       , 'C'
		       , #{g.username}
		       , #{g.now}
		       , #{g.username}
		       , #{g.now}
		    FROM EVALFACT EFACT
           INNER JOIN (
		    <choose>
             <when test="p.eval_task_typ_ccds != null and p.eval_task_typ_ccds.size() &gt; 0">
                 <foreach collection="p.eval_task_typ_ccds" item="eval_task_typ_ccd" separator="UNION ALL">
                 SELECT #{g.tenant} AS TEN_ID
                      , #{eval_task_typ_ccd} AS EVAL_TASK_TYP_CCD
                   FROM DUM_TBL
                 </foreach>
             </when>
		     <otherwise>
               SELECT EFACT_ETASK.TEN_ID
                    , EFACT_ETASK.EVAL_TASK_TYP_CCD
                 FROM EVALFACT_EVAL_TASK EFACT_ETASK
                WHERE EFACT_ETASK.TEN_ID = #{g.tenant}
                  AND EFACT_ETASK.EVALFACT_UUID = #{p.evalfact_uuid}
                  AND EFACT_ETASK.STS != 'D'
             </otherwise>
            </choose>
               ) EVAL_TASK_TYP
              ON EFACT.TEN_ID = EVAL_TASK_TYP.TEN_ID
		   WHERE EFACT.TEN_ID = #{g.tenant}
		     AND EFACT.EVALFACT_UUID = #{p.evalfact_uuid}
		     AND EFACT.STS != 'D'
	</insert>
	<select id=" selectEvalfactScaleByEvalfactCopy" resultType="Map">
	/* eval-factor. selectEvalfactScaleByEvalfactCopy : 평가항목 복사에 의한 평가항목 스케일 목록조회 */
		SELECT TEN_ID                   /* 테넌트 아이디 */
			 , EVALFACT_SCALE_UUID           /* 평가항목 스케일 UUID */
			 , #{p.evalfact_new_uuid} AS EVALFACT_UUID                 /* 평가항목 UUID */
			 , SCALE_CD                      /* 스케일 코드 */
			 , SCALE_NM                      /* 스케일 명 */
			 , ST_VAL                        /* 시작 값 */
			 , STP_VAL                       /* 멈춤 값 */
			 , SC                     	       /* 점수 */
			 , SCALE_SORT                    /* 스케일 정렬 */
			 , NULLV_APPL_SUBJ_SCALE_YN      /* NULL값 적용 대상 스케일 여부 */
			 , RMK                           /* 비고 */
		FROM EVALFACT_SCALE             /* 평가항목 스케일 */
		WHERE TEN_ID       = #{g.tenant}      /* 시스템아이디 */
		  AND EVALFACT_UUID        = #{p.evalfact_uuid}       /* 평가항목아이디 */
		  AND STS         != 'D'              /* 상태 */
	</select>
	<insert id="insertEvalfactScale">
	/* eval-factor.insertEvalfactScale : 평가항목 스케일 신규 저장 */
		INSERT INTO EVALFACT_SCALE (
			TEN_ID                   /* 테넌트 아이디 */
			, EVALFACT_SCALE_UUID        /* 평가항목 스케일 UUID */
			, EVALFACT_UUID              /* 평가항목 UUID */
			, SCALE_CD                   /* 스케일 코드 */
			, SCALE_NM                   /* 스케일 명 */
			, ST_VAL                     /* 시작 값 */
			, STP_VAL                    /* 멈춤 값 */
			, SC                         /* 점수 */
			, SCALE_SORT                 /* 스케일 정렬 */
			, NULLV_APPL_SUBJ_SCALE_YN   /* NULL값 적용 대상 스케일 여부 */
			, RMK                        /* 비고 */
			, STS                        /* 상태 */
			, REGR_ID                    /* 등록자아이디 */
			, REG_DTTM                   /* 등록일시 */
			, MODR_ID                    /* 수정자아이디 */
			, MOD_DTTM                   /* 수정일시 */
		) VALUES (
		    #{g.tenant}                   	  /* 시스템아이디 */
			, #{p.evalfact_scale_uuid}        /* 평가항목 스케일 uuid */
			, #{p.evalfact_uuid}              /* 평가항목 uuid */
			, #{p.scale_cd}                   /* 스케일 코드 */
			, #{p.scale_nm}                   /* 스케일 명 */
			, CAST(#{p.st_val} AS numeric)    /* 시작 값 */
			, CAST(#{p.stp_val}  AS numeric)  /* 멈춤 값 */
			, CAST(#{p.sc}  AS numeric(8, 5)) /* 점수 */
			, CAST(#{p.scale_sort} AS numeric)	/* 스케일 정렬 */
			, #{p.nullv_appl_subj_scale_yn}   /* null값 적용 대상 스케일 여부 */
			, #{p.rmk}                        /* 비고 */
			, 'C'                             /* 상태 */
			, #{g.username}                   /* 등록자아이디 */
			, #{g.now}                        /* 등록일시 */
			, #{g.username}                   /* 수정자아이디 */
			, #{g.now}                        /* 수정일시 */
		)
	</insert>
	<update id="updateCnfdYnEvalFactor">
	/* eval-factor.updateCnfdYnEvalFactor : 평가항목 확정 여부 저장 */
		UPDATE EVALFACT
		   SET CNFD_YN   = #{p.cnfd_yn}
		     , STS       = 'U'
		     , MODR_ID   = #{g.username}
		     , MOD_DTTM  = #{g.now}
		 WHERE TEN_ID    = #{g.tenant}
		   AND EVALFACT_UUID     = #{p.evalfact_uuid}       /* 평가항목아이디 */
		   AND EVALFACT_CD       = #{p.evalfact_cd}       /* 평가항목코드 */
	</update>
	<insert id="insertEvalFactor">
	/* eval-factor.insertEvalFactor : 평가항목 신규 생성 */
		INSERT INTO EVALFACT (
		    TEN_ID                        /* 테넌트 아이디 */
			, EVALFACT_UUID                   /* 평가항목 UUID */
			, EVALFACT_CD                     /* 평가항목 코드 */
			, EVALFACT_NM                     /* 평가항목 명 */
			, EVALFACT_TYP_CCD             /* 항목 유형 공통코드(R001) */
			, ADD_CND_CCD                /* 추가 조건 공통코드(EVKD)*/
			, SCALE_APPL_YN                   /* 스케일 적용 여부 */  /* 공통코드(R002) */
			, QUANT_FMLA_EXPLN                /* 정량 계산식 설명 */
			, QUANT_FMLA                      /* 정량 계산식 */
			, QUALI_EVAL_METH_TYP_CCD         /* 정성 평가 방식 유형 공통코드 */
			, SCALE_RNG_SETUP_CCD             /* 스케일 구간 설정 공통코드 */
			, NULLV_DATFIL_METH_CCD           /* NULL값 데이터보정 방식 공통코드 공통코드(R006)*/
			, EVALFACT_DTL_DSPY_TYP_CCD       /* 평가항목 상세 표시 유형 공통코드 */
			, QUANT_VAL_UNIT                  /* 정량 값 단위 */
			, SORT                            /* 정렬 */
			, EVALFACT_EXPLN                  /* 평가항목 설명 */
			, CNFD_YN                         /* 확정 여부 */
			, RMK                             /* 비고 */
			, STS                             /* 상태 */
			, REGR_ID                         /* 등록자아이디 */
			, REG_DTTM                        /* 등록일시 */
			, MODR_ID                         /* 수정자아이디 */
			, MOD_DTTM                        /* 수정일시 */
		) VALUES (
			#{g.tenant}                  	  /* 테넌트 아이디 */
			, #{p.evalfact_uuid}              /* 평가항목 UUID */
			, #{p.evalfact_cd}                /* 평가항목 코드 */
			, #{p.evalfact_nm}                /* 평가항목 명 */
			, #{p.evalfact_typ_ccd}        /* 항목 유형 공통코드(R001) */
			, #{p.add_cnd_ccd}           /* 추가 조건 공통코드(EVKD)*/
			, #{p.scale_appl_yn}              /* 스케일 적용 여부 */  /* 공통코드(R002) */
			, #{p.quant_fmla_expln}           /* 정량 계산식 설명 */
			, #{p.quant_fmla}                 /* 정량 계산식 */
			, #{p.quali_eval_meth_typ_ccd}    /* 정성 평가 방식 유형 공통코드 */
			, #{p.scale_rng_setup_ccd}        /* 스케일 구간 설정 공통코드 */
			, #{p.nullv_datfil_meth_ccd}      /* null값 데이터보정 방식 공통코드 공통코드(r006)*/
			, #{p.evalfact_dtl_dspy_typ_ccd}  /* 평가항목 상세 표시 유형 공통코드 */
			, #{p.quant_val_unit}             /* 정량 값 단위 */
			, CAST(#{p.sort} AS INT)          /* 정렬 */
			, #{p.evalfact_expln}             /* 평가항목 설명 */
			, #{p.cnfd_yn}                    /* 확정 여부 */
			, #{p.rmk}                        /* 비고 */
			, 'C'                             /* 상태 */
			, #{g.username}                   /* 등록자아이디 */
			, #{g.now}                        /* 등록일시 */
			, #{g.username}                   /* 수정자아이디 */
			, #{g.now}                        /* 수정일시 */
		)
	</insert>
	<insert id="insertEvalTaskTypCcd">
	/* eval-factor.insertEvalTaskTypCcd : 평가업무 유형 공통코드 저장 */
		INSERT INTO EVALFACT_EVAL_TASK (
		    TEN_ID                          /* 테넌트 아이디 */
			, EVALFACT_UUID                   /* 평가항목 UUID */
			, EVAL_TASK_TYP_CCD               /* 평가 업무 유형 공통코드 */
			, STS                             /* 상태 */
			, REGR_ID                         /* 등록자아이디 */
			, REG_DTTM                        /* 등록일시 */
			, MODR_ID                         /* 수정자아이디 */
			, MOD_DTTM                        /* 수정일시 */
		) VALUES (
		  #{g.tenant}                     /* 테넌트 아이디 */
			, #{p.evalfact_uuid}              /* 평가항목 UUID */
			, #{p.eval_task_typ_ccd}          /* 평가 업무 유형 공통코드 */
			, 'C'                             /* 상태 */
			, #{g.username}                   /* 등록자아이디 */
			, #{g.now}                        /* 등록일시 */
			, #{g.username}                   /* 수정자아이디 */
			, #{g.now}                        /* 수정일시 */
		)
	</insert>
	<update id="updateEvalFactor">
	/* eval-factor.updateEvalFactor : 평가항목 정보 수정 */
		UPDATE EVALFACT
		   SET TEN_ID                     = #{g.tenant}                     /* 테넌트 아이디 */
		  	 , EVALFACT_NM                = #{p.evalfact_nm}                /* 평가항목 명 */
		  	 , EVALFACT_TYP_CCD         = #{p.evalfact_typ_ccd}          /* 항목 유형 공통코드(R001) */
		  	 , ADD_CND_CCD                = #{p.add_cnd_ccd}                /* 추가 조건 공통코드(EVKD)*/
		  	 , SCALE_APPL_YN              = #{p.scale_appl_yn}              /* 스케일 적용 여부 */  /* 공통코드(R002) */
		  	 , QUANT_FMLA_EXPLN           = #{p.quant_fmla_expln}           /* 정량 계산식 설명 */
		  	 , QUANT_FMLA                 = #{p.quant_fmla}                 /* 정량 계산식 */
		  	 , QUALI_EVAL_METH_TYP_CCD    = #{p.quali_eval_meth_typ_ccd}    /* 정성 평가 방식 유형 공통코드 */
		  	 , SCALE_RNG_SETUP_CCD        = #{p.scale_rng_setup_ccd}        /* 스케일 구간 설정 공통코드 */
		  	 , NULLV_DATFIL_METH_CCD      = #{p.nullv_datfil_meth_ccd}      /* NULL값 데이터보정 방식 공통코드 공통코드(R006)*/
		     , NULLV_ELEM_SC			  = #{p.nullv_elem_sc}      		/* Null값 기본 점수 */
		  	 , EVALFACT_DTL_DSPY_TYP_CCD  = #{p.evalfact_dtl_dspy_typ_ccd}  /* 평가항목 상세 표시 유형 공통코드 */
		  	 , QUANT_VAL_UNIT             = #{p.quant_val_unit}             /* 정량 값 단위 */
		  	 , SORT                       = CAST(#{p.sort}  AS INT) 		/* 정렬 */
		  	 , EVALFACT_EXPLN             = #{p.evalfact_expln}             /* 평가항목 설명 */
		  	 , CNFD_YN                    = #{p.cnfd_yn}                    /* 확정 여부 */
		  	 , RMK                        = #{p.rmk}                        /* 비고 */
		  	 , STS                        = 'U'                             /* 상태 */
		  	 , MODR_ID                    = #{g.username}                   /* 수정자아이디 */
		  	 , MOD_DTTM                   = #{g.now}                        /* 수정일시 */
		 WHERE TEN_ID                     = #{g.tenant}      /* 시스템아이디 */
		   AND EVALFACT_UUID              = #{p.evalfact_uuid}       /* 평가항목아이디 */
		   AND EVALFACT_CD                = #{p.evalfact_cd}       /* 평가항목코드 */
	</update>
	<insert id="mergeEvalFactRecFact">
	/* eval-factor.mergeEvalFactRecFact : 평가항목 계산항목 신규저장 */
		MERGE INTO EVALFACT_CALCFACT A    /* 평가항목 계산항목 */
		USING ( SELECT #{g.tenant}          AS TEN_ID           				/* 테넌트 아이디 */
		             , #{g.uuid}            AS EF_REC_FACT_ID   				/*  */
		             , #{p.evalfact_uuid}   AS EVALFACT_UUID            		/* 평가항목 uuid */
		             , #{p.calcfact_uuid}   AS CALCFACT_UUID      				/* 계산항목 uuid */
		             , #{p.rmk}             AS RMK              				/* 비고 */
		             , #{g.username}        AS REGR_ID           				/* 등록자 아이디 */
		        FROM DUM_TBL  /* ONE ROW DATA DUMMY SYSTEM TABLE */
		) B
		ON (    A.TEN_ID = B.TEN_ID      										/* 테넌트 아이디 */
			AND A.EVALFACT_UUID = B.EVALFACT_UUID       						/* 평가항목 uuid */
			AND A.CALCFACT_UUID = B.CALCFACT_UUID 								/* 계산항목 uuid */
			)
		WHEN MATCHED THEN
			UPDATE
			SET STS    = 'U'
			  , MODR_ID = B.REGR_ID
			  , MOD_DTTM = #{g.now}
		WHEN NOT MATCHED THEN
			INSERT
			(
			  TEN_ID           				 	/* 테넌트 아이디 */
			, EVALFACT_UUID               		/* 평가항목 uuid */
			, CALCFACT_UUID         			/* 계산항목 uuid */
			, STS                 				/* 상태 */
			, REGR_ID              				/* 등록자 아이디 */
			, REG_DTTM              			/* 등록일시 */
			, MODR_ID              				/* 수정자 아이디 */
			, MOD_DTTM              			/* 수정일시 */
			)
			VALUES
			(
			  B.TEN_ID           			 	/* 테넌트 아이디 */
			, B.EVALFACT_UUID             		/* 평가항목 uuid */
			, B.CALCFACT_UUID      		 	 	/* 계산항목 uuid */
			, 'C'                 			 	/* 상태 */
			, B.REGR_ID            			 	/* 등록자 아이디 */
			, #{g.now}            		 		/* 등록 일시 */
			, B.REGR_ID            			 	/* 수정자 아이디 */
			, #{g.now}            	 	 		/* 수정 일시 */
			) </insert>
	<select id="findEvalFactorGrp" resultType="Map">
	/* eval-factor.findEvalFactorGrp : 평가항목군 목록 조회 */
		SELECT EFG.TEN_ID          /* 테넌트 아이디 */
		     , EFG.EFACTG_UUID     /* 평가항목군 UUID*/
			 , EFG.EFACTG_CD       /* 평가항목군 코드 */
			 , EFG.EFACTG_NM       /* 평가항목군 명 */
			 , EFG.RMK             /* 비고 */
			 , EFG.STS             /* 상태 */
			 , EFG.REGR_ID         /* 등록자 아이디 */
			 , EFG.REG_DTTM        /* 등록 일시 */
			 , EFG.MODR_ID         /* 수정자 아이디 */
		     , (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN USR_NM ELSE CASE WHEN USR_NM_EN IS NULL OR USR_NM_EN = '' THEN USR_NM ELSE USR_NM_EN END END FROM USR WHERE TEN_ID = EFG.TEN_ID AND USR_ID = EFG.MODR_ID) AS MOD_NM
			 , EFG.MOD_DTTM        /* 수정 일시 */
		  FROM EFACTG EFG
		 WHERE EFG.TEN_ID = #{g.tenant}
		   AND EFG.STS != 'D'
		<if test="p.efactg_nm != null and p.efactg_nm !=''">
			<bind name="efactgNmPattern" value="'%' + p.efactg_nm + '%'"/>
			AND UPPER(EFACTG_NM) LIKE UPPER(#{efactgNmPattern})
		</if>
	</select>
	<insert id="insertEfactg">
	/* eval-factor.insertEfactg : 평가항목군 저장 */
		INSERT INTO EFACTG (
		    TEN_ID
		    , EFACTG_UUID
		    , EFACTG_CD
		    , EFACTG_NM
		    , RMK
		    , STS
		    , REGR_ID
		    , REG_DTTM
		    , MODR_ID
		    , MOD_DTTM
		) VALUES (
		    #{g.tenant}
		    , #{p.efactg_uuid}
		    , #{p.efactg_cd}
		    , #{p.efactg_nm}
		    , #{p.rmk}
        	, 'C'
        	, #{g.username}
        	, #{g.now}
        	, #{g.username}
        	, #{g.now}
		)
	</insert>
	<update id="updateEfactg">
	/* eval-factor.updateEfactg : 평가항목군 수정 */
		UPDATE EFACTG
		   SET EFACTG_NM = #{p.efactg_nm}
		     , RMK       = #{p.rmk}
		     , STS       = 'U'
		     , MODR_ID   = #{g.username}
		     , MOD_DTTM  = #{g.now}
		 WHERE TEN_ID    = #{g.tenant}
		   AND EFACTG_UUID = #{p.efactg_uuid}
	</update>
	<select id="checkEvalFactorGrpNm" resultType="String">
	/* eval-factor.checkEvalFactorGrpNm : 평가항목군 명 중복 조회 */
		SELECT CASE WHEN COUNT(1) &gt; 0 THEN 'Y' ELSE 'N' END
		  FROM EFACTG
		 WHERE TEN_ID = #{g.tenant}
		   AND STS   != 'D'
		   AND EFACTG_NM = #{p.efactg_nm}
		<if test="p.efactg_cd != null and p.efactg_cd !=''">
		   AND EFACTG_CD != #{p.efactg_cd}
		</if>
	</select>
	<delete id="deleteEvalFactorGrp">
	/* eval-factor.deleteEvalFactorGrp : 평가항목군 삭제 */
		DELETE FROM EFACTG
		 WHERE TEN_ID = #{g.tenant}
		   AND EFACTG_UUID  = #{p.efactg_uuid}
	</delete>
	<select id="findListApplyEfactg" resultType="map">
	/* eval-factor.findListApplyEfactg : 적용 평가항목군 조회 */
		SELECT DISTINCT EG.EFACTG_UUID
		     , EG.EFACTG_NM
		     , EG.EFACTG_CD
		     , EF.EVALFACT_UUID
		  FROM EFACTG EG
		  LEFT OUTER JOIN EVALTMPL_EFACTG ETEG
		    ON EG.TEN_ID = ETEG.TEN_ID
		   AND EG.EFACTG_UUID = ETEG.EFACTG_UUID
		   AND ETEG.STS != 'D'
		  LEFT OUTER JOIN EVALTMPL_EVALFACT ETEF
		    ON ETEG.TEN_ID = ETEF.TEN_ID
		   AND ETEG.EVALTMPL_EFACTG_UUID = ETEF.EVALTMPL_EFACTG_UUID
		   AND ETEF.STS != 'D'
		  LEFT OUTER JOIN EVALFACT EF
		    ON ETEF.TEN_ID = EF.TEN_ID
		   AND ETEF.EVALFACT_UUID = EF.EVALFACT_UUID
		   AND EF.STS != 'D'
		 WHERE EG.TEN_ID = #{g.tenant}
		   AND EF.EVALFACT_UUID = #{p.evalfact_uuid}
		   AND EG.STS != 'D'
	</select>
	<select id="findListApplyEvalTask" resultType="map">
	/* eval-factor.findListApplyEvalTask : 적용 평가업무 유형 조회 */
		SELECT DT.TEN_ID
		     , EET.EVALFACT_UUID
		     , CASE WHEN EET.EVALFACT_UUID IS NOT NULL  THEN 'Y' ELSE 'N' END REG_YN
		     , DT.DTLCD AS EVAL_TASK_TYP_CCD
		     , DL.DTLCD_NM AS EVAL_TASK_TYP_NM
		  FROM DTLCD DT
		 INNER JOIN DTLCD_MULTLANG DL
		    ON DT.TEN_ID = DL.TEN_ID
		   AND DT.CCD = DL.CCD
		   AND DT.DTLCD = DL.DTLCD
		  LEFT OUTER JOIN EVALFACT_EVAL_TASK EET
		    ON DL.TEN_ID = EET.TEN_ID
		   AND DT.DTLCD = EET.EVAL_TASK_TYP_CCD
		   AND EET.EVALFACT_UUID = #{p.evalfact_uuid}
		   AND EET.STS != 'D'
		 WHERE DT.TEN_ID = #{g.tenant}
		   AND DT.CCD = 'R704'
		   AND DL.LANG_CCD = #{g.locale}
		   AND DT.STS != 'D'
		 ORDER BY DT.DTLCD_SORT, DT.DTLCD
	</select>
	<delete id="deleteEvalTaskByEvalFact">
	/* eval-factor.deleteEvalTaskByEvalFact : 평가항목 평가업무 유형 삭제 */
		DELETE FROM EVALFACT_EVAL_TASK
		 WHERE TEN_ID = #{g.tenant}
		   AND EVALFACT_UUID = #{p.evalfact_uuid}
	</delete>
	<select id="findEvalFactorApplyInfo" resultType="map">
	/* eval-factor.findEvalFactorApplyInfo : 평가항목이 적용된 평가 업무, 평가템플릿, 평가항목군 조회 */
		SELECT EG.EFACTG_NM AS APPLY_EFACTG_NM
		     , ET.EVALTMPL_NM AS APPLY_EVALTMPL_NM
		     , ET.EVAL_TASK_TYP_CCD
		  FROM EFACTG EG
		  LEFT OUTER JOIN EVALTMPL_EFACTG ETEG
		    ON EG.TEN_ID = ETEG.TEN_ID
		   AND EG.EFACTG_UUID = ETEG.EFACTG_UUID
		   AND ETEG.STS != 'D'
		  LEFT OUTER JOIN EVALTMPL_EVALFACT ETEF
		    ON ETEG.TEN_ID = ETEF.TEN_ID
		   AND ETEG.EVALTMPL_EFACTG_UUID = ETEF.EVALTMPL_EFACTG_UUID
		   AND ETEF.STS != 'D'
		  LEFT OUTER JOIN EVALTMPL ET
		    ON ETEF.TEN_ID = ET.TEN_ID
		   AND ETEF.EVALTMPL_UUID = ET.EVALTMPL_UUID
		   AND ET.STS != 'D'
		  LEFT OUTER JOIN EVALFACT EF
		    ON ETEF.TEN_ID = EF.TEN_ID
		   AND ETEF.EVALFACT_UUID = EF.EVALFACT_UUID
		   AND EF.STS != 'D'
		 WHERE EG.TEN_ID = #{g.tenant}
		   AND EF.EVALFACT_UUID = #{p.evalfact_uuid}
		   AND EG.STS != 'D'
		 ORDER BY ET.EVAL_TASK_TYP_CCD
	</select>
</mapper>
