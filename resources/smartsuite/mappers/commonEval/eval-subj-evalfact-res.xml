<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="eval-subj-evalfact-res">
	<select id="findEvalSubjEfactRes" resultType="map">
    /*eval-subj-evalfact-res.findEvalSubjEfactRes : 평가항목 결과 조회 */
    SELECT TEN_ID
         , EVAL_SUBJ_EVALFACT_RES_UUID
         , EVAL_SUBJ_RES_UUID
         , EVALTMPL_EVALFACT_UUID
         , EVALTMPL_EFACTG_UUID
         , EVALFACT_SC
         , SCALE_SC
         , QUANT_FMLA
         , QUANT_FMLA_VAL
         , QUANT_FMLA_EXPLN
         , QUANT_EVALFACT_NULLV_YN
         , RMK
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
      FROM EVAL_SUBJ_EVALFACT_RES EFCT_RES
     WHERE EFCT_RES.TEN_ID = #{p.ten_id}
         <if test="p.eval_subj_res_uuid != null and p.eval_subj_res_uuid != ''">
             AND EFCT_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
         </if>
         <if test="p.eval_subj_evalfact_res_uuid != null and p.eval_subj_evalfact_res_uuid != ''">
             AND EFCT_RES.EVAL_SUBJ_EVALFACT_RES_UUID = #{p.eval_subj_evalfact_res_uuid}
	     </if>
    </select>
    <insert id="insertEvalSubjEfactgRes">
    /* eval-subj-evalfact-res.insertEvalSubjEfactgRes : 평가항목군 결과 생성 */
    INSERT INTO EVAL_SUBJ_EFACTG_RES (
           TEN_ID
         , EVAL_SUBJ_EFACTG_RES_UUID
         , EVAL_SUBJ_RES_UUID
         , EFACTG_UUID
         , EVALTMPL_UUID
         , EVALTMPL_EFACTG_UUID
         , RMK
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT TMPL_FCTG.TEN_ID
         , RANDOMUUID  , SUBJ_RES.EVAL_SUBJ_RES_UUID
         , TMPL_FCTG.EFACTG_UUID
         , TMPL_FCTG.EVALTMPL_UUID
         , TMPL_FCTG.EVALTMPL_EFACTG_UUID
         , #{p.rmk}
         , 'C'
        <choose>
            <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                , #{p.dfn_regr_id}
            </when>
            <otherwise>
                , #{g.username}
            </otherwise>
           </choose>
           , #{g.now}
           <choose>
            <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                , #{p.dfn_regr_id}
            </when>
            <otherwise>
                , #{g.username}
            </otherwise>
        </choose>
        , #{g.now}
      FROM EVAL_SUBJ_RES SUBJ_RES
     INNER JOIN EVALTMPL_EFACTG TMPL_FCTG
        ON SUBJ_RES.TEN_ID = TMPL_FCTG.TEN_ID
       AND SUBJ_RES.EVALTMPL_UUID = TMPL_FCTG.EVALTMPL_UUID
       AND TMPL_FCTG.STS != 'D'
     WHERE SUBJ_RES.TEN_ID = #{p.ten_id}
     <choose>
         <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
            AND SUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
         </when>
         <otherwise>
             AND SUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
         </otherwise>
     </choose>
       AND SUBJ_RES.STS != 'D'
    </insert>
	<insert id="insertEvalSubjEvalfactRes">
    /* eval-subj-evalfact-res.insertEvalSubjEvalfactRes : 평가항목 결과 생성 */
    INSERT INTO EVAL_SUBJ_EVALFACT_RES (
           TEN_ID
         , EVAL_SUBJ_EVALFACT_RES_UUID
         , EVAL_SUBJ_RES_UUID
		 , EVALTMPL_EVALFACT_UUID
		 , EVALTMPL_EFACTG_UUID
		 , EVALTMPL_UUID
         , EVALFACT_UUID
         , QUANT_FMLA
         , QUANT_FMLA_EXPLN
         , RMK
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT TMPL_FCT.TEN_ID
         , RANDOMUUID  , SUBJ_RES.EVAL_SUBJ_RES_UUID
         , TMPL_FCT.EVALTMPL_EVALFACT_UUID
         , TMPL_FCT.EVALTMPL_EFACTG_UUID
         , TMPL_FCT.EVALTMPL_UUID
         , TMPL_FCT.EVALFACT_UUID
         , FCT.QUANT_FMLA
         , FCT.QUANT_FMLA_EXPLN
         , #{p.rmk}
         , 'C'
         <choose>
             <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                 , #{p.dfn_regr_id}
             </when>
             <otherwise>
                , #{g.username}
             </otherwise>
         </choose>
         , #{g.now}
         <choose>
             <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                 , #{p.dfn_regr_id}
             </when>
             <otherwise>
                , #{g.username}
             </otherwise>
         </choose>
         , #{g.now}
      FROM EVAL_SUBJ_RES SUBJ_RES
     INNER JOIN EVALTMPL_EVALFACT TMPL_FCT
        ON SUBJ_RES.TEN_ID = TMPL_FCT.TEN_ID
       AND SUBJ_RES.EVALTMPL_UUID = TMPL_FCT.EVALTMPL_UUID
       AND TMPL_FCT.STS != 'D'
     INNER JOIN EVALFACT FCT
        ON TMPL_FCT.TEN_ID = FCT.TEN_ID
       AND TMPL_FCT.EVALFACT_UUID = FCT.EVALFACT_UUID
     WHERE SUBJ_RES.TEN_ID = #{p.ten_id}
     <choose>
         <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
             AND SUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
         </when>
         <otherwise>
             AND SUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
         </otherwise>
     </choose>
       AND SUBJ_RES.STS != 'D'
    </insert>
	<insert id="insertEvalCalcfactRes">
	/* eval-subj-evalfact-res.insertEvalCalcfactRes : 평가대상 계산항목 결과를 생성한다. */
    INSERT INTO EVAL_SUBJ_CALCFACT_RES (
           TEN_ID
         , EVAL_SUBJ_CALCFACT_RES_UUID
         , EVAL_SUBJ_RES_UUID
         , CALCFACT_UUID
    --   , CALCFACT_VAL  실적항목 계산 후 업데이트
    --   , NULLV_YN      실적항목 계산 후 업데이트
         , RMK
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
         , CALC_REQD_YN
    )
    SELECT CALC.TEN_ID
         , RANDOMUUID  , SUBJ_RES.EVAL_SUBJ_RES_UUID
         , CALC.CALCFACT_UUID
         , #{p.rmk}
         , 'C'
         <choose>
             <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                 , #{p.dfn_regr_id}
             </when>
             <otherwise>
                 , #{g.username}
             </otherwise>
         </choose>
         , #{g.now}
         <choose>
             <when test="p.dfn_regr_id != null and p.dfn_regr_id != ''">
                 , #{p.dfn_regr_id}
             </when>
             <otherwise>
                 , #{g.username}
             </otherwise>
         </choose>
         , #{g.now}
         , 'Y'
     FROM EVAL_SUBJ_RES SUBJ_RES
    INNER JOIN EVALTMPL TMPL
       ON SUBJ_RES.TEN_ID = TMPL.TEN_ID
      AND SUBJ_RES.EVALTMPL_UUID = TMPL.EVALTMPL_UUID
      AND TMPL.STS != 'D'
    INNER JOIN EVALTMPL_EVALFACT TMPL_FCT
       ON TMPL.TEN_ID = TMPL_FCT.TEN_ID
      AND TMPL.EVALTMPL_UUID = TMPL_FCT.EVALTMPL_UUID
      AND TMPL_FCT.STS != 'D'
    INNER JOIN EVALFACT FCT
       ON TMPL_FCT.TEN_ID = FCT.TEN_ID
      AND TMPL_FCT.EVALFACT_UUID = FCT.EVALFACT_UUID
      AND FCT.EVALFACT_TYP_CCD = 'QUANT'
    INNER JOIN EVALFACT_CALCFACT CALC
       ON FCT.TEN_ID = CALC.TEN_ID
      AND FCT.EVALFACT_UUID = CALC.EVALFACT_UUID
      AND CALC.STS != 'D'
    WHERE SUBJ_RES.TEN_ID = #{p.ten_id}
    <choose>
        <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
            AND SUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
        </when>
        <otherwise>
            AND SUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
        </otherwise>
    </choose>
	</insert>
	<delete id="deleteEvalSubjEfactgRes">
	/* eval-subj-mgt.deleteEvalSubjEfactgRes : 평가대상 평가항목군 결과를 삭제한다. */
    DELETE  FROM EVAL_SUBJ_EFACTG_RES EFACTG_RES
     WHERE TEN_ID = #{p.ten_id}
        <choose>
            <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
                AND EXISTS (
                     SELECT 'X'
                       FROM EVAL_SUBJ_RES ESRES
                      WHERE ESRES.TEN_ID = EFACTG_RES.TEN_ID
                        AND ESRES.EVAL_SUBJ_RES_UUID = EFACTG_RES.EVAL_SUBJ_RES_UUID
                        AND ESRES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                    )
            </when>
            <otherwise>
                AND EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
            </otherwise>
        </choose>
	</delete>
	<delete id="deleteEvalSubjEvalfactRes">
	/* eval-subj-mgt.deleteEvalFacatRes : 평가대상 평가항목결과를 삭제한다. */
    DELETE  FROM EVAL_SUBJ_EVALFACT_RES EVALFACT_RES
     WHERE TEN_ID = #{p.ten_id}
        <choose>
            <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
                AND EXISTS (
                    SELECT 'X'
                      FROM EVAL_SUBJ_RES ESRES
                     WHERE ESRES.TEN_ID = EVALFACT_RES.TEN_ID
                       AND ESRES.EVAL_SUBJ_RES_UUID = EVALFACT_RES.EVAL_SUBJ_RES_UUID
                       AND ESRES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                )
            </when>
            <otherwise>
                AND EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
            </otherwise>
        </choose>
	</delete>
    <delete id="deleteEvalCalcfactRes">
    /* eval-subj-evalfact-res.deleteEvalCalcfactRes : 평가 계산항목 결과  */
    DELETE  FROM EVAL_SUBJ_CALCFACT_RES CALCFACT_RES
    WHERE TEN_ID = #{p.ten_id}
    <choose>
        <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
            AND EXISTS (
                SELECT 'X'
                  FROM EVAL_SUBJ_RES ESRES
                 WHERE ESRES.TEN_ID = CALCFACT_RES.TEN_ID
                   AND ESRES.EVAL_SUBJ_RES_UUID = CALCFACT_RES.EVAL_SUBJ_RES_UUID
                   AND ESRES.EVAL_REQ_UUID = #{p.eval_req_uuid}
            )
        </when>
        <otherwise>
            AND EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
        </otherwise>
    </choose>
    </delete>
    <update id="calculateQualiEvalSubjEvalfactSc">
    /* eval-subj-evalfact-res.calculateQualiEvalSubjEvalfactSc : 평가대상 평가항목 정성 점수를 계산한다. */
    MERGE INTO EVAL_SUBJ_EVALFACT_RES EFACT_RES
    USING (
           SELECT EFACT_SC_RES.TEN_ID
                , EFACT_SC_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                , EFACT_SC_RES.AVG_EFACT_SC
           <choose>
               <when test="p.add_cnd_ccd eq 'NA'.toString()">
                /* 일반항목 처리 */
                , CASE WHEN 100 <![CDATA[<]]> EFACT_SC_RES.AVG_EFACT_SC THEN 100 * (EFACT_SC_RES.EFACT_WGT / 100) * (EFACT_SC_RES.EFACTG_WGT / 100)
                       WHEN 0 &gt; EFACT_SC_RES.AVG_EFACT_SC THEN 0
                       ELSE  EFACT_SC_RES.AVG_EFACT_SC * (EFACT_SC_RES.EFACT_WGT / 100) * (EFACT_SC_RES.EFACTG_WGT / 100)
                   END AS EFACT_SC
               </when>
               <otherwise>
               /* 가점, 감점 처리. 가점, 감점 항목인 경우 가중치를 사용하지 않음. 스케일 점수가 항목점수에 그대로 반영됨. */
               /* 평가항목 유형(정량정성 구분)이 '정성점수 직접입력' 인 경우 적용값 범위는 스케일데이터의 ST_VAL ~ STP_VAL을 따른다. */
               , CASE WHEN EFACT_SC_RES.EVALFACT_TYP_CCD = 'QUALI_SC_INP' THEN
                            (CASE WHEN ET_EFACT_SCALE.STP_VAL <![CDATA[<]]> EFACT_SC_RES.AVG_EFACT_SC THEN ET_EFACT_SCALE.STP_VAL
                                  WHEN ET_EFACT_SCALE.ST_VAL &gt; EFACT_SC_RES.AVG_EFACT_SC THEN ET_EFACT_SCALE.ST_VAL
                                  ELSE EFACT_SC_RES.AVG_EFACT_SC
                             END ) * EFACT_SC_RES.PN_SIGN
                      ELSE (CASE WHEN 100 <![CDATA[<]]> EFACT_SC_RES.AVG_EFACT_SC THEN 100
                                 WHEN 0 &gt; EFACT_SC_RES.AVG_EFACT_SC THEN 0
                                 ELSE EFACT_SC_RES.AVG_EFACT_SC
                            END )
                  END AS EFACT_SC
               </otherwise>
           </choose>
           FROM (
                  SELECT EFACT_RES.TEN_ID
                       , EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                       , EFACT_RES.EVALTMPL_EVALFACT_UUID
                       , CASE WHEN ET_EFACT.EVALFACT_WGT IS NULL THEN 100 ELSE ET_EFACT.EVALFACT_WGT END        AS EFACT_WGT     /* 평가항목 가중치 */
                       , CASE WHEN ET_EFACTG.EFACTG_WGT IS NULL THEN 100 ELSE ET_EFACTG.EFACTG_WGT END          AS EFACTG_WGT    /* 평가항목군 가중치 */
                       , CASE WHEN EFACT.ADD_CND_CCD = 'DEDTN' THEN -1 ELSE 1 END   AS PN_SIGN       /* 가감점수에 따른 양수음수부호 */
                       , AVG(EVALTR_EFACT_RES.EVALTR_EFACT_SC)                      AS AVG_EFACT_SC
                       , EFACT.EVALFACT_TYP_CCD
                       , EFACT.ADD_CND_CCD
                    FROM EVAL_SUBJ_EVALFACT_RES EFACT_RES
                   INNER JOIN (
                               SELECT ESUBJ_RES.TEN_ID
                                    , ESUBJ_RES.EVAL_SUBJ_RES_UUID
                                    , EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID
                                    , EVALTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                                    , SUM(EVALTR_EFACT_RES.SLCTD_SCALE_SC) AS EVALTR_EFACT_SC
                                 FROM EVAL_SUBJ_RES ESUBJ_RES
                                INNER JOIN EVAL_SUBJ_EVALTR_RES EVALTR_RES
                                   ON ESUBJ_RES.TEN_ID = EVALTR_RES.TEN_ID
                                  AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EVALTR_RES.EVAL_SUBJ_RES_UUID
                                  AND EVALTR_RES.EVAL_PRGS_STS_CCD = 'SUBM' -- [R401] '제출' 상태
                                  AND EVALTR_RES.STS != 'D'
                                INNER JOIN EVALTR_EVALFACT_RES EVALTR_EFACT_RES
                                   ON EVALTR_RES.TEN_ID = EVALTR_EFACT_RES.TEN_ID
                                  AND EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID = EVALTR_EFACT_RES.EVAL_SUBJ_EVALTR_RES_UUID
                                  AND EVALTR_EFACT_RES.STS != 'D'
                                WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
                                  AND ESUBJ_RES.STS != 'D'
                              <choose>
                                  <when test="p.req_type != null and p.req_type eq 'SUBJ'.toString()">
                                  /* 단일 평가대상에 대해 점수 집계 */
                                  AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
                                  </when>
                                  <otherwise>
                                  AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                                  </otherwise>
                              </choose>
                                GROUP BY ESUBJ_RES.TEN_ID, ESUBJ_RES.EVAL_SUBJ_RES_UUID, EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID, EVALTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                            ) EVALTR_EFACT_RES
                           ON EFACT_RES.TEN_ID = EVALTR_EFACT_RES.TEN_ID
                          AND EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID = EVALTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                        INNER JOIN EVAL_SUBJ_RES ESUBJ_RES
                           ON EFACT_RES.TEN_ID = ESUBJ_RES.TEN_ID
                          AND EFACT_RES.EVAL_SUBJ_RES_UUID = ESUBJ_RES.EVAL_SUBJ_RES_UUID
                          AND ESUBJ_RES.STS != 'D'
                        INNER JOIN EVALFACT EFACT                        /* 평가항목 */
                           ON EFACT_RES.TEN_ID = EFACT.TEN_ID
                          AND EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
                         LEFT OUTER JOIN EVALTMPL_EVALFACT ET_EFACT      /* 평가템플릿 평가항목 */
                           ON EFACT_RES.TEN_ID = ET_EFACT.TEN_ID
                          AND EFACT_RES.EVALTMPL_EVALFACT_UUID = ET_EFACT.EVALTMPL_EVALFACT_UUID
                          AND ET_EFACT.STS != 'D'
                         LEFT OUTER JOIN EVALTMPL_EFACTG ET_EFACTG
                           ON EFACT_RES.TEN_ID = ET_EFACTG.TEN_ID
                          AND EFACT_RES.EVALTMPL_EFACTG_UUID = ET_EFACTG.EVALTMPL_EFACTG_UUID
                          AND ET_EFACTG.STS != 'D'
                        WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
                        <choose>
                            <when test="p.req_type != null and p.req_type eq 'SUBJ'.toString()">
                                /* 단일 평가대상에 대해 점수 집계 */
                                AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
                            </when>
                            <when test="p.req_type != null and p.req_type eq 'EVALFACT'.toString()">
                                AND EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID = #{p.eval_subj_evalfact_res_uuid}
                            </when>
                            <otherwise>
                                AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                            </otherwise>
                        </choose>
                        <choose>
                            <when test="p.evalfact_typ_ccd_list != null and p.evalfact_typ_ccd_list.size() != 0">
                                AND EFACT.EVALFACT_TYP_CCD IN
                                <foreach close=")" collection="p.evalfact_typ_ccd_list" item="div_ccd" open="(" separator=",">
                                    #{div_ccd}
                                </foreach>
                            </when>
                            <otherwise>
                                AND EFACT.EVALFACT_TYP_CCD = #{p.evalfact_typ_ccd}
                            </otherwise>
                        </choose>
                        <choose>
                            <when test="p.add_cnd_ccd_list != null and p.add_cnd_ccd_list.size() != 0">
                                AND EFACT.ADD_CND_CCD IN
                                <foreach close=")" collection="p.add_cnd_ccd_list" item="cnd_ccd" open="(" separator=",">
                                    #{cnd_ccd}
                                </foreach>
                            </when>
                            <otherwise>
                                AND EFACT.ADD_CND_CCD = #{p.add_cnd_ccd}
                            </otherwise>
                        </choose>
                        GROUP BY EFACT_RES.TEN_ID, EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID, EFACT_RES.EVALTMPL_EVALFACT_UUID, EFACT.ADD_CND_CCD, EFACT.EVALFACT_TYP_CCD,  ET_EFACT.EVALFACT_WGT, ET_EFACTG.EFACTG_WGT
                ) EFACT_SC_RES
             LEFT OUTER JOIN EVALTMPL_EVALFACT_SCALE ET_EFACT_SCALE   /* 평가템플릿 평가항목 스케일 */
               ON EFACT_SC_RES.TEN_ID = ET_EFACT_SCALE.TEN_ID
              AND EFACT_SC_RES.EVALTMPL_EVALFACT_UUID = ET_EFACT_SCALE.EVALTMPL_EVALFACT_UUID
              AND EFACT_SC_RES.ADD_CND_CCD != 'NA'              /* 가점 혹은 감점항목이고 정성항목값 직접*/
              AND EFACT_SC_RES.EVALFACT_TYP_CCD = 'QUALI_SC_INP'
        ) AVG_SC
       ON (    EFACT_RES.TEN_ID = AVG_SC.TEN_ID
           AND EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID = AVG_SC.EVAL_SUBJ_EVALFACT_RES_UUID
        )
     WHEN MATCHED THEN
          UPDATE
             SET MODR_ID = #{p.dfn_usr_id}
               , MOD_DTTM  = #{g.now}
               , EVALFACT_SC = AVG_SC.EFACT_SC </update>
    <select id="getEvalfactTypEvalfactExistYn" resultType="string">
    /* eval-subj-evalfact-res.getEvalfactTypEvalfactExistYn : 정량 / 정성 항목 존재 여부를 반환한다. */
    SELECT CASE WHEN COUNT(*) &gt; 0 THEN 'Y' ELSE 'N' END
      FROM EVAL_SUBJ_RES ESUBJ_RES
     INNER JOIN EVAL_SUBJ_EVALFACT_RES EFACT_RES
        ON ESUBJ_RES.TEN_ID = EFACT_RES.TEN_ID
       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EFACT_RES.EVAL_SUBJ_RES_UUID
     INNER JOIN EVALFACT EFACT
        ON EFACT_RES.TEN_ID = EFACT.TEN_ID
       AND EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
     WHERE ESUBJ_RES.TEN_ID = #{g.tenant}
      <choose>
          <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
       AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
          </when>
          <otherwise>
       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
          </otherwise>
      </choose>
      <choose>
          <when test="p.evalfact_typ_ccd_list != null and p.evalfact_typ_ccd_list.size() != 0">
              AND EFACT.EVALFACT_TYP_CCD IN
              <foreach close=")" collection="p.evalfact_typ_ccd_list" item="divCcd" open="(" separator=",">
                  #{divCcd}
              </foreach>
          </when>
          <otherwise>
              AND EFACT.EVALFACT_TYP_CCD = #{p.evalfact_typ_ccd}
          </otherwise>
      </choose>
    </select>
    <update id="calculateEvalSubjEfactgSc">
    /* eval-subj-evalfact-res.calculateEvalSubjEfactgSc : 평가대상 평가항목군 결과 저장 */
    MERGE INTO EVAL_SUBJ_EFACTG_RES SRC
    USING (SELECT TEN_ID
                , EVAL_SUBJ_EFACTG_RES_UUID
                , SUM(CASE WHEN ADD_CND_CCD = 'NA'     /* 항목군 내에서 일반 항목 점수의 합은 최소 0 이상 최대 가중치 이하 점수 적용 */
                                THEN CASE WHEN EFACT_TYP_EFACTG_SC <![CDATA[<]]> 0 THEN 0
                                          WHEN EFACT_TYP_EFACTG_SC &gt; EFACTG_WGT THEN EFACTG_WGT
                                          ELSE EFACT_TYP_EFACTG_SC
                                      END
                           ELSE EFACT_TYP_EFACTG_SC          /* 일반항목이 아닌 가점, 감점 항목의 경우 그룹 가중치를 고려하지 않고 점수 적용. */
                      END) AS EFACTG_SC
             FROM ( SELECT ESUBJ_RES.TEN_ID
                         , EFACTG_RES.EVAL_SUBJ_EFACTG_RES_UUID
                         , EFACT.ADD_CND_CCD
                         , ET_EFACTG.EFACTG_WGT
                         , SUM(EFACT_RES.EVALFACT_SC) AS EFACT_TYP_EFACTG_SC
                      FROM EVAL_SUBJ_RES ESUBJ_RES
                     INNER JOIN EVAL_SUBJ_EFACTG_RES EFACTG_RES
                        ON ESUBJ_RES.TEN_ID = EFACTG_RES.TEN_ID
                       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EFACTG_RES.EVAL_SUBJ_RES_UUID
                       AND EFACTG_RES.STS != 'D'
                     INNER JOIN EVALTMPL_EFACTG ET_EFACTG
                        ON EFACTG_RES.TEN_ID = ET_EFACTG.TEN_ID
                       AND EFACTG_RES.EVALTMPL_EFACTG_UUID = ET_EFACTG.EVALTMPL_EFACTG_UUID
                     INNER JOIN EVAL_SUBJ_EVALFACT_RES EFACT_RES
                        ON EFACT_RES.TEN_ID = ESUBJ_RES.TEN_ID
                       AND EFACT_RES.EVAL_SUBJ_RES_UUID = ESUBJ_RES.EVAL_SUBJ_RES_UUID
                       AND EFACTG_RES.EVALTMPL_EFACTG_UUID = EFACT_RES.EVALTMPL_EFACTG_UUID
                       AND ESUBJ_RES.STS != 'D'
                     INNER JOIN EVALFACT EFACT
                        ON EFACT_RES.TEN_ID = EFACT.TEN_ID
                        AND EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
                     WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
                     <choose>
                        <when test="p.req_type != null and p.req_type eq 'SUBJ'.toString()">
                            /* 단일 평가대상에 대해 점수 집계 */
                            AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
                        </when>
                        <when test="p.req_type != null and p.req_type eq 'EVALFACT'.toString()">
                            AND EFACT_RES.EVAL_SUBJ_EFACTG_RES_UUID = (SELECT EVAL_SUBJ_EFACTG_RES_UUID
                                                                         FROM EVAL_SUBJ_EVALFACT_RES
                                                                        WHERE TEN_ID = EFACT_RES.TEN_ID
                                                                          AND EVAL_SUBJ_EVAFACT_RES_UUID = #{p.eval_subj_evalfact_res_uuid})
                        </when>
                        <otherwise>
                            AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                        </otherwise>
                    </choose>
               GROUP BY ESUBJ_RES.TEN_ID, EFACTG_RES.EVAL_SUBJ_EFACTG_RES_UUID, EFACT.ADD_CND_CCD, ET_EFACTG.EFACTG_WGT
             ) EFACTG
         GROUP BY EFACTG.TEN_ID, EFACTG.EVAL_SUBJ_EFACTG_RES_UUID
        ) TARG
    ON (    SRC.TEN_ID = TARG.TEN_ID
        AND SRC.EVAL_SUBJ_EFACTG_RES_UUID = TARG.EVAL_SUBJ_EFACTG_RES_UUID
        )
    WHEN MATCHED THEN
         UPDATE
            SET MODR_ID = #{g.username}
              , MOD_DTTM = #{g.now}
              , EFACTG_SC = TARG.EFACTG_SC </update>
    <select id="findListEvalSubjEvalfactRes" resultType="map">
    /* eval-subj-evalfact-res.findListEvalSubjEvalfactRes : 평가요청의 평가대상 평가항목 결과를 조회한다. */
    SELECT ESUBJ_RES.TEN_ID
         , ESUBJ_RES.EVAL_REQ_UUID
         , ESUBJ_RES.EVAL_SUBJ_RES_UUID
         , EFACTG_RES.EFACTG_UUID
         , EFACTG_RES.EFACTG_SC
         , EFACT_RES.EVALFACT_UUID
         , EFACT_RES.EVALFACT_SC
         , EFACTG.EFACTG_CD
         , EFACTG.EFACTG_NM
         , EFACT.EVALFACT_CD
         , EFACT.EVALFACT_NM
         , EFACT.ADD_CND_CCD
         , EFACT.EVALFACT_TYP_CCD
         , ET_EFACTG.SORT   AS EFACTG_SORT
         , ET_EFACT.SORT    AS EVALFACT_SORT
         , CONCAT((CASE WHEN ET_EFACTG.SORT IS NULL THEN 999 ELSE ET_EFACTG.SORT END), (CASE WHEN ET_EFACT.SORT IS NULL THEN 999 ELSE ET_EFACT.SORT END)) AS SORT
      FROM EVAL_SUBJ_RES ESUBJ_RES                /* 평가대상 결과 */
     INNER JOIN EVAL_SUBJ_EFACTG_RES EFACTG_RES   /* 평가대상 평가항목군 결과 */
        ON ESUBJ_RES.TEN_ID = EFACTG_RES.TEN_ID
       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EFACTG_RES.EVAL_SUBJ_RES_UUID
       AND EFACTG_RES.STS != 'D'
     INNER JOIN EVALTMPL_EFACTG ET_EFACTG         /* 평가템플릿 평가항목군 */
        ON EFACTG_RES.TEN_ID = ET_EFACTG.TEN_ID
       AND EFACTG_RES.EVALTMPL_EFACTG_UUID = ET_EFACTG.EVALTMPL_EFACTG_UUID
     INNER JOIN EFACTG                            /* 평가항목군 */
        ON EFACTG_RES.TEN_ID = EFACTG.TEN_ID
       AND EFACTG_RES.EFACTG_UUID = EFACTG.EFACTG_UUID
     INNER JOIN EVAL_SUBJ_EVALFACT_RES EFACT_RES  /* 평가대상 평가항목 결과 */
        ON ESUBJ_RES.TEN_ID = EFACT_RES.TEN_ID
       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EFACT_RES.EVAL_SUBJ_RES_UUID
       AND EFACTG_RES.EVALTMPL_EFACTG_UUID  = EFACT_RES.EVALTMPL_EFACTG_UUID
       AND EFACT_RES.STS != 'D'
     INNER JOIN EVALTMPL_EVALFACT ET_EFACT        /* 평가템플릿 평가항목 */
        ON EFACT_RES.TEN_ID = ET_EFACT.TEN_ID
       AND EFACT_RES.EVALTMPL_EVALFACT_UUID = ET_EFACT.EVALTMPL_EVALFACT_UUID
     INNER JOIN EVALFACT EFACT                    /* 평가항목 */
        ON EFACT_RES.TEN_ID = EFACT.TEN_ID
       AND EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
    WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
      AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
    ORDER BY ET_EFACTG.SORT, ET_EFACT.SORT
    </select>
    <update id="updateEvaltrScByQuantEvalfactSc">
    /* eval-subj-evalfact-res.updateEvaltrScByQuantEvalfactSc : 정량항목 결과를 담당자별 평가점수에 반영한다. */
    MERGE INTO EVAL_SUBJ_EVALTR_RES SRC
    USING (
           SELECT EFACTG_RES_SC.TEN_ID
                , EFACTG_RES_SC.EVAL_REQ_UUID
                , EFACTG_RES_SC.EVAL_SUBJ_EVALTR_RES_UUID
                , SUM(
                        (CASE WHEN EFACTG_RES_SC.EFACTG_GEN_SC &gt; EFACTG_RES_SC.EFACTG_WGT THEN EFACTG_RES_SC.EFACTG_GEN_SC
                               WHEN EFACTG_RES_SC.EFACTG_GEN_SC <![CDATA[<]]> 0 THEN 0
                               ELSE EFACTG_RES_SC.EFACTG_GEN_SC
                           END)
                      + EFACTG_RES_SC.EFACTG_NOT_GEN_SC) AS EVALTR_SC
            FROM (
                  SELECT EFACT_RES_SC.TEN_ID
                       , EFACT_RES_SC.EVAL_REQ_UUID
                       , EFACT_RES_SC.EVAL_SUBJ_EVALFACT_RES_UUID
                       , EFACT_RES_SC.EVAL_SUBJ_RES_UUID
                       , EFACT_RES_SC.EFACTG_UUID
                       , EFACT_RES_SC.EFACTG_WGT
                       , EFACT_RES_SC.EVAL_SUBJ_EVALTR_RES_UUID
                       , SUM(CASE WHEN EVALFACT_TYP_GEN_YN = 'Y' THEN EFACT_RES_SC.EVALFACT_SC ELSE 0 END) AS EFACTG_GEN_SC
                       , SUM(CASE WHEN EVALFACT_TYP_GEN_YN = 'N' THEN EFACT_RES_SC.EVALFACT_SC ELSE 0 END) AS EFACTG_NOT_GEN_SC
                   FROM (
                         SELECT ESUBJ_RES.TEN_ID
                              , ESUBJ_RES.EVAL_REQ_UUID
                              , ESUBJ_RES.OORG_CD
                              , ESUBJ_RES.EVAL_SUBJ_RES_UUID
                              , EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                              , EFACT_RES.EVALTMPL_EFACTG_UUID
                              , EFACT_RES.EVALTMPL_EVALFACT_UUID
                              , EFACT.EVALFACT_UUID
                              , ET_EFACTG.EFACTG_UUID
                              , ET_EFACTG.EFACTG_WGT
                              , EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID
                              , CASE WHEN EFACT.EVALFACT_TYP_CCD != 'QUANT' AND EFACT.ADD_CND_CCD = 'NA'
                                          THEN (    EVTR_EFACT_RES.USR_SLCTD_SC
                                                 * (CASE WHEN ET_EFACT.EVALFACT_WGT IS NULL THEN 100 ELSE ET_EFACT.EVALFACT_WGT END / 100)
                                                 * (CASE WHEN ET_EFACTG.EFACTG_WGT IS NULL THEN 100 ELSE ET_EFACTG.EFACTG_WGT END / 100)
                                               )
                                     WHEN EFACT.EVALFACT_TYP_CCD != 'QUANT' AND  EFACT.ADD_CND_CCD != 'NA'
                                          THEN (    EVTR_EFACT_RES.USR_SLCTD_SC
                                                 * (CASE WHEN ET_EFACT.EVALFACT_WGT IS NULL THEN 100 ELSE ET_EFACT.EVALFACT_WGT END / 100)
                                                 * (CASE WHEN EFACT.ADD_CND_CCD = 'DEDTN' THEN -1 ELSE 1 END)
                                                )
                                     ELSE EFACT_RES.EVALFACT_SC
                                 END AS EVALFACT_SC    /* 정성평가항목점수(정성 담당자 평가점수 평균) */
                             , EVTR_EFACT_RES.EVALFACT_TYP_GEN_YN
                          FROM EVAL_SUBJ_RES ESUBJ_RES
                         INNER JOIN EVAL_SUBJ_EVALFACT_RES EFACT_RES
                            ON ESUBJ_RES.TEN_ID = EFACT_RES.TEN_ID
                           AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EFACT_RES.EVAL_SUBJ_RES_UUID
                           AND EFACT_RES.STS != 'D'
                         INNER JOIN EVAL_SUBJ_EVALTR_RES EVALTR_RES
                            ON ESUBJ_RES.TEN_ID = EVALTR_RES.TEN_ID
                           AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = EVALTR_RES.EVAL_SUBJ_RES_UUID
                           AND EVALTR_RES.STS != 'D'
                         INNER JOIN EVALFACT EFACT
                            ON EFACT_RES.TEN_ID = EFACT.TEN_ID
                           AND EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
                         INNER JOIN EVALTMPL_EVALFACT ET_EFACT
                            ON EFACT_RES.TEN_ID = ET_EFACT.TEN_ID
                           AND EFACT_RES.EVALTMPL_EVALFACT_UUID = ET_EFACT.EVALTMPL_EVALFACT_UUID
                         INNER JOIN EVALTMPL_EFACTG ET_EFACTG
                            ON EFACT_RES.TEN_ID = ET_EFACTG.TEN_ID
                           AND EFACT_RES.EVALTMPL_EFACTG_UUID = ET_EFACTG.EVALTMPL_EFACTG_UUID
                          LEFT OUTER JOIN (
                                           SELECT EVTR_EFACT_RES.TEN_ID
                                                , EVTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                                                , EVTR_EFACT_RES.EVAL_SUBJ_EVALTR_RES_UUID
                                                , SUM ( /* 일반항목 아닌, 가감점 항목인 경우 : 항목값이 가중치를 따르지 않고 선택된(입력) 스케일값이 그대로 반영된다. */
                                                       /* 단, 가감점 항목이고 항목 유형이 정성 점수 입력인 경우 : 스케일에 시작값, 멈춤값으로 입력 가능 값의 범위를 제한힌다. */
                                                       CASE WHEN EFACT.ADD_CND_CCD != 'NA' AND EFACT.EVALFACT_TYP_CCD = 'QUALI_SC_INP'
                                                            THEN ( CASE WHEN EVTR_EFACT_RES.SLCTD_SCALE_SC <![CDATA[<]]> ET_EFACT_SCALE.ST_VAL THEN ET_EFACT_SCALE.ST_VAL
                                                                        WHEN EVTR_EFACT_RES.SLCTD_SCALE_SC &gt; ET_EFACT_SCALE.STP_VAL THEN ET_EFACT_SCALE.STP_VAL
                                                                        ELSE EVTR_EFACT_RES.SLCTD_SCALE_SC END)
                                                            ELSE EVTR_EFACT_RES.SLCTD_SCALE_SC
                                                        END
                                                     ) AS USR_SLCTD_SC
                                                , CASE WHEN EFACT.ADD_CND_CCD = 'NA' THEN 'Y' ELSE 'N' END AS EVALFACT_TYP_GEN_YN
                                             FROM EVAL_SUBJ_RES ESUBJ_RES
                                            INNER JOIN EVAL_SUBJ_EVALTR_RES EVALTR_RES
                                               ON EVALTR_RES.TEN_ID = ESUBJ_RES.TEN_ID
                                              AND EVALTR_RES.EVAL_SUBJ_RES_UUID= ESUBJ_RES.EVAL_SUBJ_RES_UUID
                                            INNER JOIN EVALTR_EVALFACT_RES EVTR_EFACT_RES
                                               ON EVTR_EFACT_RES.TEN_ID = EVALTR_RES.TEN_ID
                                              AND EVTR_EFACT_RES.EVAL_SUBJ_EVALTR_RES_UUID = EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID
                                            INNER JOIN EVALFACT EFACT
                                               ON EVTR_EFACT_RES.TEN_ID = EFACT.TEN_ID
                                              AND EVTR_EFACT_RES.EVALFACT_UUID = EFACT.EVALFACT_UUID
                                            INNER JOIN EVALTMPL_EVALFACT ET_EFACT
                                               ON EVTR_EFACT_RES.TEN_ID = ET_EFACT.TEN_ID
                                              AND EVTR_EFACT_RES.EVALFACT_UUID = ET_EFACT.EVALFACT_UUID
                                              AND ESUBJ_RES.EVALTMPL_UUID = ET_EFACT.EVALTMPL_UUID
                                              AND EVTR_EFACT_RES.EVALFACT_UUID = ET_EFACT.EVALFACT_UUID
                                             LEFT OUTER JOIN EVALTMPL_EVALFACT_SCALE ET_EFACT_SCALE
                                               ON ET_EFACT.TEN_ID = ET_EFACT_SCALE.TEN_ID
                                              AND ET_EFACT.EVALTMPL_EVALFACT_UUID = ET_EFACT_SCALE.EVALTMPL_EVALFACT_UUID
                                              AND EFACT.ADD_CND_CCD != 'NA'
                                              AND EFACT.EVALFACT_TYP_CCD = 'QUALI_SC_INP'   /* [R001] 정성 직접 입력 */
                                            WHERE ESUBJ_RES.TEN_ID =  #{p.ten_id}
                                            <choose>
                                                <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
                                                    AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                                                </when>
                                                <when test="p.req_type != null and p.req_type eq 'EVALTR'.toString()">
                                                    AND EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID = #{p.eval_subj_evaltr_res_uuid}
                                                </when>
                                                <otherwise>
                                                    AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
                                                </otherwise>
                                            </choose>
                                            GROUP BY EVTR_EFACT_RES.TEN_ID, EVTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID , EVTR_EFACT_RES.EVAL_SUBJ_EVALTR_RES_UUID, CASE WHEN EFACT.ADD_CND_CCD = 'NA' THEN 'Y' ELSE 'N' END
                             ) EVTR_EFACT_RES
                            ON EFACT_RES.TEN_ID = EVTR_EFACT_RES.TEN_ID
                           AND EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID = EVTR_EFACT_RES.EVAL_SUBJ_EVALFACT_RES_UUID
                           AND EVALTR_RES.TEN_ID = EVTR_EFACT_RES.TEN_ID
                           AND EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID = EVTR_EFACT_RES.EVAL_SUBJ_EVALTR_RES_UUID
                         WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
                         <choose>
                             <when test="p.req_type != null and p.req_type eq 'ALL'.toString()">
                                 AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
                             </when>
                             <when test="p.req_type != null and p.req_type eq 'EVALTR'.toString()">
                                 AND EVALTR_RES.EVAL_SUBJ_EVALTR_RES_UUID = #{p.eval_subj_evaltr_res_uuid}
                             </when>
                             <otherwise>
                                 AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
                             </otherwise>
                         </choose>
                        ) EFACT_RES_SC
                     GROUP BY EFACT_RES_SC.TEN_ID, EFACT_RES_SC.EVAL_REQ_UUID, EFACT_RES_SC.EVAL_SUBJ_EVALFACT_RES_UUID, EFACT_RES_SC.EVAL_SUBJ_RES_UUID
                            , EFACT_RES_SC.EFACTG_UUID, EFACT_RES_SC.EVAL_SUBJ_EVALTR_RES_UUID
                            , EFACT_RES_SC.EFACTG_WGT
                  ) EFACTG_RES_SC
           GROUP BY EFACTG_RES_SC.TEN_ID, EFACTG_RES_SC.EVAL_REQ_UUID, EFACTG_RES_SC.EVAL_SUBJ_EVALTR_RES_UUID
         ) TARG
       ON (    SRC.TEN_ID = TARG.TEN_ID
           AND SRC.EVAL_SUBJ_EVALTR_RES_UUID = TARG.EVAL_SUBJ_EVALTR_RES_UUID
           AND SRC.EVAL_PRGS_STS_CCD != 'WTG'    /* [R401] 작성전이 아닌 경우 */
          )
     WHEN MATCHED THEN
         UPDATE
            SET EVALTR_SC = TARG.EVALTR_SC
              , MODR_ID  = #{g.username}
              , MOD_DTTM = #{g.now} </update>
    <select id="findListEvalSubjCalcfactRes" resultType="map">
    /* eval-subj-evalfact-res.findListEvalSubjCalcfactRes : 평가요청 평가대상의 계산항목 목록을 조회한다. */
    SELECT ESUBJ_RES.TEN_ID
         , ESUBJ_RES.EVAL_REQ_UUID
         , CFACT_RES.EVAL_SUBJ_CALCFACT_RES_UUID
         , CFACT_RES.EVAL_SUBJ_RES_UUID
         , CFACT_RES.CALCFACT_UUID
         , CFACT_RES.CALCFACT_VAL
         , CFACT_RES.NULLV_YN
         , CFACT_RES.RMK
         , CFACT_RES.STS
         , CFACT_RES.REGR_ID
         , CFACT_RES.REG_DTTM
         , CFACT_RES.MODR_ID
         , CFACT_RES.MOD_DTTM
      FROM EVAL_SUBJ_RES ESUBJ_RES
     INNER JOIN EVAL_SUBJ_CALCFACT_RES CFACT_RES
        ON ESUBJ_RES.TEN_ID = CFACT_RES.TEN_ID
       AND ESUBJ_RES.EVAL_SUBJ_RES_UUID = CFACT_RES.EVAL_SUBJ_RES_UUID
       AND CFACT_RES.STS != 'D'
     WHERE ESUBJ_RES.TEN_ID = #{p.ten_id}
       AND ESUBJ_RES.EVAL_REQ_UUID = #{p.eval_req_uuid}
    </select>
    <update id="updateEvalSubjCalcfactByAdj">
    /* eval-subj-evalfact-res.updateEvalSubjCalcfactByAdj : 퍼포먼스 평가대상 계산항목 조정정보를 저장한다. */
    UPDATE EVAL_SUBJ_CALCFACT_RES
       SET CALCFACT_VAL       = #{p.calcfact_val}
         , CALC_REQD_YN       = 'Y'
         , NULLV_YN           = 'N'
         , STS = 'U'
         , MODR_ID = #{g.username}
         , MOD_DTTM = #{g.now}
     WHERE TEN_ID = #{p.ten_id}
       AND EVAL_SUBJ_CALCFACT_RES_UUID = #{p.eval_subj_calcfact_res_uuid}
    </update>
</mapper>
