<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="unit-price">
	<select id="findListUnitPrice" resultType="map">
		/* unit-price.findListUnitPrice: 단가정보 */
		SELECT TEN_ID
		     , OORG_CD
		     , ITEM_CD
		     , VD_CD
		     , UPRC_EFCT_ST_DT
		     , UPRC_EFCT_EXP_DT
		     , PURC_GRP_CD
		     , PURC_TYP_CCD
		     , PLT_CD
		     , ITEM_OORG_CD
		     , UPRCCNTR_DT
		     , ITEM_NM
		     , ITEM_NM_EN
		     , ITEM_SPEC
		     , PYMTMETH_CCD
		     , PYMTMETH_EXPLN
		     , DLVYMETH_CCD
		     , DLVYMETH_EXPLN
		     , UOM_CCD
		     , CUR_CCD
		     , CASE WHEN UPRCCNTR_QTY IS NULL THEN 0
		            ELSE UPRCCNTR_QTY
		        END AS UPRCCNTR_QTY
		     , CASE WHEN UPRCCNTR_UPRC IS NULL THEN 0
		            ELSE UPRCCNTR_UPRC
		        END AS UPRCCNTR_UPRC
		     , CASE WHEN ALOC_RO IS NULL THEN 0
		            ELSE ALOC_RO
		        END AS ALOC_RO
		     , CNTR_UUID
		     , CNTR_NO
		     , CNTR_REVNO
		     , PURC_CNTR_UUID
		     , PURC_CNTR_INFO_UUID
		     , PURC_CNTR_ITEM_UUID
		     , PURC_CNTR_ITEM_LNO
		     , RFX_ITEM_UUID
		     , RFX_NO
		     , RFX_RND
		     , RFX_ITEM_LNO
		     , RFX_BID_ITEM_UUID
		     , RFX_BID_NO
		     , RFX_BID_REVNO
		     , RFX_BID_LNO
		     , RMK
		     , STS
		     , REGR_ID
		     , REG_DTTM
		     , MODR_ID
		     , MOD_DTTM
		  FROM ITEM_UPRC_HISTREC
		 WHERE TEN_ID      = #{g.tenant}
		   AND OORG_CD = #{p.oorg_cd}
		   <if test="p.vd_cd != null and p.vd_cd != &quot;&quot;">
		       AND VD_CD       = #{p.vd_cd}
		   </if>
		   <if test="p.item_cd != null and p.item_cd != &quot;&quot;">
		       AND ITEM_CD     = #{p.item_cd}
		   </if>
		   <if test="p.compare_apply_sd != null and p.compare_apply_sd != &quot;&quot;">
		       AND UPRC_EFCT_EXP_DT   &gt;= #{p.compare_apply_sd}
		   </if>
		   AND STS        != 'D'
	</select>
	<delete id="deleteUnitPrice">
		/* unit-price.deleteUnitPrice: 단가 삭제 */
		DELETE
		  FROM ITEM_UPRC_HISTREC
		 WHERE TEN_ID          = #{g.tenant}
		   AND OORG_CD         = #{p.oorg_cd}
		   AND ITEM_CD         = #{p.item_cd}
		   AND VD_CD           = #{p.vd_cd}
		   AND UPRC_EFCT_ST_DT = #{p.uprc_efct_st_dt}
	</delete>
	<update id="updateUnitPriceTerms">
		/* unit-price.updateUnitPriceTerms: 단가기간 수정 */
		UPDATE ITEM_UPRC_HISTREC
		   SET STS = 'U'
		     , MOD_DTTM = #{g.now}
		     , MODR_ID = #{g.username}
		     , UPRC_EFCT_EXP_DT = #{p.uprc_efct_exp_dt}
		 WHERE TEN_ID          = #{g.tenant}
		   AND OORG_CD         = #{p.oorg_cd}
		   AND ITEM_CD         = #{p.item_cd}
		   AND VD_CD           = #{p.vd_cd}
		   AND UPRC_EFCT_ST_DT = #{p.uprc_efct_st_dt}
	</update>
	<update id="updateUnitPriceLastN">
		/* unit-price.updateUnitPriceLastN: 최종단가 N 처리 */
		UPDATE ITEM_UPRC_HISTREC
		   SET FNL_UPRC_YN = 'N'
		 WHERE TEN_ID      = #{g.tenant}
		   AND OORG_CD     = #{p.oorg_cd}
		   AND ITEM_CD     = #{p.item_cd}
		   AND VD_CD       = #{p.vd_cd}
		   AND FNL_UPRC_YN = 'Y'
	</update>
	<insert id="insertUnitPrice">
		/* unit-price.insertUnitPrice: 단가 등록 */
		INSERT INTO ITEM_UPRC_HISTREC (
			TEN_ID
			, OORG_CD
			, ITEM_CD
			, VD_CD
			, UPRC_EFCT_ST_DT
			, UPRC_EFCT_EXP_DT
			, PURC_GRP_CD
			, PURC_TYP_CCD
			, PLT_CD
			, ITEM_OORG_CD
			, UPRCCNTR_DT
			, ITEM_NM
			, ITEM_NM_EN
			, SG_CD
			, ITEM_SPEC
			, PYMTMETH_CCD
			, PYMTMETH_EXPLN
			, DLVYMETH_CCD
			, DLVYMETH_EXPLN
			, UOM_CCD
			, UPRCCNTR_QTY
			, CUR_CCD
			, UPRCCNTR_UPRC
			, ALOC_RO
			, CNTR_UUID
			, CNTR_NO
			, CNTR_REVNO
			, PURC_CNTR_UUID
			, PURC_CNTR_INFO_UUID
			, PURC_CNTR_ITEM_UUID
			, PURC_CNTR_ITEM_LNO
			, RFX_ITEM_UUID
			, RFX_NO
			, RFX_RND
			, RFX_ITEM_LNO
			, RFX_BID_ITEM_UUID
			, RFX_BID_NO
			, RFX_BID_REVNO
			, RFX_BID_LNO
			, FNL_UPRC_YN
			, MOQ
			, CTQ
			, RMK
			, STS
			, REGR_ID
			, REG_DTTM
			, MODR_ID
			, MOD_DTTM
		)
		VALUES (
			#{g.tenant}
			, #{p.oorg_cd}
			, #{p.item_cd}
			, #{p.vd_cd}
			, #{p.uprc_efct_st_dt}
			, #{p.uprc_efct_exp_dt}
			, #{p.purc_grp_cd}
			, #{p.purc_typ_ccd}
			, #{p.plt_cd}
			, #{p.item_oorg_cd}
			, #{p.uprccntr_dt}
			, #{p.item_nm}
			, #{p.item_nm_en}
			, #{p.sg_cd}
			, #{p.item_spec}
			, #{p.pymtmeth_ccd}
			, #{p.pymtmeth_expln}
			, #{p.dlvymeth_ccd}
			, #{p.dlvymeth_expln}
			, #{p.uom_ccd}
			, CAST(#{p.uprccntr_qty} AS FLOAT  )
			, #{p.cur_ccd}
			, CAST(#{p.uprccntr_uprc} AS FLOAT  )
			, CAST(#{p.aloc_ro} AS FLOAT  )
			, #{p.cntr_uuid}
			, #{p.cntr_no}
			, #{p.cntr_revno}
			, #{p.purc_cntr_uuid}
			, #{p.purc_cntr_info_uuid}
			, #{p.purc_cntr_item_uuid}
			, #{p.item_lno}
			, #{p.rfx_item_uuid}
			, #{p.rfx_no}
			, CAST(#{p.rfx_rnd} AS INT)
			, TO_CHAR(#{p.rfx_item_lno})  , #{p.rfx_bid_item_uuid}
			, #{p.rfx_bid_no}
			, CAST(#{p.rfx_bid_revno} AS INT)
			, TO_CHAR(#{p.rfx_bid_lno})  , 'Y'  /* 최종단가여부 */
			, CAST(#{p.moq} AS FLOAT  )
			, CAST(#{p.ctq} AS FLOAT  )
			, #{p.rmk}
			, 'C'
			, #{g.username}
			, #{g.now}
			, #{g.username}
			, #{g.now}
		)
	</insert>
	<select id="findListUnitPriceHistrec" resultType="map">
		SELECT ITEM_UPRC_HISTREC.OORG_CD
		     , ITEM_UPRC_HISTREC.CNTR_NO
		     , ITEM_UPRC_HISTREC.CNTR_REVNO
		     , ITEM_UPRC_HISTREC.ITEM_CD
		     , CASE WHEN #{g.locale} = 'en_US' THEN ITEM_UPRC_HISTREC.ITEM_NM_EN
		            ELSE ITEM_UPRC_HISTREC.ITEM_NM
		        END AS DISP_ITEM_NM
		     , VD.VD_CD
		     , CASE WHEN #{g.locale} = 'en_US' THEN VD.VD_NM_EN
		            ELSE VD.VD_NM
		        END AS DISP_VD_NM
		     , ITEM_UPRC_HISTREC.UOM_CCD
		     , ITEM_UPRC_HISTREC.CUR_CCD
		     , ITEM_UPRC_HISTREC.UPRCCNTR_UPRC
		     , ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT
		     , ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT
		     , ITEM_UPRC_HISTREC.UPRCCNTR_DT
		     , COUNT(PO_ITEM.PO_UUID) AS PO_CNT
		     , CASE WHEN SUM(PO_ITEM.PO_AMT) IS NULL THEN 0
		            ELSE SUM(PO_ITEM.PO_AMT)
		        END AS PO_TOT_AMT
		     , AVG(TO_DATE(GR_ITEM.GR_DT, 'YYYYMMDD') - TO_DATE(PO.PO_CRN_DT, 'YYYYMMDD') + 1  ) AS AVG_PO_LTM
		     <if test="g.existModule(&quot;price-doctor&quot;)">
		         , PURC_UPRC_ST_FCST.SCN_CCD
		         , PURC_UPRC_ST_FCST.FCST_TMPT
		         , CASE WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NOT NULL THEN  GETEXCHAMOUNT(PURC_UPRC_ST_FCST.TEN_ID, PURC_UPRC_ST_FCST.FCST_UPRC, PURC_UPRC_ST_FCST.CUR_CCD, ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT)
		            END AS EXCH_FCST_UPRC
		         , CASE WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NOT NULL AND ITEM_UPRC_HISTREC.UPRCCNTR_UPRC IS NOT NULL THEN ROUND((  GETEXCHAMOUNT(PURC_UPRC_ST_FCST.TEN_ID, PURC_UPRC_ST_FCST.FCST_UPRC, PURC_UPRC_ST_FCST.CUR_CCD, ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT) - ITEM_UPRC_HISTREC.UPRCCNTR_UPRC) / ITEM_UPRC_HISTREC.UPRCCNTR_UPRC * 100, 2)
		            END AS FCST_UPRC_RATE
		         , CASE WHEN ITEM_UPRC.MKTPRC IS NOT NULL THEN  GETEXCHAMOUNT(ITEM_UPRC_HISTREC.TEN_ID, ITEM_UPRC.MKTPRC, 'KRW', ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT)
		            END AS EXCH_MKTPRC
		         , CASE WHEN ITEM_UPRC.MKTPRC IS NOT NULL AND ITEM_UPRC_HISTREC.UPRCCNTR_UPRC IS NOT NULL THEN ROUND((  GETEXCHAMOUNT(ITEM_UPRC_HISTREC.TEN_ID, ITEM_UPRC.MKTPRC, 'KRW', ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT) - ITEM_UPRC_HISTREC.UPRCCNTR_UPRC) / ITEM_UPRC_HISTREC.UPRCCNTR_UPRC * 100, 2)
		            END AS MKTPRC_RATE
		         , ITEM_UPRC.PUBL_YR
		         , ITEM_UPRC.PUBL_MN
		     </if>
		  FROM ITEM_UPRC_HISTREC
		 INNER JOIN (
		             SELECT ITEM_UPRC_HISTREC.ITEM_CD
		                  , MAX(ITEM_UPRC_HISTREC.REG_DTTM) AS MAX_REG_DTTM
		               FROM ITEM_UPRC_HISTREC
		              INNER JOIN VD
		                 ON VD.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		                AND VD.VD_CD = ITEM_UPRC_HISTREC.VD_CD
		              WHERE ITEM_UPRC_HISTREC.TEN_ID = #{g.tenant}
		                AND ITEM_UPRC_HISTREC.STS != 'D'
		                AND ITEM_UPRC_HISTREC.OORG_CD IN
		                <foreach close=")" collection="p.oorg_cds" item="oorg_cd" open="(" separator=",">
		                    #{oorg_cd}
		                </foreach>
		                <if test="p.purc_typ_ccd != null">
		                    AND ITEM_UPRC_HISTREC.PURC_TYP_CCD = #{p.purc_typ_ccd}
		                </if>
		                <if test="p.from_uprc_efct_dt != null and p.to_uprc_efct_dt != null">
		                    AND ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT &gt;= #{p.from_uprc_efct_dt}
		                    AND ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT <![CDATA[<]]> #{p.to_uprc_efct_dt}
		                </if>
		                <choose>
		                    <when test="p.vd_nms != null and p.vd_nms.size() &gt; 0">
		                        AND (
		                        <foreach collection="p.vd_nms" item="vd_nm" separator=" OR ">
		                            <bind name="vdNmPtn" value="'%' + vd_nm + '%'"/>
		                            UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn})
		                        </foreach>
		                        )
		                    </when>
		                    <when test="p.vd_nm != null">
		                        <bind name="vdNmPtn" value="'%' + p.vd_nm + '%'"/>
		                        AND (UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn}))
		                    </when>
		                </choose>
		                <if test="p.item_cd != null and p.item_cd != ''">
		                    <bind name="itemCdPtn" value="'%' + p.item_cd + '%'"/>
		                    AND UPPER(ITEM_UPRC_HISTREC.ITEM_CD) LIKE UPPER(#{itemCdPtn})
		                </if>
		                <if test="p.item_nm != null and p.item_nm != ''">
		                    <bind name="itemNmPtn" value="'%' + p.item_nm + '%'"/>
		                    AND (UPPER(ITEM_UPRC_HISTREC.ITEM_NM) LIKE UPPER(#{itemNmPtn}) OR UPPER(ITEM_UPRC_HISTREC.ITEM_NM_EN) LIKE UPPER(#{itemNmPtn}))
		                </if>
		              GROUP BY ITEM_UPRC_HISTREC.ITEM_CD
		            ) ITEM_SORT
		    ON ITEM_SORT.ITEM_CD = ITEM_UPRC_HISTREC.ITEM_CD
		 INNER JOIN VD
		    ON VD.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND VD.VD_CD = ITEM_UPRC_HISTREC.VD_CD
		  LEFT OUTER JOIN PO_ITEM
		    ON PO_ITEM.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND PO_ITEM.PURC_CNTR_ITEM_UUID = ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID
		   AND PO_ITEM.PO_CMPLD_YN = 'Y'
		  LEFT OUTER JOIN PO
		    ON PO.TEN_ID = PO_ITEM.TEN_ID
		   AND PO.PO_UUID = PO_ITEM.PO_UUID
		  LEFT OUTER JOIN GR_ITEM
		    ON GR_ITEM.TEN_ID = PO_ITEM.TEN_ID
		   AND GR_ITEM.PO_ITEM_UUID = PO_ITEM.PO_ITEM_UUID
		  <if test="g.existModule(&quot;price-doctor&quot;)">
		      LEFT OUTER JOIN PURC_UPRC_ST_FCST /* 구매 단가 예측 테이블 */
		        ON PURC_UPRC_ST_FCST.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		       AND PURC_UPRC_ST_FCST.FCST_SUBJ_CD = ITEM_UPRC_HISTREC.ITEM_CD
		       AND PURC_UPRC_ST_FCST.FCST_TMPT = CONCAT(
			                                       TO_CHAR(CAST(ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT AS TIMESTAMP), 'YYYYMM')  , '01')
		       AND PURC_UPRC_ST_FCST.STS != 'D'
		      LEFT OUTER JOIN ITEM_UPRC
		        ON ITEM_UPRC.ITEM_CD = ITEM_UPRC_HISTREC.ITEM_CD
		       AND ITEM_UPRC.PUBL_YR = TO_CHAR(CAST(ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT AS TIMESTAMP), 'YYYY')  AND ITEM_UPRC.PUBL_MN = TO_CHAR(CAST(ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT AS TIMESTAMP), 'MM') </if>
		 WHERE ITEM_UPRC_HISTREC.TEN_ID = #{g.tenant}
		   AND ITEM_UPRC_HISTREC.STS != 'D'
		   AND ITEM_UPRC_HISTREC.OORG_CD IN
		   <foreach close=")" collection="p.oorg_cds" item="oorg_cd" open="(" separator=",">
		       #{oorg_cd}
		   </foreach>
		   <if test="p.purc_typ_ccd != null">
		       AND ITEM_UPRC_HISTREC.PURC_TYP_CCD = #{p.purc_typ_ccd}
		   </if>
		   <if test="p.from_uprc_efct_dt != null and p.to_uprc_efct_dt != null">
		       AND ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT &gt;= #{p.from_uprc_efct_dt}
		       AND ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT <![CDATA[<]]> #{p.to_uprc_efct_dt}
		   </if>
		   <choose>
		       <when test="p.vd_nms != null and p.vd_nms.size() &gt; 0">
		           AND (
		           <foreach collection="p.vd_nms" item="vd_nm" separator=" OR ">
		               <bind name="vdNmPtn" value="'%' + vd_nm + '%'"/>
		               UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn})
		           </foreach>
		           )
		       </when>
		       <when test="p.vd_nm != null">
		           <bind name="vdNmPtn" value="'%' + p.vd_nm + '%'"/>
		           AND (UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn}))
		       </when>
		   </choose>
		   <if test="p.item_cd != null and p.item_cd != ''">
		       <bind name="itemCdPtn" value="'%' + p.item_cd + '%'"/>
		       AND UPPER(ITEM_UPRC_HISTREC.ITEM_CD) LIKE UPPER(#{itemCdPtn})
		   </if>
		   <if test="p.item_nm != null and p.item_nm != ''">
		       <bind name="itemNmPtn" value="'%' + p.item_nm + '%'"/>
		       AND (UPPER(ITEM_UPRC_HISTREC.ITEM_NM) LIKE UPPER(#{itemNmPtn}) OR UPPER(ITEM_UPRC_HISTREC.ITEM_NM_EN) LIKE UPPER(#{itemNmPtn}))
		   </if>
		 GROUP BY ITEM_UPRC_HISTREC.TEN_ID
		        , ITEM_UPRC_HISTREC.OORG_CD
		        , ITEM_UPRC_HISTREC.CNTR_NO
		        , ITEM_UPRC_HISTREC.CNTR_REVNO
		        , ITEM_UPRC_HISTREC.ITEM_CD
		        , ITEM_UPRC_HISTREC.ITEM_NM_EN
		        , ITEM_UPRC_HISTREC.ITEM_NM
		        , VD.VD_CD
		        , VD.VD_NM_EN
		        , VD.VD_NM
		        , ITEM_UPRC_HISTREC.UOM_CCD
		        , ITEM_UPRC_HISTREC.CUR_CCD
		        , ITEM_UPRC_HISTREC.UPRCCNTR_UPRC
		        , ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT
		        , ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT
		        , ITEM_UPRC_HISTREC.UPRCCNTR_DT
		        , ITEM_SORT.MAX_REG_DTTM
		        <if test="g.existModule(&quot;price-doctor&quot;)">
		            , PURC_UPRC_ST_FCST.TEN_ID
		            , PURC_UPRC_ST_FCST.SCN_CCD
		            , PURC_UPRC_ST_FCST.FCST_TMPT
		            , PURC_UPRC_ST_FCST.FCST_UPRC
		            , PURC_UPRC_ST_FCST.CUR_CCD
		            , ITEM_UPRC.MKTPRC
		            , ITEM_UPRC.PUBL_YR
		            , ITEM_UPRC.PUBL_MN
		        </if>
		 ORDER BY ITEM_SORT.MAX_REG_DTTM DESC
		        , ITEM_UPRC_HISTREC.ITEM_CD
		        , VD.VD_CD
		        , ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT
	</select>
	<select id="findListUnitPriceHistrecSummary" resultType="map">
		SELECT COUNT(DISTINCT ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID) AS CNT
		     , SUM(CASE WHEN PO_ITEM.PO_AMT IS NOT NULL THEN  GETEXCHAMOUNT(PO_ITEM.TEN_ID, PO_ITEM.PO_AMT, PO_ITEM.CUR_CCD, #{p.bas_cur}, PO.PO_CRN_DT)
		                    ELSE 0
		            END) AS PO_AMOUNT
		     , SUM(CASE WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NOT NULL THEN 1
		                ELSE 0
		            END) AS TOT_AI_CNT
		     , SUM(CASE WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NOT NULL THEN
		                CASE WHEN ITEM_UPRC_HISTREC.UPRCCNTR_UPRC <![CDATA[<]]> GETEXCHAMOUNT(PURC_UPRC_ST_FCST.TEN_ID, PURC_UPRC_ST_FCST.FCST_UPRC, PURC_UPRC_ST_FCST.CUR_CCD, ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT) THEN 1
		                     ELSE 0
		                 END
		                WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NULL THEN 0
		            END) AS LOWER_AI_CNT
		     , SUM(CASE WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NOT NULL THEN
		                CASE WHEN ITEM_UPRC_HISTREC.UPRCCNTR_UPRC &gt;  GETEXCHAMOUNT(PURC_UPRC_ST_FCST.TEN_ID, PURC_UPRC_ST_FCST.FCST_UPRC, PURC_UPRC_ST_FCST.CUR_CCD, ITEM_UPRC_HISTREC.CUR_CCD, ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT) THEN 1
		                     ELSE 0
		                 END
		                WHEN PURC_UPRC_ST_FCST.FCST_UPRC IS NULL THEN 0
		            END) AS HIGHER_AI_CNT
		  FROM ITEM_UPRC_HISTREC
		 INNER JOIN VD
		    ON VD.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND VD.VD_CD = ITEM_UPRC_HISTREC.VD_CD
		  LEFT OUTER JOIN PO_ITEM
		    ON PO_ITEM.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND PO_ITEM.PURC_CNTR_ITEM_UUID = ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID
		   AND PO_ITEM.PO_CMPLD_YN = 'Y'
		  LEFT OUTER JOIN PO
		    ON PO.TEN_ID = PO_ITEM.TEN_ID
		   AND PO.PO_UUID = PO_ITEM.PO_UUID
		   <if test="g.existModule(&quot;price-doctor&quot;)">
		       LEFT OUTER JOIN PURC_UPRC_ST_FCST /* 구매 단가 예측 테이블 */
		       ON PURC_UPRC_ST_FCST.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		       AND PURC_UPRC_ST_FCST.FCST_SUBJ_CD = ITEM_UPRC_HISTREC.ITEM_CD
		       AND PURC_UPRC_ST_FCST.FCST_TMPT = CONCAT(
			                                       TO_CHAR(CAST(ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT AS TIMESTAMP), 'YYYYMM')  , '01')
		       AND PURC_UPRC_ST_FCST.STS != 'D'
		   </if>
		 WHERE ITEM_UPRC_HISTREC.TEN_ID = #{g.tenant}
		   AND ITEM_UPRC_HISTREC.STS != 'D'
		   AND ITEM_UPRC_HISTREC.OORG_CD IN
		   <foreach close=")" collection="p.oorg_cds" item="oorg_cd" open="(" separator=",">
		       #{oorg_cd}
		   </foreach>
		   <if test="p.purc_typ_ccd != null">
		       AND ITEM_UPRC_HISTREC.PURC_TYP_CCD = #{p.purc_typ_ccd}
		   </if>
		   <if test="p.from_uprc_efct_dt != null and p.to_uprc_efct_dt != null">
		       AND ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT &gt;= #{p.from_uprc_efct_dt}
		       AND ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT <![CDATA[<]]> #{p.to_uprc_efct_dt}
		   </if>
		   <choose>
		       <when test="p.vd_nms != null and p.vd_nms.size() &gt; 0">
		           AND (
		           <foreach collection="p.vd_nms" item="vd_nm" separator=" OR ">
		               <bind name="vdNmPtn" value="'%' + vd_nm + '%'"/>
		               UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn})
		           </foreach>
		           )
		       </when>
		       <when test="p.vd_nm != null">
		           <bind name="vdNmPtn" value="'%' + p.vd_nm + '%'"/>
		           AND (UPPER(VD.VD_NM) LIKE UPPER(#{vdNmPtn}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vdNmPtn}))
		       </when>
		   </choose>
		   <if test="p.item_cd != null and p.item_cd != ''">
		       <bind name="itemCdPtn" value="'%' + p.item_cd + '%'"/>
		       AND UPPER(ITEM_UPRC_HISTREC.ITEM_CD) LIKE UPPER(#{itemCdPtn})
		   </if>
		   <if test="p.item_nm != null and p.item_nm != ''">
		       <bind name="itemNmPtn" value="'%' + p.item_nm + '%'"/>
		       AND (UPPER(ITEM_UPRC_HISTREC.ITEM_NM) LIKE UPPER(#{itemNmPtn}) OR UPPER(ITEM_UPRC_HISTREC.ITEM_NM_EN) LIKE UPPER(#{itemNmPtn}))
		   </if>
	</select>
	<select id="findListVendorRcmdItemUprccntr" resultType="string">
		/* 동일 ITEM 단가계약 체결 업체 */
		SELECT ITEM_UPRC_HISTREC.VD_CD
		  FROM ITEM_UPRC_HISTREC ITEM_UPRC_HISTREC
		 WHERE ITEM_UPRC_HISTREC.TEN_ID  = #{g.tenant}
		   AND ITEM_UPRC_HISTREC.OORG_CD = #{p.oorg_cd}
		   AND ITEM_UPRC_HISTREC.PURC_TYP_CCD = #{p.purc_typ_ccd}
		   <choose>
		       <when test="p.item_cds != null and p.item_cds.size() &gt; 0">
		           AND ITEM_UPRC_HISTREC.ITEM_CD IN
		           <foreach close=")" collection="p.item_cds" item="itemCd" open="(" separator=",">
		               #{itemCd}
		           </foreach>
		       </when>
		       <otherwise>
		           AND 1 = 0
		       </otherwise>
		   </choose>
	</select>
	<select id="findListVendorRcmdSgUprccntr" resultType="string">
		/* 동일 SG 단가계약 체결 업체 */
		SELECT ITEM_UPRC_HISTREC.VD_CD
		  FROM ITEM_UPRC_HISTREC ITEM_UPRC_HISTREC
		 WHERE ITEM_UPRC_HISTREC.TEN_ID  = #{g.tenant}
		   AND ITEM_UPRC_HISTREC.OORG_CD = #{p.oorg_cd}
		   AND ITEM_UPRC_HISTREC.PURC_TYP_CCD = #{p.purc_typ_ccd}
		   <choose>
		       <when test="p.sg_cds != null and p.sg_cds.size() &gt; 0">
		           AND ITEM_UPRC_HISTREC.SG_CD IN
		           <foreach close=")" collection="p.sg_cds" item="sgCd" open="(" separator=",">
		               #{sgCd}
		           </foreach>
		       </when>
		       <otherwise>
		           AND 1 = 0
		       </otherwise>
		   </choose>
	</select>
	<select id="findListBpaYnAndMutlVdYnByItemCd" resultType="map">
		/* unit-price.findListBpaYnAndMutlVdYnByItemCd */
		<bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
		SELECT ITEM_OORG.OORG_CD
		     , CASE WHEN COUNT(ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID) &gt; 0 THEN 'Y'
		            ELSE 'N'
		        END AS BPA_YN
		     , CASE WHEN COUNT(ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID) &gt; 1 THEN 'Y'
		            ELSE 'N'
		        END AS MULT_VD_YN
			, CASE WHEN SUM(CASE WHEN QTA_ITEM_HISTREC.QTARATE IS NULL THEN 0 ELSE QTA_ITEM_HISTREC.QTARATE END) = 100 THEN 'Y'
					ELSE 'N'
				END AS QTA_SUBJ_YN
		FROM ITEM_OORG
		  LEFT OUTER JOIN ITEM_UPRC_HISTREC /* 단가정보 */
		    ON ITEM_UPRC_HISTREC.TEN_ID = ITEM_OORG.TEN_ID
		   AND ITEM_UPRC_HISTREC.ITEM_OORG_CD = ITEM_OORG.OORG_CD
		   AND ITEM_UPRC_HISTREC.ITEM_CD = ITEM_OORG.ITEM_CD
		   AND ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT  <![CDATA[<=]]> #{nowDate}
		   AND ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT <![CDATA[>=]]> #{nowDate}
		   AND ITEM_UPRC_HISTREC.STS != 'D'
		  LEFT OUTER JOIN QTA_ITEM_HISTREC
			ON QTA_ITEM_HISTREC.TEN_ID = ITEM_OORG.TEN_ID
		   AND QTA_ITEM_HISTREC.PURC_CNTR_ITEM_UUID = ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID
		   AND QTA_ITEM_HISTREC.APPL_ST_DT  <![CDATA[<=]]> #{nowDate}
		   AND QTA_ITEM_HISTREC.APPL_EXP_DT <![CDATA[>=]]> #{nowDate}
		   AND QTA_ITEM_HISTREC.STS != 'D'
		 WHERE ITEM_OORG.TEN_ID = #{g.tenant}
		   AND ITEM_OORG.ITEM_CD = #{p.item_cd}
		 GROUP BY ITEM_OORG.TEN_ID
		        , ITEM_OORG.OORG_CD
		        , ITEM_OORG.ITEM_CD
	</select>
	<select id="findListUnitPriceByItemAndOorg" resultType="map">
		<bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
		SELECT CNTR_UUID
		     , CNTR_NO
		     , CNTR_REVNO
		     , PURC_CNTR_UUID
		     , PURC_CNTR_INFO_UUID
		     , PURC_CNTR_ITEM_UUID
		     , PURC_CNTR_ITEM_LNO
		     , CASE WHEN MOQ IS NULL THEN 1 ELSE MOQ END AS MOQ
		     , CASE WHEN CTQ IS NULL THEN 1 ELSE CTQ END AS CTQ
		  FROM ITEM_UPRC_HISTREC
		 WHERE TEN_ID = #{g.tenant}
		   AND ITEM_CD = #{p.item_cd}
		   AND OORG_CD = #{p.oorg_cd}
		   AND ITEM_OORG_CD = #{p.item_oorg_cd}
		   AND UPRC_EFCT_ST_DT  <![CDATA[<=]]> #{nowDate}
		   AND UPRC_EFCT_EXP_DT <![CDATA[>=]]> #{nowDate}
		   AND STS != 'D'
	</select>
	<select id="findListUnitPriceQtaInfoByItemAndOorg" resultType="map">
		<bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
		SELECT ITEM_UPRC_HISTREC.CNTR_UUID
		     , ITEM_UPRC_HISTREC.CNTR_NO
		     , ITEM_UPRC_HISTREC.CNTR_REVNO
		     , ITEM_UPRC_HISTREC.PURC_CNTR_UUID
		     , ITEM_UPRC_HISTREC.PURC_CNTR_INFO_UUID
		     , ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID
		     , ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_LNO
		     , ITEM_UPRC_HISTREC.UPRCCNTR_UPRC
		     , ITEM_UPRC_HISTREC.UPRCCNTR_QTY
		     , ITEM_UPRC_HISTREC.UOM_CCD
		     , ITEM_UPRC_HISTREC.CUR_CCD
		     , ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT
		     , ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT
		     , VD.VD_CD
		     , CASE WHEN #{g.locale} = 'en_US' THEN VD.VD_NM_EN
		            ELSE VD.VD_NM
		        END AS DISP_VD_NM
		     , ITEM_UPRC_HISTREC.DLVY_LDTM
		     , QTA_ITEM_HISTREC.QTARATE
		     , CASE WHEN ITEM_UPRC_HISTREC.MOQ IS NULL THEN 1 ELSE ITEM_UPRC_HISTREC.MOQ END AS MOQ
		     , CASE WHEN ITEM_UPRC_HISTREC.CTQ IS NULL THEN 1 ELSE ITEM_UPRC_HISTREC.CTQ END AS CTQ
		     , QTA_ITEM_HISTREC.QTA_ITEM_UUID
		     , QTA_ITEM_HISTREC.QTA_NO
		  FROM ITEM_UPRC_HISTREC
		 INNER JOIN VD
		    ON VD.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND VD.VD_CD = ITEM_UPRC_HISTREC.VD_CD
		  LEFT OUTER JOIN QTA_ITEM_HISTREC
		    ON QTA_ITEM_HISTREC.TEN_ID = ITEM_UPRC_HISTREC.TEN_ID
		   AND QTA_ITEM_HISTREC.PURC_CNTR_ITEM_UUID = ITEM_UPRC_HISTREC.PURC_CNTR_ITEM_UUID
		   AND QTA_ITEM_HISTREC.APPL_ST_DT <![CDATA[<=]]> #{nowDate}
		   AND QTA_ITEM_HISTREC.APPL_EXP_DT <![CDATA[>=]]> #{nowDate}
		   AND QTA_ITEM_HISTREC.STS != 'D'
		 WHERE ITEM_UPRC_HISTREC.TEN_ID = #{g.tenant}
		   AND ITEM_UPRC_HISTREC.ITEM_CD = #{p.item_cd}
		   AND ITEM_UPRC_HISTREC.OORG_CD = #{p.oorg_cd}
		   AND ITEM_UPRC_HISTREC.ITEM_OORG_CD = #{p.item_oorg_cd}
		   AND ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT  <![CDATA[<=]]> #{nowDate}
		   AND ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT <![CDATA[>=]]> #{nowDate}
		   AND ITEM_UPRC_HISTREC.STS != 'D'
		 ORDER BY CASE WHEN QTA_ITEM_HISTREC.QTARATE IS NULL THEN 0
		               ELSE QTA_ITEM_HISTREC.QTARATE
		           END DESC, ITEM_UPRC_HISTREC.UPRCCNTR_UPRC
	</select>
	<select id="findMailSendTargetList" resultType="map">
		<bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
		/* unit-price.findMailSendTargetList : 계약 만료기간 메일 발송 대상 조회 */
		SELECT ITEM_UPRC_HISTREC.CNTR_NO
			  ,ITEM_UPRC_HISTREC.OORG_CD
			  ,ITEM_UPRC_HISTREC.ITEM_CD
			  ,CASE WHEN 'en_US' = #{g.locale} THEN ITEM_UPRC_HISTREC.ITEM_NM_EN ELSE ITEM_UPRC_HISTREC.ITEM_NM END AS ITEM_NM
			  ,CASE WHEN 'en_US' = #{g.locale} THEN VD.VD_NM_EN ELSE VD.VD_NM END AS VD_NM
			  ,ITEM_UPRC_HISTREC.UOM_CCD
			  ,ITEM_UPRC_HISTREC.CUR_CCD
			  ,ITEM_UPRC_HISTREC.UPRC_EFCT_ST_DT
			  ,ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT
			  ,CNTR.CNTR_PIC_ID
			  ,USR.USR_NM
			  ,USR.EML
			  ,#{p.getDate} AS GET_DATE
		  FROM ITEM_UPRC_HISTREC ITEM_UPRC_HISTREC
		  LEFT OUTER JOIN CNTR CNTR
			ON ITEM_UPRC_HISTREC.TEN_ID = CNTR.TEN_ID
		   AND ITEM_UPRC_HISTREC.CNTR_UUID = CNTR.CNTR_UUID
		   AND ITEM_UPRC_HISTREC.CNTR_NO = CNTR.CNTR_NO
		   AND ITEM_UPRC_HISTREC.CNTR_REVNO = CNTR.CNTR_REVNO
		   AND CNTR.STS != 'D'
		  LEFT OUTER JOIN VD VD
			ON ITEM_UPRC_HISTREC.TEN_ID = VD.TEN_ID
		   AND ITEM_UPRC_HISTREC.VD_CD = VD.VD_CD
		  LEFT OUTER JOIN USR USR
			ON CNTR.TEN_ID = USR.TEN_ID
		   AND CNTR.CNTR_PIC_ID = USR.USR_ID
		   AND USR.STS != 'D'
		 WHERE ITEM_UPRC_HISTREC.TEN_ID = #{g.tenant}
		   AND #{p.getDate} <![CDATA[=]]> TO_DATE(ITEM_UPRC_HISTREC.UPRC_EFCT_EXP_DT, 'YYYYMMDD') - TO_DATE(#{nowDate}, 'YYYYMMDD')
		 ORDER BY ITEM_UPRC_HISTREC.CNTR_NO
	</select>
</mapper>
