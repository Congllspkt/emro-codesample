<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sp-asn">
    <!-- 납품예정 목록 조회 -->
    <select id="searchAsn" resultType="map">
    /* sp-asn.searchAsn : 납품예정 목록 조회 */
           SELECT A.TEN_ID            /*시스템 아이디 */
                , A.ASN_UUID             /*납품예정 아이디 */
                , A.OORG_CD       /*운영 조직 코드 */
                , A.ASN_STS_CCD       /*납품예정 진행 상태 */
                , A.ASN_NO             /*납품예정 번호 */
                , A.ASN_TIT             /*납품예정 명 */
                , A.CUR_CCD               /*통화 */
                , A.ASN_AMT      /*검수요청금액 */
                , A.ASN_DT            /*납품예정 일자 */
             FROM ASN A
            WHERE A.TEN_ID   = #{g.tenant}
              AND A.VD_CD    = #{g.vd_cd}
              AND A.PURC_TYP_CCD = 'QTY' /*구매유형(QTY:품목)*/
              AND A.STS     != 'D'
        <!-- 운영조직 -->
        <choose>
            <when test="p.oorg_cd != null and p.oorg_cd.size() != 0">
              AND A.OORG_CD IN
                <foreach close=")" collection="p.oorg_cd" item="oorg_cd" open="(" separator=",">
                       #{oorg_cd}
                </foreach>
            </when>
            <otherwise>
              AND A.OORG_CD = ''
            </otherwise>
        </choose>
        <!-- 검수요청일자 -->
        <if test="p.from_asn_dt != null">
              AND A.ASN_DT &gt;= #{p.from_asn_dt}
        </if>
        <if test="p.to_asn_dt != null">
              AND A.ASN_DT <![CDATA[<=]]> #{p.to_asn_dt}
        </if>
        <!-- 발주번호 -->
        <choose>
            <when test="p.po_nos != null and p.po_nos.size() != 0">
            AND EXISTS (
                          SELECT *
                            FROM ASN_ITEM B
                           WHERE B.TEN_ID = A.TEN_ID
                             AND B.ASN_UUID  = A.ASN_UUID
                             AND B.STS   != 'D'
                             AND B.PO_NO IN
                <foreach close=")" collection="p.po_nos" item="po_no" open="(" separator=",">
                    #{po_no}
                </foreach>
                )
            </when>
            <otherwise>
                <if test="p.po_no != null and p.po_no != ''">
                    <bind name="poPattern" value="'%' + p.po_no + '%'"/>
                        AND EXISTS (
                              SELECT *
                                FROM ASN_ITEM B
                               WHERE B.TEN_ID = A.TEN_ID
                                 AND B.ASN_UUID  = A.ASN_UUID
                                 AND B.STS   != 'D'
                                 AND B.PO_NO LIKE UPPER(#{poPattern})
                             )
                </if>
            </otherwise>
        </choose>
        <!-- 검수요청번호 -->
        <if test="p.asn_no != null and p.asn_no != ''">
            <bind name="arPattern" value="'%' + p.asn_no + '%'"/>
              AND A.ASN_NO LIKE UPPER(#{arPattern})
        </if>
        <!-- 검수진행상태 -->
        <if test="p.asn_sts_ccd != null and p.asn_sts_ccd != &quot;&quot;">
              AND A.ASN_STS_CCD = #{p.asn_sts_ccd}
        </if>
         ORDER BY A.ASN_NO DESC
    </select>
    <insert id="insertAsnData">
    /* sp-asn.insertAsnData: 납품예정 데이터 생성 */
           INSERT INTO ASN
           (
             TEN_ID            /*시스템 아이디 */
            ,ASN_UUID             /*납품예정 아이디 */
            ,ASN_NO             /*납품예정 번호 */
            ,ASN_ORDN            /*납품예정 회차 */
            ,ASN_TIT             /*납품예정 명 */
            ,OORG_CD       /*운영 조직 코드 */
            ,VD_CD             /*협력사 코드 */
            ,ASN_TYP_CCD            /*납품예정 유형 */
            ,PURC_TYP_CCD          /*구매 유형 */
            ,ASN_DT           /*납품예정 일자 */
            ,ASN_CRN_DT       /*납품예정 생성 일자 */
            ,DOMOVRS_DIV_CCD       /*내외자 구분 */
            ,SHPGMETH_CCD        /*선적 방법 */
            ,PYMTMETH_CCD      /*대금지급 방법 코드 */
            ,PYMTMETH_EXPLN    /*대금지급 방법 설명 */
            ,DLVYMETH_CCD     /*납품 방법 코드 */
            ,DLVYMETH_EXPLN   /*납품 방법 설명 */
            ,CUR_CCD               /*통화 */
            ,ASN_AMT      /*납품 합계 금액 */
            ,PPBAS_ST_DT            /*실적 시작일 */
            ,PPBAS_CMPLD_DT            /*실적 종료일 */
            ,PYMT_DT          /*지급 일 */
            ,PP_CMPLD_YN      /*기성 완료 여부 */
            ,DLVY_PLC    /*납품 요청 장소 */
            ,PURC_GRP_CD       /*구매 그룹 코드 */
            ,SHPR_NM       /*배송자 명 */
            ,SHPG_VEHNO    /*배송 차량 번호 */
            ,SHPG_TEL    /*배송 전화 번호 */
            ,SHPG_RMK         /*배송 비고 */
            ,GR_PIC_ID         /*입고 담당자 아이디 */
            ,DLVY_DTTM           /*납품 일시 */
            ,ASN_OPN            /*납품예정 의견 */
            ,ASN_STS_CCD       /*납품예정 진행 상태 */
            ,ATHG_UUID            /*첨부 번호 */
            ,RMK               /*비고 */
            ,STS               /*상태 */
            ,REGR_ID            /*등록자 아이디 */
            ,REG_DTTM            /*등록 일시 */
            ,MODR_ID            /*수정자 아이디 */
            ,MOD_DTTM            /*수정 일시 */
            ,PO_UUID             /*발주 아이디*/
            ,PO_NO             /*발주 번호*/
            ,PO_REVNO            /*발주 차수*/
           )
           VALUES
           (
             #{g.tenant}           /*시스템 아이디 */
            ,#{p.asn_uuid}            /*납품예정 아이디 */
            ,#{p.asn_no}            /*납품예정 번호 */
            ,CAST(#{p.asn_ordn} AS INT)           /*납품예정 회차 */
            ,#{p.asn_tit}            /*납품예정 명 */
            ,#{p.oorg_cd}      /*운영 조직 코드 */
            ,#{g.vd_cd}            /*협력사 코드 */
            ,#{p.asn_typ_ccd}           /*납품예정 유형 */
            ,#{p.purc_typ_ccd}
           /*구매 유형 */
            <bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
            ,#{nowDate}          /*납품예정 일자 */
            ,#{nowDate}        /*납품예정 생성 일자 */
            ,#{p.domovrs_div_ccd}      /*내외자 구분 */
            ,#{p.shpgmeth_ccd}       /*선적 방법 */
            ,#{p.pymtmeth_ccd}     /*대금지급 방법 코드 */
            ,#{p.pymtmeth_expln}   /*대금지급 방법 설명 */
            ,#{p.dlvymeth_ccd}    /*납품 방법 코드 */
            ,#{p.dlvymeth_expln}  /*납품 방법 설명 */
            ,#{p.cur_ccd}              /*통화 */
            ,CAST(#{p.asn_amt} AS FLOAT  )     /*납품 합계 금액 */
            ,#{p.ppbas_st_dt}           /*실적 시작일 */
            ,#{p.ppbas_cmpld_dt}           /*실적 종료일 */
            ,#{p.pymt_dt}         /*지급 일 */
            ,#{p.pp_cmpld_yn}     /*기성 완료 여부 */
            ,#{p.dlvy_plc}   /*납품 요청 장소 */
            ,#{p.purc_grp_cd}      /*구매 그룹 코드 */
            ,#{p.shpr_nm}      /*배송자 명 */
            ,#{p.shpg_vehno}   /*배송 차량 번호 */
            ,#{p.shpg_tel}   /*배송 전화 번호 */
            ,#{p.shpg_rmk}        /*배송 비고 */
            ,#{p.gr_pic_id}        /*입고 담당자 아이디 */
            ,#{p.dlvy_dttm}          /*납품 일시 */
            ,#{p.asn_opn}           /*납품예정 의견 */
            ,#{p.asn_sts_ccd}      /*납품예정 진행 상태 */
            ,#{p.athg_uuid}           /*첨부 번호 */
            ,#{p.rmk}              /*비고 */
            ,'C'                   /*상태 */
            ,#{g.username}         /*등록자 아이디 */
            ,#{g.now}              /*등록 일시 */
            ,#{g.username}         /*수정자 아이디 */
            ,#{g.now}              /*수정 일시 */
            ,#{p.po_uuid}
            ,#{p.po_no}
            ,CAST(#{p.po_revno} AS INT)
           )
    </insert>
    <!-- 검수 요청 헤더를 UPDATE 한다. -->
    <update id="updateAsnData">
    /* sp-asn.updateAsnData : 납품예정 데이터 수정 */
           UPDATE ASN
        <trim prefix="set" prefixOverrides=",">
                  STS    = 'U'                              /*상태 */
                 ,MODR_ID = #{g.tenant}                      /*수정자 아이디 */
                 ,MOD_DTTM = #{g.now}                         /*수정 일시 */
                 ,ASN_TIT          = #{p.asn_tit}               /*납품예정 명 */
                 <bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
                 ,ASN_DT        = #{nowDate}             /*납품예정 일자 */
                 ,DOMOVRS_DIV_CCD    = #{p.domovrs_div_ccd}         /*내외자 구분 */
                 ,SHPGMETH_CCD     = #{p.shpgmeth_ccd}          /*선적 방법 */
                 ,PYMTMETH_CCD   = #{p.pymtmeth_ccd}        /*대금지급 방법 코드 */
                 ,PYMTMETH_EXPLN = #{p.pymtmeth_expln}      /*대금지급 방법 설명 */
                 ,DLVYMETH_CCD  = #{p.dlvymeth_ccd}       /*납품 방법 코드 */
                 ,DLVYMETH_EXPLN = #{p.dlvymeth_expln}    /*납품 방법 설명 */
                 ,CUR_CCD            = #{p.cur_ccd}                 /*통화 */
                 ,ASN_AMT   = CAST(#{p.asn_amt} AS FLOAT  )        /*납품 합계 금액 */
                 ,PPBAS_ST_DT           = #{p.ppbas_st_dt}            /*실적 시작일 */
                 ,PPBAS_CMPLD_DT           = #{p.ppbas_cmpld_dt}            /*실적 종료일 */
                 ,PYMT_DT         = #{p.pymt_dt}          /*지급 일 */
                 ,PP_CMPLD_YN     = #{p.pp_cmpld_yn}      /*기성 완료 여부 */
                 ,DLVY_PLC   = #{p.dlvy_plc}    /*납품 요청 장소 */
                 ,PURC_GRP_CD      = #{p.purc_grp_cd}       /*구매 그룹 코드 */
                 ,SHPR_NM      = #{p.shpr_nm}       /*배송자 명 */
                 ,SHPG_VEHNO   = #{p.shpg_vehno}    /*배송 차량 번호 */
                 ,SHPG_TEL   = #{p.shpg_tel}    /*배송 전화 번호 */
                 ,SHPG_RMK        = #{p.shpg_rmk}         /*배송 비고 */
                 ,GR_PIC_ID        = #{p.gr_pic_id}         /*입고 담당자 아이디 */
                 ,DLVY_DTTM          = #{p.dlvy_dttm}           /*납품 일시 */
                 ,ASN_OPN           = #{p.asn_opn}            /*납품예정 의견 */
                 ,ATHG_UUID           = #{p.athg_uuid}            /*첨부 번호 */
                 ,RMK              = #{p.rmk}               /*비고 */
        </trim>
            WHERE TEN_ID = #{g.tenant}       /*시스템 아이디 */
              AND ASN_UUID  = #{p.asn_uuid}        /*납품예정 아이디 */
    </update>
    <update id="updateDeleteAsn">
        /* sp-asn.updateDeleteAsn : 납품예정 데이터 삭제 처리 */
        UPDATE ASN
           SET STS    = 'D'
             , MODR_ID = #{g.username}
             , MOD_DTTM = #{g.now}
         WHERE TEN_ID = #{g.tenant}
           AND ASN_UUID  = #{p.asn_uuid}
    </update>
    <!-- 납품예정 헤더를 조회한다. -->
    <select id="findAsnData" resultType="map">
    /* sp-asn.findAsnData: 납품예정 데이터 조회 */
           SELECT A.TEN_ID                  /*시스템 아이디 */
                , A.ASN_UUID                  /*납품예정 아이디 */
                , A.ASN_NO                  /*납품예정 번호 */
                , A.ASN_ORDN                  /*납품예정 회차 */
                , A.ASN_TIT                  /*납품예정 명 */
                , A.OORG_CD           /*운영 조직 코드 */
                , A.VD_CD                  /*협력사 코드 */
                , A.ASN_TYP_CCD                  /*납품예정 유형 */
                , A.PURC_TYP_CCD              /*구매 유형 */
                , A.ASN_DT                  /*납품예정 일자 */
                , A.ASN_CRN_DT           /*납품예정 생성 일자 */
                , A.DOMOVRS_DIV_CCD           /*내외자 구분 */
                , A.SHPGMETH_CCD            /*선적 방법 */
                , A.PYMTMETH_CCD          /*대금지급 방법 코드 */
                , A.PYMTMETH_EXPLN        /*대금지급 방법 설명 */
                , A.DLVYMETH_CCD         /*납품 방법 코드 */
                , A.DLVYMETH_EXPLN       /*납품 방법 설명 */
                , A.CUR_CCD                      /*통화 */
                , A.ASN_AMT          /*납품 합계 금액 */
                , A.PPBAS_ST_DT                  /*실적 시작일 */
                , A.PPBAS_CMPLD_DT                  /*실적 종료일 */
                , A.ASN_DT              /*요청 일 */
                , A.PYMT_DT              /*지급 일 */
                , A.PP_CMPLD_YN          /*기성 완료 여부 */
                , A.DLVY_PLC          /*납품 요청 장소 */
                , A.PURC_GRP_CD              /*구매 그룹 코드 */
                , A.SHPR_NM              /*배송자 명 */
                , A.SHPG_VEHNO          /*배송 차량 번호 */
                , A.SHPG_TEL          /*배송 전화 번호 */
                , A.SHPG_RMK              /*배송 비고 */
                , A.GR_PIC_ID              /*입고 담당자 아이디 */
                , (CASE WHEN 'en_US' = #{g.locale} THEN C.USR_NM_EN
                        ELSE C.USR_NM
                    END)  AS GR_PIC_NM  /*입고 담당자 명 */
                , A.DLVY_DTTM               /*납품일시*/
                , A.ASN_OPN                  /*납품예정 의견 */
                , A.ASN_STS_CCD              /*납품예정 진행 상태 */
                , A.ATHG_UUID                  /*첨부 번호 */
                , A.RMK                      /*비고 */
                , A.STS                      /*상태 */
                , A.REGR_ID                  /*등록자 아이디 */
                , A.REG_DTTM                  /*등록 일시 */
                , A.MODR_ID                  /*수정자 아이디 */
                , A.MOD_DTTM                  /*수정 일시 */
                , (CASE WHEN 'en_US' = #{g.locale} THEN B.VD_NM_EN
                        ELSE B.VD_NM
                    END) AS DISP_VD_NM/*협력사 명*/
                , CASE WHEN ( SELECT COUNT(1)
                                FROM ASN_ITEM DT
                               WHERE DT.TEN_ID        = A.TEN_ID
                                 AND DT.ASN_UUID         = A.ASN_UUID
                                 AND DT.ITEM_CD_CRN_TYP_CCD = 'CDLS'
                                 AND DT.STS          != 'D'
                            ) &gt; 0
                            THEN 'Y'
                       ELSE 'N'
                  END AS HAS_NO_CD_ITEM
             FROM ASN A
             LEFT OUTER JOIN VD B
               ON B.TEN_ID = A.TEN_ID 
              AND B.VD_CD  = A.VD_CD
            LEFT OUTER JOIN USR C
               ON C.TEN_ID = A.TEN_ID
              AND C.USR_ID = A.GR_PIC_ID
            WHERE A.TEN_ID = #{g.tenant}
              AND A.ASN_UUID  = #{p.asn_uuid}
              AND A.STS   != 'D'
    </select>
    <select id="compareAsnStatus" resultType="map">
    /* sp-asn.compareAsnStatus: 납품예정 상태 비교 */
    SELECT ARHD.ASN_UUID
         , ARHD.ASN_NO
         , ARHD.ASN_ORDN
         , ARHD.ASN_STS_CCD
         , CDDL.DTLCD_NM     AS ASN_STS_CCD_NM
         , CASE WHEN ARHD.ASN_STS_CCD = #{p.asn_sts_ccd}
                     THEN 'Y'
                ELSE 'N'
           END  AS VALID_YN
      FROM ASN ARHD
     INNER JOIN DTLCD CDDT
        ON CDDT.TEN_ID = ARHD.TEN_ID
       AND CDDT.CCD = 'P062'
       AND CDDT.DTLCD = ARHD.ASN_STS_CCD
       AND CDDT.USE_YN = 'Y'
       AND CDDT.STS   != 'D'
     INNER JOIN DTLCD_MULTLANG CDDL
        ON CDDL.TEN_ID  = CDDT.TEN_ID
       AND CDDL.CCD  = CDDT.CCD
       AND CDDL.DTLCD  = CDDT.DTLCD
       AND CDDL.LANG_CCD = #{g.locale}
       AND CDDL.STS    != 'D'
     WHERE ARHD.TEN_ID = #{g.tenant}
       AND ARHD.ASN_UUID  = #{p.asn_uuid}
       AND ARHD.STS   != 'D'
    </select>
    <!-- 신규 기성요청차수 조회 -->
    <select id="getNewAsnRev" resultType="java.lang.Integer">
    /* sp-asn.getNewAsnRev: 발주아이디에 따른 기성차수의 값을 반환한다.*/
        SELECT CASE WHEN MAX(A.ASN_ORDN) IS NULL
                         THEN 1
                    ELSE MAX(A.ASN_ORDN) + 1
               END AS ASN_ORDN
          FROM ASN A
         WHERE A.TEN_ID       = #{g.tenant}
           AND A.PO_NO        = (SELECT PO_NO FROM PO WHERE TEN_ID = #{g.tenant} AND PO_UUID = #{p.po_uuid} )
           AND A.ASN_STS_CCD  = 'CMPLD'
           AND A.STS         != 'D'
    </select>
    <select id="findAdvancePaymentYnByAsnUuid" parameterType="java.lang.String" resultType="java.lang.String">
    /* sp-asn.findAdvancePaymentYnByAsnUuid: 기성요청 아이디로 선급금여부를 조회 */
    SELECT CASE WHEN ( SELECT COUNT(1)
                         FROM PO_PYMT_EXPT POPP
                        WHERE POPP.TEN_ID     = ARHD.TEN_ID
                          AND POPP.PO_UUID      = ARHD.PO_UUID
                          AND POPP.PYMT_TYP_CCD = 'APYMT'
                     ) = 0
                     THEN 'N'
                WHEN ( SELECT COUNT(1)
                         FROM GR GRHD
                        WHERE GRHD.TEN_ID = ARHD.TEN_ID
                          AND GRHD.PO_NO  = ARHD.PO_NO
                          AND (GRHD.ASN_UUID IS NULL OR GRHD.ASN_UUID = '')
                          AND GRHD.STS   != 'D'
                     ) &gt; 0
                     THEN 'N'
                WHEN ARHD.PYMT_TYP_CCD = 'APYMT'
                     THEN 'Y'
                ELSE 'N'
           END  AS APYMT_YN
      FROM ASN ARHD
     WHERE ARHD.TEN_ID = #{g.tenant}
       AND ARHD.ASN_UUID  = #{p}
       AND ARHD.STS   != 'D'
    </select>
    <select id="getProgressPaymentRequestStatus" resultType="map">
    /* sp-asn.getProgressPaymentRequestStatus : 기성요청 헤더상태  */
    SELECT ARHD.ASN_UUID
         , ARHD.ASN_NO
         , ARHD.ASN_ORDN
         , ARHD.ASN_STS_CCD
         , CDDL.DTLCD_NM     AS ASN_STS_CCD_NM
         , CASE WHEN ARHD.ASN_STS_CCD = #{p.asn_sts_ccd}
                     THEN 'Y'
                ELSE 'N'
           END  AS VALID_YN
      FROM ASN ARHD
     INNER JOIN DTLCD CDDT
        ON CDDT.TEN_ID = ARHD.TEN_ID
       AND CDDT.CCD = 'P062'
       AND CDDT.DTLCD = ARHD.ASN_STS_CCD
       AND CDDT.USE_YN = 'Y'
       AND CDDT.STS   != 'D'
     INNER JOIN DTLCD_MULTLANG CDDL
        ON CDDL.TEN_ID  = CDDT.TEN_ID
       AND CDDL.CCD  = CDDT.CCD
       AND CDDL.DTLCD  = CDDT.DTLCD
       AND CDDL.LANG_CCD = #{g.locale}
       AND CDDL.STS    != 'D'
     WHERE ARHD.TEN_ID = #{g.tenant}
       AND ARHD.ASN_UUID  = #{p.asn_uuid}
       AND ARHD.STS   != 'D'
    </select>
    <!-- 기성 헤더 조회 -->
    <select id="findProgressPaymentRequest" resultType="map">
    /* sp-asn.findProgressPaymentRequest: 기성헤더 조회 */
    SELECT AR.TEN_ID           /*시스템 아이디 */
         , AR.ASN_UUID            /*납품예정 아이디 */
         , AR.OORG_CD      /*운영 조직 코드 */
         , AR.ASN_NO            /*납품예정 번호 */
         , AR.ASN_ORDN           /*납품예정 회차 */
         , AR.ASN_TIT            /*납품예정 명 */
         , AR.PO_NO               /*발주 번호*/
         , AR.PO_REVNO           /*발주 차수*/
         , AR.CUR_CCD              /*통화*/
         , PO.PO_AMT       /*발주 총 금액*/
         , AR.PPBAS_ST_DT           /*실적 시작일 */
         , AR.PPBAS_CMPLD_DT           /*실적 종료일 */
         , GR.GR_NO
         , GR.GR_ORDN
         , GR.GR_DT
         , ( SELECT SUM(POPP.PYMT_AMT)
               FROM PO_PYMT_EXPT POPP
              WHERE POPP.TEN_ID     = PO.TEN_ID
                AND POPP.PO_UUID      = PO.PO_UUID
                AND POPP.PYMT_TYP_CCD = 'APYMT'
           ) AS APYMT_AMT   /*선급금*/
         , ( SELECT COUNT(POPP.PO_PYMT_EXPT_UUID)
               FROM PO_PYMT_EXPT POPP
              WHERE POPP.TEN_ID = PO.TEN_ID
                AND POPP.PO_UUID  = PO.PO_UUID
           ) AS PAY_PLAN_CNT  /* 총 지급회차 count */
         , ( SELECT COUNT(GR.GR_UUID)
               FROM GR GR
              WHERE GR.TEN_ID      = PO.TEN_ID
                AND GR.PO_NO       = PO.PO_NO
                AND GR.PO_REVNO      <![CDATA[<=]]> PO.PO_REVNO  /* 발주변경이 가능하므로 이전 발주차수에 연결된 GR들도 포함 */
                AND GR.GR_STS_CCD = 'PP_CMPLD'
                AND ( GR.ASN_ORDN    <![CDATA[<]]> AR.ASN_ORDN
                   OR GR.ASN_ORDN    IS NULL ) /*AR없이 GR 생성한 경우(선급금등록) 포함*/
                AND GR.STS        != 'D'
           ) + 1 AS CRNT_PAY_REV    /* 현재 지급회차: 이전차수까지의 총 기성승인 건 count + 1 */
         , AR.RMK              /*비고 */
         , AR.ATHG_UUID           /*첨부 번호 */
         , AR.ASN_STS_CCD      /*기성요청진행상태*/
         , AR.ASN_AMT     /*납품합계금액*/
         , (
             SELECT SUM(S1.GR_AMT) AS GR_TTL_AMT
               FROM GR S1
              WHERE S1.TEN_ID      = AR.TEN_ID
                AND S1.PO_NO       = AR.PO_NO
                AND S1.PO_REVNO      <![CDATA[<=]]> AR.PO_REVNO  /* 발주변경이 가능하므로 이전 발주차수에 연결된 GR들도 포함 */
                AND S1.GR_STS_CCD = 'PP_CMPLD' /* C:기성완료 */
                AND ( S1.ASN_ORDN    <![CDATA[<]]> AR.ASN_ORDN
                   OR S1.ASN_ORDN    IS NULL ) /*AR없이 GR 생성한 경우(선급금등록) 포함*/
           ) AS GR_TTL_AMT    /*전회누계금액(승인)*/
         , AR.PO_UUID
         , AR.ASN_OPN           /*납품예정 의견*/
         , CASE WHEN GR.GR_AMT IS NULL
                     THEN 0
                ELSE GR.GR_AMT
           END AS GR_AMT     /*기성승인금액*/
         , ( SELECT SUM(PP.PYMT_AMT)
               FROM PO_PYMT_EXPT PP
              WHERE PP.TEN_ID  = AR.TEN_ID
                AND PP.PO_UUID   = AR.PO_UUID
                AND PP.PYMT_REVNO <![CDATA[<=]]> COALESCE( ( SELECT MAX(G.GR_ORDN)
                                                            FROM GR G
                                                           WHERE G.TEN_ID      = AR.TEN_ID
                                                             AND G.PO_NO       = AR.PO_NO
                                                             AND G.GR_STS_CCD = 'PP_CMPLD'
                                                             AND G.STS        != 'D'
                                                             AND (
                                                                     G.ASN_ORDN  <![CDATA[<]]> AR.ASN_ORDN
                                                                  OR G.ASN_ORDN IS NULL
                                                                 )
                                                        ), 0) + 1    /* 이전 요청차수에 해당되는 승인차수 +1 */
           )  AS SUM_PAY_PLAN_AMT  /* 차수기준 지급계획 총액 */
         , CASE WHEN GR.PYMT_TYP_CCD IS NOT NULL  AND GR.PYMT_TYP_CCD = 'APYMT'
                     THEN 'Y'
                WHEN AR.PYMT_TYP_CCD = 'APYMT' THEN 'Y'
                ELSE 'N'
            END AS APYMT_YN
         , CASE WHEN GR.PYMT_TYP_CCD IS NOT NULL  THEN GR.PYMT_TYP_CCD
                ELSE AR.PYMT_TYP_CCD
            END AS PYMT_TYP_CCD
         , CASE WHEN ( SELECT COUNT(1)
                         FROM ASN_ITEM DT
                        WHERE DT.TEN_ID        = AR.TEN_ID
                          AND DT.ASN_UUID         = AR.ASN_UUID
                          AND DT.ITEM_CD_CRN_TYP_CCD = 'CDLS'
                          AND DT.STS          != 'D'
                     ) &gt; 0
                     THEN 'Y'
                ELSE 'N'
           END AS HAS_NO_CD_ITEM
      FROM ASN AR
     INNER JOIN PO PO
        ON PO.TEN_ID = AR.TEN_ID
       AND PO.PO_UUID  = AR.PO_UUID
      LEFT OUTER JOIN GR GR
        ON GR.TEN_ID      = AR.TEN_ID
       AND GR.ASN_UUID       = AR.ASN_UUID
       AND GR.GR_STS_CCD = 'PP_CMPLD' /* 기성등록 */
     WHERE AR.TEN_ID = #{g.tenant}
       AND AR.ASN_UUID  = #{p.asn_uuid}
    </select>
    <select id="findInfoDocumentOutputSpAsnHeader" resultType="map">
        /* asn.findInfoDocumentOutputSpAsnHeader : 거래명세서(헤더정보) 출력 */
		SELECT TO_CHAR(#{g.now}, 'YYYY/MM/DD')  AS toDay      /*발행일*/
		      ,CONCAT(CONCAT(CONCAT(CONCAT(SUBSTR(VD.BIZREGNO, 1, 3), '-'), SUBSTR(VD.BIZREGNO, 4, 2)), '-'), SUBSTR(VD.BIZREGNO, 6, 5))  AS BIZ_REG_NO /*공급처 사업자번호*/
		      ,VD.VD_NM   /*공급처 사업장명*/ 
		      ,VD.CEO_NM  /*공급처 대표성명*/
		      ,VD.BIZTYP AS VD_BOS /*공급처 업태*/
		      ,VD.IND AS VD_TOB/*공급처 종목*/
		      ,CONCAT(CONCAT(VD.DTL_ADDR_1,' '), VD.DTL_ADDR_2) AS VD_ADDR /* 공급처 주소 */
		      ,CONCAT(CONCAT(CONCAT(CONCAT(SUBSTR(MG.BIZREGNO, 1, 3), '-'), SUBSTR(MG.BIZREGNO, 4, 2)), '-'), SUBSTR(MG.BIZREGNO, 6, 5))  AS CORP_BIZ_REG_NO    --공급받는자 사업자번호
		      ,MG.LOGIC_ORG_NM AS CORP_ORG_NM /*공급받는자 사업자명*/
		      ,MG.BIZTYP AS CORP_BOS /*공급받는자 업태*/
		      ,MG.IND AS CORP_TOB  /*공급받는자 종목*/
		      ,MG.CEO_NM  AS CORP_REP_NM/*공급받는자 대표자명*/
		      ,MG.ADDR  AS CORP_ADDR/*공급받는자 주소*/
		      ,AH.ASN_UUID
		      ,AH.ASN_NO  /*납품번호 - QR코드 */
		      ,(SELECT SUM(A.ASN_QTY)
		          FROM ASN_ITEM A
		         WHERE A.TEN_ID = AH.TEN_ID
		           AND A.ASN_UUID = AH.ASN_UUID
		           AND A.STS != 'D') AS QTY_SUM /*합계 수량*/
		      ,(SELECT  CASE WHEN PLT_CD = 'WF01' THEN '원익큐엔씨 쿼츠사업부'
		                    WHEN PLT_CD = 'WF02' THEN '원익큐엔씨 세라믹스사업부'
		                    WHEN PLT_CD = 'WF03' THEN '원익큐엔씨 램프사업부'
		                    WHEN PLT_CD = 'WF04' THEN '원익큐엔씨 세정사업부'
		                    ELSE ''
		                END
		          FROM ASN_ITEM
		         WHERE TEN_ID = AH.TEN_ID
		           AND ASN_UUID = AH.ASN_UUID 
		           AND ROWNUM = 1  ) AS PLT_NM
		  FROM ASN AH
		  LEFT OUTER JOIN ASN_ITEM AD
		      		   ON AH.TEN_ID = AD.TEN_ID
		   	  		  AND AH.ASN_UUID  = AD.ASN_UUID
		  LEFT OUTER JOIN VD VD
		      		   ON AH.TEN_ID = VD.TEN_ID
		   	  	 	  AND AH.VD_CD  = VD.VD_CD  
		  LEFT OUTER JOIN OORG OOMG 
			  	       ON OOMG.TEN_ID = AH.TEN_ID 
			  	      AND OOMG.OORG_CD = AH.OORG_CD  
		  LEFT OUTER JOIN LOGIC_ORG MG
			  	       ON MG.TEN_ID = OOMG.TEN_ID 
	  	      		  AND MG.LOGIC_ORG_TYP_CCD = OOMG.LOGIC_ORG_TYP_CCD
					  AND MG.LOGIC_ORG_CD = OOMG.LOGIC_ORG_CD
					  AND MG.USE_YN = 'Y'
					  AND MG.STS != 'D'
		  LEFT OUTER JOIN DTLCD CDDT
			  	       ON CDDT.TEN_ID = VD.TEN_ID
			  	      AND CDDT.CCD = 'E003'
			  	      AND CDDT.DTLCD = VD.IND
			  	      AND CDDT.USE_YN = 'Y'
			  	      AND CDDT.STS != 'D' 
		  LEFT OUTER JOIN DTLCD_MULTLANG CDDL
			  	       ON CDDL.TEN_ID  = CDDT.TEN_ID
			  	      AND CDDL.CCD  = CDDT.CCD
			  	      AND CDDL.DTLCD  = CDDT.DTLCD
			  	      AND CDDL.LANG_CCD = #{g.locale}  /* session.LANG_CCD*/
		   	  		  AND CDDL.STS != 'D'
		  LEFT OUTER JOIN DTLCD CDDT2
			  	       ON CDDT2.TEN_ID = VD.TEN_ID
			  	      AND CDDT2.CCD = 'E002'
			  	      AND CDDT2.DTLCD = VD.BIZTYP
			  	      AND CDDT2.USE_YN = 'Y'
			  	      AND CDDT2.STS != 'D'
		  LEFT OUTER JOIN DTLCD_MULTLANG CDDL2
			  	       ON CDDL2.TEN_ID  = CDDT2.TEN_ID
			  	      AND CDDL2.CCD = CDDT2.CCD
			  	      AND CDDL2.DTLCD = CDDT2.DTLCD
			  	      AND CDDL2.LANG_CCD = #{g.locale} /* session.LANG_CCD*/
			  	      AND CDDL2.STS != 'D' 
		 WHERE AH.TEN_ID = #{g.tenant}  /* session.TEN_ID  */
		   AND AH.ASN_UUID = #{p.asn_uuid}  /*  변수 : p_ar_id  */
		   AND ROWNUM = 1 </select>
	<select id="findListDocumentOutputSpAsnDetail" resultType="map">
	/* asn.findListDocumentOutputSpAsnDetail : 거래명세서(품목정보) 출력 */
		SELECT ROW_NUMBER() OVER(ORDER BY PD.PO_NO, PD.PO_LNO, PD.ITEM_CD, PD.REQ_DLVY_DT, AD.ASN_UUID) AS SEQ  /*순번*/
		      ,PD.PO_NO 			AS PO_NO          /*발주번호*/
		      ,PD.ITEM_CD       	AS ITEM_CD        /*품목코드*/
		      ,MAX(PD.ITEM_NM)  	AS ITEM_NM        /*품목명*/
		      ,MAX(PD.ITEM_SPEC)    AS SPEC           /*규격*/
		      ,MAX(PH.PO_CRN_DT)    AS PO_CRE_DATE    /*발주일자*/
		      ,PD.REQ_DLVY_DT       AS LT_DATE        /*LT반영일자*/
		      ,SUM(AD.ASN_QTY)    	AS ASN_QTY         /*납품수량*/
		      ,''                   AS REMARK         /* 비고  */
		      ,AD.ASN_UUID 
		  FROM ASN_ITEM AD
		 INNER JOIN PO_ITEM PD
		    ON AD.TEN_ID = PD.TEN_ID
		   AND AD.PO_NO = PD.PO_NO
		   AND AD.PO_ITEM_UUID = PD.PO_ITEM_UUID
		   AND PD.STS != 'D'
		 INNER JOIN OORG_MAPG OOLM
		    ON OOLM.TEN_ID = AD.TEN_ID
		   AND OOLM.CONN_TYP_CCD = 'POIO'
		   AND OOLM.CONNSRC_OORG_CD = AD.OORG_CD
		   AND OOLM.CONN_YN = 'Y'
		 INNER JOIN PO PH
		    ON PD.TEN_ID = PH.TEN_ID
		   AND PD.PO_UUID = PH.PO_UUID
		   AND PH.STS != 'D'
		  LEFT OUTER JOIN ITEM MTGL
		    ON AD.TEN_ID = MTGL.TEN_ID
		   AND AD.ITEM_CD = MTGL.ITEM_CD
		   AND MTGL.STS != 'D'
		  LEFT OUTER JOIN ITEM_OORG MTOP
		    ON MTOP.TEN_ID = MTGL.TEN_ID
		   AND MTOP.ITEM_CD = MTGL.ITEM_CD
		   AND MTOP.OORG_CD = OOLM.CONNSUBJ_OORG_CD
		 WHERE AD.TEN_ID = #{g.tenant}      /* session.TEN_ID  */
		   AND AD.ASN_UUID = #{p.asn_uuid}  /* 변수 : p_ASN_UUID  */
		 GROUP BY PD.PO_NO, PD.PO_LNO, PD.ITEM_CD, PD.REQ_DLVY_DT, AD.ASN_UUID
		 ORDER BY SEQ
	</select>
    <update id="updateAsnPaymentTypeCommonCode">
    /* sp-asn.updateAsnPaymentTypeCommonCode: 지급 유형 업데이트 */
        UPDATE ASN
           SET PYMT_TYP_CCD  = #{p.pymt_typ_ccd}
         WHERE TEN_ID = #{g.tenant}
           AND ASN_UUID = #{p.asn_uuid}
           AND STS != 'D'
    </update>
    <resultMap id="pymtTypMap" type="java.util.Map">
        <result column="EXISTS_YN_APYMT" javaType="boolean" jdbcType="BOOLEAN" property="exists_yn_apymt"/>
    </resultMap>
    <select id="getProgressPaymentTypeRelatedInfo" resultMap="pymtTypMap">
    /* sp-asn.getProgressPaymentTypeRelatedInfo: 지급 유형 관련 정보 가져오기 */
        SELECT ASN.ASN_UUID
             , ASN.ASN_ORDN
             , ASN.PO_NO
             , ASN.PO_UUID
             , PPE.PYMT_AMT AS APYMT_AMT
             , CASE WHEN PPE.PYMT_AMT IS NULL THEN 'N'
                    ELSE 'Y'
                END AS EXISTS_APYMT
             , CASE WHEN GR.GR_UUID IS NULL OR GR.GR_UUID = '' THEN 'N'
                    ELSE 'Y'
               END AS EXISTS_APYMT_CMPLD
             , ASN.ASN_AMT
             , PO.PO_AMT
             , (SELECT COALESCE(SUM(TGR.GR_AMT), 0)
                  FROM ASN TASN
                 INNER JOIN GR TGR
                    ON TGR.TEN_ID = TASN.TEN_ID
                   AND TGR.PO_NO = TASN.PO_NO
                   AND TGR.PO_REVNO <![CDATA[<=]]> TASN.PO_REVNO
                   AND TGR.GR_STS_CCD = 'PP_CMPLD'
                   AND TGR.STS != 'D'
                 WHERE TASN.TEN_ID = ASN.TEN_ID
                   AND TASN.ASN_UUID = ASN.ASN_UUID
                ) AS TTL_GR_AMT
          FROM ASN ASN
          LEFT OUTER JOIN GR GR
            ON GR.TEN_ID = ASN.TEN_ID
           AND GR.PO_NO = ASN.PO_NO
           AND GR.PYMT_TYP_CCD = 'APYMT'
           AND GR.GR_STS_CCD = 'PP_CMPLD'
           AND GR.STS != 'D'
         INNER JOIN PO PO
            ON PO.TEN_ID = ASN.TEN_ID
           AND PO.PO_UUID = ASN.PO_UUID
           AND PO.STS != 'D'
          LEFT OUTER JOIN PO_PYMT_EXPT PPE
            ON PPE.TEN_ID = PO.TEN_ID
           AND PPE.PO_UUID = PO.PO_UUID
           AND PPE.PYMT_TYP_CCD = 'APYMT'
         WHERE ASN.TEN_ID = #{g.tenant}
           AND ASN.ASN_UUID = #{p.asn_uuid}
           AND ASN.STS != 'D'
    </select>
</mapper>
