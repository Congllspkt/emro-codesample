<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="workplace-monitoring">
    <select id="findListErrorTask" resultType="map">
    /* workplace-monitoring.findListErrorTask : 수집된 오류 task 목록 조회 */
    SELECT ETASK.ERR_TYP_CCD
         , ETASK.ERR_TASK_UUID
         , ETASK.TASK_UUID
         , CASE WHEN COLL_DTL.TASK_STS_UUID IS NULL  THEN CURR_DTL.TASK_STS_UUID
               ELSE COLL_DTL.TASK_STS_UUID
               END AS TASK_STS_UUID
         /*---------- error task 수집 data ---------*/
         , COLL_DTL.TASK_TIT          AS COLL_TASK_TIT
         , COLL_DTL.DELAY_DSPY_ST_DT  AS COLL_DELAY_DSPY_ST_DT
         , COLL_DTL.IMMNT_DSPY_ST_DT  AS COLL_IMMNT_DSPY_ST_DT
         , COLL_DTL.NEW_DSPY_ED_DT    AS COLL_NEW_DSPY_ED_DT
         , COLL_DTL.ERR_TASK_DTL_UUID AS COLL_ERR_TASK_DTL_UUID
         , COLL_DTL.DAT_SRC_TYP_CCD   AS COLL_DAT_SRC_TYP_CCD
         , COLL_DTL.TASK_STS_UUID     AS COLL_TASK_STS_UUID
         , COLL_TSTS.TASK_STS_CD      AS COLL_TASK_STS_CD
         , COLL_TSTS.TASK_STS_NM      AS COLL_TASK_STS_NM
         , COLL_TSTS.TASK_STS_NM_EN   AS COLL_TASK_STS_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN COLL_TSTS.TASK_STS_NM
               ELSE (CASE WHEN COLL_TSTS.TASK_STS_NM_EN IS NULL  THEN COLL_TSTS.TASK_STS_NM
                         ELSE COLL_TSTS.TASK_STS_NM_EN
                         END)
               END AS COLL_DISPLAY_TASK_STS_NM
         , COLL_MTASK.MAIN_TASK_CD    AS COLL_MAIN_TASK_CD
         , COLL_MTASK.MAIN_TASK_NM    AS COLL_MAIN_TASK_NM
         , COLL_MTASK.MAIN_TASK_NM_EN AS COLL_MAIN_TASK_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN COLL_MTASK.MAIN_TASK_NM
               ELSE (CASE WHEN COLL_MTASK.MAIN_TASK_NM_EN IS NULL  THEN COLL_MTASK.MAIN_TASK_NM
                         ELSE COLL_MTASK.MAIN_TASK_NM_EN
                         END)
               END AS COLL_DISPLAY_MAIN_TASK_NM
        /*---------- error task 현재 data ---------*/
         , CURR_DTL.TASK_TIT          AS CURR_TASK_TIT
         , CURR_DTL.CLSG_DT           AS CURR_CLSG_DT
         , CURR_DTL.DELAY_DSPY_ST_DT  AS CURR_DELAY_DSPY_ST_DT
         , CURR_DTL.IMMNT_DSPY_ST_DT  AS CURR_IMMNT_DSPY_ST_DT
         , CURR_DTL.NEW_DSPY_ED_DT    AS CURR_NEW_DSPY_ED_DT
         , CURR_DTL.ERR_TASK_DTL_UUID AS CURR_ERR_TASK_DTL_UUID
         , CURR_DTL.DAT_SRC_TYP_CCD   AS CURR_DAT_SRC_TYP_CCD
         , CURR_DTL.TASK_STS_UUID     AS CURR_TASK_STS_UUID
         , CURR_TSTS.TASK_STS_CD      AS CURR_TASK_STS_CD
         , CURR_TSTS.TASK_STS_NM      AS CURR_TASK_STS_NM
         , CURR_TSTS.TASK_STS_NM_EN   AS CURR_TASK_STS_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN CURR_TSTS.TASK_STS_NM
               ELSE (CASE WHEN CURR_TSTS.TASK_STS_NM_EN IS NULL  THEN CURR_TSTS.TASK_STS_NM
                         ELSE CURR_TSTS.TASK_STS_NM_EN
                         END)
               END AS CURR_DISPLAY_TASK_STS_NM
         , CURR_MTASK.MAIN_TASK_CD AS COLL_MAIN_TASK_CD
         , CURR_MTASK.MAIN_TASK_NM AS COLL_MAIN_TASK_NM
         , CURR_MTASK.MAIN_TASK_NM_EN AS COLL_MAIN_TASK_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN CURR_MTASK.MAIN_TASK_NM
               ELSE (CASE WHEN CURR_MTASK.MAIN_TASK_NM_EN IS NULL  THEN CURR_MTASK.MAIN_TASK_NM
                         ELSE CURR_MTASK.MAIN_TASK_NM_EN
                         END)
               END AS CURR_DISPLAY_MAIN_TASK_NM
         , CURR_TSTS.MENU_CD           AS CURR_MENU_CD
         , COLL_TSTS.MENU_CD           AS COLL_MENU_CD
         ,  (SELECT MENU_LANG.MENU_NM
               FROM MENU_MULTLANG MENU_LANG
              WHERE MENU_LANG.TEN_ID = CURR_TSTS.TEN_ID
                AND MENU_LANG.MENU_CD = CURR_TSTS.MENU_CD
                AND MENU_LANG.LANG_CCD = #{g.locale}) AS CURR_MENU_NM
         , (SELECT DSRC.DAT_SRC_LOGIC_NM
              FROM DAT_SRC DSRC
            WHERE DSRC.TEN_ID = CURR_TSTS.TEN_ID
              AND DSRC.DAT_SRC_UUID = CURR_TSTS.DAT_SRC_UUID
              AND DSRC.STS != 'D') AS CURR_DAT_SRC_LOGIC_NM
      FROM ERR_TASK ETASK    /* ERROR TASK  */
      LEFT OUTER JOIN ERR_TASK_DTL COLL_DTL   /* ERROR TASK DETAIL - 수집 상태 */
        ON ETASK.TEN_ID = COLL_DTL.TEN_ID
       AND ETASK.ERR_TASK_UUID = COLL_DTL.ERR_TASK_UUID
       AND COLL_DTL.DAT_SRC_TYP_CCD = 'TASK'
      LEFT OUTER JOIN TASK_STS COLL_TSTS
        ON COLL_DTL.TEN_ID = COLL_TSTS.TEN_ID
       AND COLL_DTL.TASK_STS_UUID = COLL_TSTS.TASK_STS_UUID
       AND COLL_TSTS.STS != 'D'
       AND COLL_TSTS.USE_YN = 'Y'
      LEFT OUTER JOIN MAIN_TASK COLL_MTASK
        ON COLL_TSTS.TEN_ID = COLL_MTASK.TEN_ID
       AND COLL_TSTS.MAIN_TASK_UUID = COLL_MTASK.MAIN_TASK_UUID
       AND COLL_MTASK.STS != 'D'
      LEFT OUTER JOIN ERR_TASK_DTL CURR_DTL   /* ERROR TASK DETAIL - 현재 상태 */
        ON ETASK.TEN_ID = CURR_DTL.TEN_ID
       AND ETASK.ERR_TASK_UUID = CURR_DTL.ERR_TASK_UUID
       AND CURR_DTL.DAT_SRC_TYP_CCD = 'DAT_SRC'
      LEFT OUTER JOIN TASK_STS CURR_TSTS
        ON CURR_DTL.TEN_ID = CURR_TSTS.TEN_ID
       AND CURR_DTL.TASK_STS_UUID = CURR_TSTS.TASK_STS_UUID
       AND CURR_TSTS.STS != 'D'
       AND CURR_TSTS.USE_YN = 'Y'
      LEFT OUTER JOIN MAIN_TASK CURR_MTASK
        ON CURR_TSTS.TEN_ID = CURR_MTASK.TEN_ID
       AND CURR_TSTS.MAIN_TASK_UUID = CURR_MTASK.MAIN_TASK_UUID
       AND CURR_MTASK.STS != 'D'
     WHERE ETASK.TEN_ID = #{g.tenant}
      <if test="p.main_task_cd != null and p.main_task_cd != ''">
       AND #{p.main_task_cd} IN (COLL_MTASK.MAIN_TASK_CD, CURR_MTASK.MAIN_TASK_CD)
      </if>
      <if test="p.err_typ_ccd != null and p.err_typ_ccd != ''">
        AND ETASK.ERR_TYP_CCD = #{p.err_typ_ccd}
      </if>
     ORDER BY (CASE WHEN COLL_MTASK.SORT IS NULL
                   THEN CURR_MTASK.SORT
                   ELSE COLL_MTASK.SORT
                   END) ASC
            , (CASE WHEN COLL_TSTS.SORT IS NULL
                   THEN CURR_TSTS.SORT
                   ELSE COLL_TSTS.SORT
                   END)
    </select>
    <select id="findErrorTaskDetail" resultType="map">
    /* workplace-monitoring.findErrorTaskDetail : 에러 업무 상세 조회 */
    SELECT ETASK.ERR_TYP_CCD
         , ETASK.TASK_UUID
         , ET_DTL.TASK_STS_UUID
        /*---------- error task 수집 data ---------*/
         , ET_DTL.TASK_TIT
         , ET_DTL.CLSG_DT
         , ET_DTL.DELAY_DSPY_ST_DT
         , ET_DTL.IMMNT_DSPY_ST_DT
         , ET_DTL.NEW_DSPY_ED_DT
         , ET_DTL.ERR_TASK_DTL_UUID
         , ET_DTL.DAT_SRC_TYP_CCD
         , ET_DTL.TASK_STS_UUID
         , TSTS.TASK_STS_CD
         , TSTS.TASK_STS_NM
         , TSTS.TASK_STS_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN TSTS.TASK_STS_NM
               ELSE (CASE WHEN TSTS.TASK_STS_NM_EN IS NULL  THEN TSTS.TASK_STS_NM
                         ELSE TSTS.TASK_STS_NM_EN
                         END)
               END AS DISPLAY_TASK_STS_NM
         , MTASK.MAIN_TASK_CD
         , MTASK.MAIN_TASK_NM
         , MTASK.MAIN_TASK_NM_EN
         , CASE WHEN 'ko_KR' = #{g.locale}
               THEN MTASK.MAIN_TASK_NM
               ELSE (CASE WHEN MTASK.MAIN_TASK_NM_EN IS NULL  THEN MTASK.MAIN_TASK_NM
                         ELSE MTASK.MAIN_TASK_NM_EN
                         END)
               END AS DISPLAY_MAIN_TASK_NM
      FROM ERR_TASK ETASK
     INNER JOIN ERR_TASK_DTL ET_DTL
        ON ETASK.TEN_ID = ET_DTL.TEN_ID
       AND ETASK.ERR_TASK_UUID = ET_DTL.ERR_TASK_UUID
      LEFT OUTER JOIN TASK_STS TSTS
        ON ET_DTL.TEN_ID = TSTS.TEN_ID
       AND ET_DTL.TASK_STS_UUID = TSTS.TASK_STS_UUID
      LEFT OUTER JOIN MAIN_TASK MTASK
        ON TSTS.TEN_ID = MTASK.TEN_ID
       AND TSTS.MAIN_TASK_UUID = MTASK.MAIN_TASK_UUID
     WHERE ETASK.TEN_ID = #{g.tenant}
      AND ETASK.ERR_TASK_UUID = #{p.err_task_uuid}
      AND ET_DTL.ERR_TASK_DTL_UUID = #{p.err_task_dtl_uuid}
    </select>
    <select id="findListErrorTaskAuthty" resultType="map">
    /* workplace-monitoring.findListErrorTaskAuthty : 에러 업무 권한 조회 */
    SELECT ETASK.TEN_ID
         , ETASK.TASK_UUID
         , ETASK.ERR_TASK_UUID
         , ET_DTL.ERR_TASK_DTL_UUID
         , ET_AUTHTY.ERR_TASK_AUTHTY_UUID
         , ET_AUTHTY.AUTHTY_DIV_CCD
         , ET_AUTHTY.AUTHTY_CD
         , CASE WHEN ET_AUTHTY.AUTHTY_DIV_CCD = 'OORG'      /* 운영조직 */
                     THEN (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN LORG.LOGIC_ORG_NM
                                        ELSE (CASE WHEN LORG.LOGIC_ORG_NM_EN IS NULL  THEN LORG.LOGIC_ORG_NM
                                                  ELSE LORG.LOGIC_ORG_NM_EN
                                                  END)
                                   END
                             FROM OORG
                             LEFT OUTER JOIN LOGIC_ORG LORG
                               ON OORG.TEN_ID = LORG.TEN_ID
                              AND OORG.LOGIC_ORG_CD = LORG.LOGIC_ORG_CD
                              AND OORG.LOGIC_ORG_TYP_CCD = LORG.LOGIC_ORG_TYP_CCD
                            WHERE ET_AUTHTY.TEN_ID = OORG.TEN_ID
                              AND ET_AUTHTY.AUTHTY_DIV_CCD = 'OORG'
                              AND ET_AUTHTY.AUTHTY_CD = OORG.OORG_CD
                              AND OORG.STS != 'D')
                WHEN ET_AUTHTY.AUTHTY_DIV_CCD = 'BUYER'       /* 내부 사용자 */
                     THEN (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN USR.USR_NM
                                       ELSE (CASE WHEN USR.USR_NM_EN IS NULL  THEN USR.USR_NM
                                                 ELSE USR.USR_NM_EN
                                                 END)
                                   END
                             FROM USR
                            WHERE ET_AUTHTY.TEN_ID = USR.TEN_ID
                              AND ET_AUTHTY.AUTHTY_CD = USR.USR_ID)
                WHEN ET_AUTHTY.AUTHTY_DIV_CCD = 'VENDOR'     /* 협력사 */
                     THEN (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN VD.VD_NM
                                       ELSE (CASE WHEN VD.VD_NM_EN IS NULL  THEN VD.VD_NM
                                                 ELSE VD.VD_NM_EN
                                                 END)
                                   END
                             FROM VD
                            WHERE ET_AUTHTY.TEN_ID = VD.TEN_ID
                              AND ET_AUTHTY.AUTHTY_CD = VD.VD_CD)
                WHEN ET_AUTHTY.AUTHTY_DIV_CCD = 'PURC_GRP'    /* 구매그룹 */
                     THEN (SELECT CASE WHEN #{g.locale} = 'ko_KR' THEN PG.PURC_GRP_NM
                                       ELSE (CASE WHEN PG.PURC_GRP_NM_EN IS NULL  THEN PG.PURC_GRP_NM
                                                 ELSE PG.PURC_GRP_NM_EN
                                                 END)
                                   END
                            FROM PURC_GRP PG
                           WHERE ET_AUTHTY.TEN_ID = PG.TEN_ID
                             AND ET_AUTHTY.AUTHTY_CD = PG.PURC_GRP_CD
                             AND PG.PURC_GRP_TYP_CCD = 'PURC'
                             AND PG.CO_CD = #{g.comp_cd})
              END AUTHTY_LABEL
        FROM ERR_TASK ETASK
       INNER JOIN ERR_TASK_DTL ET_DTL
          ON ETASK.TEN_ID = ET_DTL.TEN_ID
         AND ETASK.ERR_TASK_UUID = ET_DTL.ERR_TASK_UUID
        LEFT OUTER JOIN ERR_TASK_AUTHTY ET_AUTHTY
          ON ET_DTL.TEN_ID = ET_AUTHTY.TEN_ID
         AND ET_DTL.ERR_TASK_DTL_UUID = ET_AUTHTY.ERR_TASK_DTL_UUID
       WHERE ETASK.TEN_ID = #{g.tenant}
         AND ETASK.ERR_TASK_UUID = #{p.err_task_uuid}
         AND ET_DTL.ERR_TASK_DTL_UUID = #{p.err_task_dtl_uuid}
    </select>
	<resultMap id="findListDatSrcUsed-resultMap" type="java.util.HashMap">
		<id column="TEN_ID" property="ten_id"/>
		<id column="DAT_SRC_UUID" property="dat_src_uuid"/>
		<id column="DAT_SRC_PHYC_NM" property="dat_src_phyc_nm"/>
        <collection javaType="list" property="taskStsList" resultMap="taskSts-resultMap"/>
	</resultMap>
    <resultMap id="taskSts-resultMap" type="map">
        <id column="TASK_STS_UUID" property="task_sts_uuid"/>
        <result column="TASK_STS_DTL_CCD" property="task_sts_dtl_ccd"/>
    </resultMap>
    <select id="findListDatSrcUsed" resultMap="findListDatSrcUsed-resultMap">
     /* workplace-monitoring.findListDatSrcUsed : 유효한 데이터 소스 목록 조회 (현재 사용중 상태인 TASK_STS 데이터에 연결된 DAT_SRC_PHYC_NM를 조회) */
    SELECT DISTINCT
           DSRC.TEN_ID
         , DSRC.DAT_SRC_UUID
         , DSRC.DAT_SRC_PHYC_NM
         , TSTS.TASK_STS_UUID
         , TSTS.TASK_STS_DTL_CCD
      FROM MAIN_TASK MTASK
     INNER JOIN TASK_STS TSTS
        ON MTASK.TEN_ID = TSTS.TEN_ID
       AND MTASK.MAIN_TASK_UUID = TSTS.MAIN_TASK_UUID
       AND TSTS.STS != 'D'
       AND TSTS.USE_YN = 'Y'
     INNER JOIN DAT_SRC DSRC
        ON TSTS.TEN_ID = DSRC.TEN_ID
       AND TSTS.DAT_SRC_UUID = DSRC.DAT_SRC_UUID
     WHERE MTASK.TEN_ID = #{g.tenant}
       AND MTASK.STS != 'D'
      <choose>
        <when test="p.taskStsList != null and p.taskStsList.size() &gt; 0">
            AND TSTS.TASK_STS_CCD  IN
            <foreach close=")" collection="p.taskStsList" item="taskSts" open="(" separator=",">
                #{taskSts.task_sts_uuid}
            </foreach>
        </when>
    </choose>
    </select>
    <insert id="insertErrorTaskInfo">
        /* workplace-monitoring.insertErrorTaskInfo : task 오류 목록 저장 (task 미생성 / 미삭제 / 미변경 ) */  INSERT INTO ERR_TASK (
            TEN_ID
          , ERR_TASK_UUID
          , TASK_UUID
          , ERR_TYP_CCD
          , STS
          , REGR_ID
          , REG_DTTM
          , MODR_ID
          , MOD_DTTM
		) SELECT TEN_ID
		       , RANDOMUUID  , TASK_UUID
               , ERR_TYP
               , 'C'
               , #{g.username}
               , #{g.now}
               , #{g.username}
               , #{g.now}
            FROM (
					<include refid="sql_with_as_insert_error_task_info">
						<property name="dataSrc" value="dataSrc"/>
					</include> SELECT DISTINCT TEN_ID
                                , TASK_UUID
                                , ERR_TYP /* 미생성 / 미삭제 / 미변경 / 미변경_권한 */
                    FROM (SELECT DAT.TEN_ID
                               , DAT.TASK_UUID
                               -- TASK_UUID 가 다 건 존재하는 경우 : 업무 상태 정의 확인 필요. 한 업무 KEY가 동일 데이터소스 내에 존재하는 경우
                               , CASE WHEN DAT1.TASK_STS_UUID_CNT <![CDATA[>]]> 2 THEN 'INVALID_SETTING'
                                      --  TASK_UUID 가 한 건만 존재하는 경우
                                      WHEN DAT2.TASK_STS_UUID_CNT = 1
                                      THEN CASE WHEN DAT2.DAT_SRC_TYP_CCD = 'TASK' THEN 'NOT_DEL' -- TASK만 존재 -&gt; TASK 미삭제
                                                WHEN DAT2.DAT_SRC_TYP_CCD = 'DAT_SRC' THEN 'NOT_EXIST' -- DAT_SRC만 존재 -&gt; TASK 미생성
                                            END
                                      --  TASK_UUID 가 두 건 존재하는 경우
		                              WHEN DAT2.TASK_STS_UUID_CNT <![CDATA[>]]> 1   -- = 2
		                              THEN CASE WHEN DAT2.DAT_CNT != 1
		                                        THEN 'NOT_CHG' -- 업무 제목, 마감일자, 지연 표시 시작 일자, 임박 표시 시작 일자, 권한자가 다른 경우.
		                                        ELSE 'VALID'
		                                    END
                                  END ERR_TYP
                            FROM DAT DAT
                            LEFT OUTER JOIN (SELECT TEN_ID
                                                  , TASK_UUID
                                                  , DAT_SRC_TYP_CCD
                                                  , COUNT(DISTINCT TASK_STS_UUID) AS TASK_STS_UUID_CNT
                                               FROM DAT
                                              GROUP BY TEN_ID, TASK_UUID, DAT_SRC_TYP_CCD
                                            ) DAT1
                              ON DAT.TEN_ID = DAT1.TEN_ID
                             AND DAT.TASK_UUID = DAT1.TASK_UUID
                             AND DAT.DAT_SRC_TYP_CCD = DAT1.DAT_SRC_TYP_CCD
                            LEFT OUTER JOIN (SELECT TEN_ID
                                                  , TASK_UUID
                                                  , MAX(DAT_SRC_TYP_CCD) AS DAT_SRC_TYP_CCD
                                                  , COUNT(DISTINCT TASK_STS_UUID) AS TASK_STS_UUID_CNT
                                                  , COUNT(DISTINCT COALESCE(NULLIF(DAT.TASK_TIT, ''), 'X') || '_' || COALESCE(NULLIF(DAT.CLSG_DT, ''), 'X') || '_' || COALESCE(NULLIF(DAT.DELAY_DSPY_ST_DT, ''), 'X') || '_' || COALESCE(NULLIF(DAT.IMMNT_DSPY_ST_DT, ''), 'X') || '_' || COALESCE(NULLIF(DAT.AUTHTY_LIST, ''), 'X')) AS DAT_CNT  FROM DAT
                                              GROUP BY TEN_ID, TASK_UUID
                                            ) DAT2
                              ON DAT.TEN_ID = DAT2.TEN_ID
                             AND DAT.TASK_UUID = DAT2.TASK_UUID
                         ) ERR_TASK
                   WHERE ERR_TASK.ERR_TYP != 'VALID'
                 ) ERR_TASK_INFO
    </insert>
	<sql id="sql_with_as_insert_error_task_info">
	    WITH DAT (
	          TEN_ID
	        , TASK_UUID
	        , TASK_STS_GRP_CCD
	        , TASK_STS_DTL_CCD
	        , TASK_STS_UUID
	        , TASK_TIT
	        , CLSG_DT
	        , DELAY_DSPY_ST_DT
	        , IMMNT_DSPY_ST_DT
	        , DAT_SRC_TYP_CCD
	        , DAT_SRC_PHYC_NM
	        , DAT_SRC_UUID
	        , AUTHTY_LIST)
	       AS (
	           SELECT TASK.TEN_ID
			        , TASK.TASK_UUID
			        , TSTS.TASK_STS_GRP_CCD
			        , TSTS.TASK_STS_DTL_CCD
			        , TSTS.TASK_STS_UUID AS TASK_STS_UUID
			        , TASK.TASK_TIT
			        , (CASE WHEN CLSD_DT_CHG.PRE_CLSG_DT IS NULL  THEN TASK.CLSG_DT
					        ELSE CLSD_DT_CHG.PRE_CLSG_DT
					    END) AS CLSG_DT
			        , TASK.DELAY_DSPY_ST_DT
			        , TASK.IMMNT_DSPY_ST_DT
			        , 'TASK' AS DAT_SRC_TYP_CCD
			        , 'TASK' AS DAT_SRC_PHYC_NM
			        , TSTS.DAT_SRC_UUID
	                , (SELECT LISTAGG(TAUTH.AUTHTY_DIV_CCD || '_' || TAUTH.AUTHTY_CD) WITHIN GROUP(ORDER BY AUTHTY_DIV_CCD, AUTHTY_CD)
				 	     FROM TASK_AUTHTY TAUTH
				 	    WHERE TASK.TEN_ID = TAUTH.TEN_ID
				 	      AND TASK.TASK_UUID = TAUTH.TASK_UUID
					  ) AS AUTHTY_LIST  FROM MAIN_TASK MTASK
		        INNER JOIN TASK_STS TSTS
				   ON MTASK.TEN_ID = TSTS.TEN_ID
				  AND MTASK.MAIN_TASK_UUID = TSTS.MAIN_TASK_UUID
				  AND TSTS.USE_YN = 'Y'
			 	  AND TSTS.STS != 'D'
			    INNER JOIN TASK
				   ON TSTS.TEN_ID = TASK.TEN_ID
				  AND TSTS.TASK_STS_UUID = TASK.TASK_STS_UUID
				  AND TASK.STS != 'D'
			     LEFT OUTER JOIN (SELECT CLSD_DT_CHG.TEN_ID
			                           , CLSD_DT_CHG.TASK_UUID
			                           , CLSD_DT_CHG.PRE_CLSG_DT
			                           , ROW_NUMBER() OVER(ORDER BY CLSD_DT_CHG.REG_DTTM) RN
				                    FROM TASK_CLSG_DT_CHG CLSD_DT_CHG
				                   WHERE CLSD_DT_CHG.TEN_ID = #{g.tenant}
			                     ) CLSD_DT_CHG
				   ON TASK.TEN_ID = CLSD_DT_CHG.TEN_ID
				  AND TASK.TASK_UUID = CLSD_DT_CHG.TASK_UUID
				  AND CLSD_DT_CHG.RN = 1
		        WHERE MTASK.TEN_ID = #{g.tenant}
			      AND MTASK.STS != 'D'
		<if test="p.datSrcList != null and p.datSrcList.size() &gt; 0">
			<foreach collection="p.datSrcList" item="datSrc">
				UNION ALL
			   SELECT SRC.TASK_TEN_ID AS TEN_ID
					, SRC.TASK_UUID AS TASK_UUID
					, TSTS.TASK_STS_GRP_CCD AS TASK_STS_GRP_CCD
					, SRC.TASK_STS_CCD AS TASK_STS_DTL_CCD
					, TSTS.TASK_STS_UUID AS TASK_STS_UUID
					, SRC.TASK_TIT AS TASK_TIT
					, SRC.TASK_CLSG_DT AS CLSG_DT
				    , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT, 'YYYYMMDD') AS DELAY_DSPY_ST_DT
				    , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT - TSTS.IMMNT_NOFN_CRTRA_DCNT, 'YYYYMMDD') AS IMMNT_DSPY_ST_DT  , 'DAT_SRC'
				    , DSRC.DAT_SRC_PHYC_NM
				    , TSTS.DAT_SRC_UUID
					, LISTAGG(SRC.TASK_AUTHTY_DIV_CCD || '_' || SRC.TASK_AUTHTY_CD) WITHIN GROUP(ORDER BY SRC.TASK_AUTHTY_DIV_CCD, SRC.TASK_AUTHTY_CD)  FROM MAIN_TASK MTASK
				INNER JOIN TASK_STS TSTS
				   ON MTASK.TEN_ID = TSTS.TEN_ID
				  AND MTASK.MAIN_TASK_UUID = TSTS.MAIN_TASK_UUID
				  AND TSTS.USE_YN = 'Y'
			      AND TSTS.STS != 'D'
				INNER JOIN DAT_SRC DSRC
			  	   ON TSTS.TEN_ID = DSRC.TEN_ID
				  AND TSTS.DAT_SRC_UUID = DSRC.DAT_SRC_UUID
				  AND DSRC.DAT_SRC_UUID = #{datSrc.dat_src_uuid}
				INNER JOIN ${datSrc.dat_src_phyc_nm} SRC
				   ON DSRC.TEN_ID = SRC.TASK_TEN_ID
				  AND TSTS.TASK_STS_DTL_CCD = SRC.TASK_STS_CCD
				WHERE SRC.TASK_TEN_ID = #{g.tenant}
				  AND SRC.TASK_STS_CCD IN
				<foreach close=")" collection="datSrc.taskStsList" item="taskSts" open="(" separator=",">
				    #{taskSts.task_sts_dtl_ccd}
				</foreach>
				GROUP BY SRC.TASK_TEN_ID
					   , SRC.TASK_UUID
					   , TSTS.TASK_STS_GRP_CCD
					   , SRC.TASK_STS_CCD
					   , TSTS.TASK_STS_UUID
					   , SRC.TASK_TIT
					   , SRC.TASK_CLSG_DT
					   , TSTS.DELAY_NOFN_CRTRA_DCNT
					   , TSTS.IMMNT_NOFN_CRTRA_DCNT
					   , DSRC.DAT_SRC_PHYC_NM
					   , TSTS.DAT_SRC_UUID
			   </foreach>
		   </if>
	    )
	</sql>
    <insert id="insertErrorTaskDetailInfo">
    /* workplace-monitoring.insertErrorTaskDetailInfo : 에러 업무 상세 정보 저장 */
    INSERT INTO ERR_TASK_DTL (
                TEN_ID
              , ERR_TASK_DTL_UUID
              , ERR_TASK_UUID
              , DAT_SRC_TYP_CCD
              , TASK_STS_UUID
              , CLSG_DT
              , TASK_TIT
              , DELAY_DSPY_ST_DT
              , IMMNT_DSPY_ST_DT
              , DAT_SRC_UUID
              , STS
              , REGR_ID
              , REG_DTTM
              , MODR_ID
              , MOD_DTTM
      ) SELECT DAT.TEN_ID
             , RANDOMUUID  , DAT.ERR_TASK_UUID
             , DAT.DAT_SRC_TYP_CCD
             , DAT.TASK_STS_UUID
             , DAT.CLSG_DT
             , DAT.TASK_TIT
             , DAT.DELAY_DSPY_ST_DT
             , DAT.IMMNT_DSPY_ST_DT
             , DAT.DAT_SRC_UUID
             , 'C'
             , #{g.username}
             , #{g.now}
             , #{g.username}
             , #{g.now}
          FROM (
                SELECT TASK.TEN_ID
                     , TASK.TASK_UUID
                     , TSTS.TASK_STS_GRP_CCD
                     , TSTS.TASK_STS_DTL_CCD
                     , TSTS.TASK_STS_UUID AS TASK_STS_UUID
                     , TASK.TASK_TIT
                     , (CASE WHEN CLSD_DT_CHG.PRE_CLSG_DT IS NULL OR CLSD_DT_CHG.PRE_CLSG_DT = '' THEN TASK.CLSG_DT ELSE CLSD_DT_CHG.PRE_CLSG_DT END) CLSG_DT
                     , TASK.DELAY_DSPY_ST_DT
                     , TASK.IMMNT_DSPY_ST_DT
                     , 'TASK' AS DAT_SRC_TYP_CCD
                     , 'TASK' AS DAT_SRC_PHYC_NM
                     , TSTS.DAT_SRC_UUID
                     , ETASK.ERR_TASK_UUID
                  FROM MAIN_TASK MTASK
                 INNER JOIN TASK_STS TSTS
                    ON MTASK.TEN_ID = TSTS.TEN_ID
                   AND MTASK.MAIN_TASK_UUID = TSTS.MAIN_TASK_UUID
                   AND TSTS.USE_YN = 'Y'
                   AND TSTS.STS != 'D'
                 INNER JOIN TASK
                    ON TSTS.TEN_ID = TASK.TEN_ID
                   AND TSTS.TASK_STS_UUID = TASK.TASK_STS_UUID
                   AND TASK.STS != 'D'
                   LEFT OUTER JOIN (
                        SELECT CLSD_DT_CHG.TEN_ID
                             , CLSD_DT_CHG.TASK_UUID
                             , CLSD_DT_CHG.PRE_CLSG_DT
                             , ROW_NUMBER() OVER(ORDER BY CLSD_DT_CHG.REG_DTTM ASC) RN
                          FROM TASK_CLSG_DT_CHG CLSD_DT_CHG
                         WHERE CLSD_DT_CHG.TEN_ID = #{g.tenant}
                     ) CLSD_DT_CHG
                    ON TASK.TEN_ID = CLSD_DT_CHG.TEN_ID
                   AND TASK.TASK_UUID = CLSD_DT_CHG.TASK_UUID
                   AND CLSD_DT_CHG.RN = 1
                 INNER JOIN ERR_TASK ETASK
                    ON TASK.TEN_ID = ETASK.TEN_ID
                   AND TASK.TASK_UUID = ETASK.TASK_UUID
                 WHERE MTASK.TEN_ID = #{g.tenant}
                   AND MTASK.STS != 'D'
        <if test="p.datSrcList != null and p.datSrcList.size() &gt; 0">
            <foreach collection="p.datSrcList" item="datSrc">
                UNION ALL
               SELECT SRC.TASK_TEN_ID AS TEN_ID
                    , SRC.TASK_UUID
                    , TSTS.TASK_STS_GRP_CCD AS TASK_STS_GRP_CCD
                    , SRC.TASK_STS_CCD      AS TASK_STS_DTL_CCD
                    , TSTS.TASK_STS_UUID    AS TASK_STS_UUID
                    , SRC.TASK_TIT          AS TASK_TIT
                    , SRC.TASK_CLSG_DT       AS CLSG_DT
                    , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT, 'YYYYMMDD') AS DELAY_DSPY_ST_DT
                    , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT - TSTS.IMMNT_NOFN_CRTRA_DCNT, 'YYYYMMDD') AS IMMNT_DSPY_ST_DT  , 'DAT_SRC'
                    , DSRC.DAT_SRC_PHYC_NM
                    , TSTS.DAT_SRC_UUID
                    , ETASK.ERR_TASK_UUID
                 FROM MAIN_TASK MTASK
                INNER JOIN TASK_STS TSTS
                   ON MTASK.TEN_ID = TSTS.TEN_ID
                  AND MTASK.MAIN_TASK_UUID = TSTS.MAIN_TASK_UUID
                  AND TSTS.USE_YN = 'Y'
                  AND TSTS.STS != 'D'
                INNER JOIN DAT_SRC DSRC
                   ON TSTS.TEN_ID = DSRC.TEN_ID
                  AND TSTS.DAT_SRC_UUID = DSRC.DAT_SRC_UUID
                  AND DSRC.DAT_SRC_UUID = #{datSrc.dat_src_uuid}
                INNER JOIN ${datSrc.dat_src_phyc_nm} SRC
                   ON DSRC.TEN_ID = SRC.TASK_TEN_ID
                  AND TSTS.TASK_STS_DTL_CCD = SRC.TASK_STS_CCD
                INNER JOIN ERR_TASK ETASK
                   ON SRC.TASK_TEN_ID = ETASK.TEN_ID
                  AND SRC.TASK_UUID = ETASK.TASK_UUID
                WHERE SRC.TASK_TEN_ID = #{g.tenant}
                  AND SRC.TASK_STS_CCD  IN
                <foreach close=")" collection="datSrc.taskStsList" item="taskSts" open="(" separator=",">
                    #{taskSts.task_sts_dtl_ccd}
                </foreach>
                GROUP BY SRC.TASK_TEN_ID
                    , SRC.TASK_UUID
                    , TSTS.TASK_STS_GRP_CCD
                    , SRC.TASK_STS_CCD
                    , TSTS.TASK_STS_UUID
                    , SRC.TASK_TIT
                    , SRC.TASK_CLSG_DT
                    , TSTS.DELAY_NOFN_CRTRA_DCNT
                    , TSTS.IMMNT_NOFN_CRTRA_DCNT
                    , DSRC.DAT_SRC_PHYC_NM
                    , TSTS.DAT_SRC_UUID
                    , ETASK.ERR_TASK_UUID
            </foreach>
        </if>
        ) DAT
    </insert>
    <insert id="insertErrorTaskAuthtyInfoByTask">
    /* workplace-monitoring.insertErrorTaskAuthtyInfoByTask : task의 권한자를 저장한다. */
    INSERT INTO ERR_TASK_AUTHTY (
                TEN_ID
              , ERR_TASK_AUTHTY_UUID
              , ERR_TASK_DTL_UUID
              , ERR_TASK_UUID
              , DAT_SRC_TYP_CCD
              , AUTHTY_DIV_CCD
              , AUTHTY_CD
              , STS
              , REGR_ID
              , REG_DTTM
              , MODR_ID
              , MOD_DTTM
     )   SELECT TAUTHTY.TEN_ID
              , RANDOMUUID  , ET_DTL.ERR_TASK_DTL_UUID
              , ETASK.ERR_TASK_UUID
              , 'TASK'
              , TAUTHTY.AUTHTY_DIV_CCD
              , TAUTHTY.AUTHTY_CD
              , 'C'
              , #{g.username}
              , #{g.now}
              , #{g.username}
              , #{g.now}
           FROM ERR_TASK ETASK
          INNER JOIN ERR_TASK_DTL ET_DTL
             ON ETASK.TEN_ID = ET_DTL.TEN_ID
             AND ETASK.ERR_TASK_UUID = ET_DTL.ERR_TASK_UUID
          INNER JOIN TASK
             ON ETASK.TEN_ID = TASK.TEN_ID
            AND ETASK.TASK_UUID = TASK.TASK_UUID
            AND TASK.STS != 'D'
          INNER JOIN TASK_AUTHTY TAUTHTY
             ON TASK.TEN_ID = TAUTHTY.TEN_ID
            AND TASK.TASK_UUID = TAUTHTY.TASK_UUID
          WHERE ET_DTL.TEN_ID = #{g.tenant}
            AND ET_DTL.STS != 'D'
    </insert>
    <insert id="insertErrorTaskAuthtyInfoByDatSrc">
    /* workplace-monitoring.insertErrorTaskAuthtyInfoByDatSrc : task의 권한자를 저장한다. */
    INSERT INTO ERR_TASK_AUTHTY (
           TEN_ID
         , ERR_TASK_AUTHTY_UUID
         , ERR_TASK_DTL_UUID
         , ERR_TASK_UUID
         , DAT_SRC_TYP_CCD
         , AUTHTY_DIV_CCD
         , AUTHTY_CD
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
   ) SELECT SRC.TEN_ID
         , RANDOMUUID  , SRC.ERR_TASK_DTL_UUID
         , SRC.ERR_TASK_UUID
         , 'DAT_SRC'
         , SRC.AUTHTY_DIV_CCD
         , SRC.AUTHTY_CD
         , 'C'
         , #{g.username}
         , #{g.now}
         , #{g.username}
         , #{g.now}
      FROM (
      <choose>
        <when test="p.datSrcList == null or p.datSrcList.size() == 0">
            SELECT '' AS TEN_ID
                 , ''
                 , '' AS ERR_TASK_DTL_UUID
                 , '' AS ERR_TASK_UUID
                 , '' AS AUTHTY_DIV_CCD
                 , '' AS AUTHTY_CD
             FROM DUM_TBL
            WHERE 1 = 0
        </when>
        <otherwise>
            <foreach collection="p.datSrcList" item="datSrc" separator="UNION ALL">
            SELECT SRC.TASK_TEN_ID AS TEN_ID
                 , ET_DTL.ERR_TASK_DTL_UUID
                 , ETASK.ERR_TASK_UUID
                 , SRC.TASK_AUTHTY_DIV_CCD AS AUTHTY_DIV_CCD
                 , SRC.TASK_AUTHTY_CD      AS AUTHTY_CD
              FROM ERR_TASK ETASK
             INNER JOIN ERR_TASK_DTL ET_DTL
                ON ETASK.TEN_ID = ET_DTL.TEN_ID
               AND ETASK.ERR_TASK_UUID = ET_DTL.ERR_TASK_UUID
             INNER JOIN ${datSrc.dat_src_phyc_nm} SRC
                ON ET_DTL.TEN_ID = SRC.TASK_TEN_ID
               AND ETASK.TASK_UUID = SRC.TASK_UUID
             WHERE ETASK.TEN_ID = #{g.tenant}
               AND ETASK.STS != 'D'
               AND SRC. TASK_STS_CCD IN
               <foreach close=")" collection="datSrc.taskStsList" item="taskSts" open="(" separator=",">
                   #{taskSts.task_sts_dtl_ccd}
               </foreach>
            </foreach>
         </otherwise>
       </choose>
       ) SRC
    </insert>
    <insert id="insertErrorTask">
     /* workplace-monitoring.insertErrorTask : 에러 업무 저장 */
     INSERT INTO ERR_TASK (
            TEN_ID
          , ERR_TASK_UUID
          , TASK_UUID
          , ERR_TYP_CCD
          , REGR_ID
          , REG_DTTM
          , MODR_ID
          , MOD_DTTM
     ) VALUES (
            #{g.tenant}
          , #{p.err_task_uuid}
          , #{p.task_uuid}
          , #{p.err_typ_ccd}
          , #{g.username}
          , #{g.now}
          , #{g.username}
          , #{g.now}
     )
    </insert>
    <insert id="insertErrorTaskDtl">
     /* workplace-monitoring.insertErrorTaskDtl : 에러 업무 상세 데이터 저장 */
     INSERT INTO ERR_TASK_DTL (
            TEN_ID
          , ERR_TASK_DTL_UUID
          , ERR_TASK_UUID
          , DAT_SRC_TYP_CCD
          , TASK_STS_UUID
          , CLSG_DT
          , TASK_TIT
          , DELAY_DSPY_ST_DT
          , IMMNT_DSPY_ST_DT
          , DAT_SRC_UUID
          , REGR_ID
          , REG_DTTM
          , MODR_ID
          , MOD_DTTM
     ) VALUES (
            #{g.tenant}
          , #{p.err_task_dtl_uuid}
          , #{p.err_task_uuid}
          , #{p.dat_src_typ_ccd}
          , #{p.task_sts_uuid}
          , #{p.clsg_dt}
          , #{p.task_tit}
          , #{p.delay_dspy_st_dt}
          , #{p.immnt_dspy_st_dt}
          , #{p.dat_src_uuid}
          , #{g.username}
          , #{g.now}
          , #{g.username}
          , #{g.now}
     )
    </insert>
    <insert id="insertErrorTaskAuthtyByTask">
    /* workplace-monitoring.insertErrorTaskAuthtyByTask : task의 권한자를 저장한다. */
    INSERT INTO ERR_TASK_AUTHTY (
           TEN_ID
         , ERR_TASK_AUTHTY_UUID
         , ERR_TASK_DTL_UUID
         , ERR_TASK_UUID
         , DAT_SRC_TYP_CCD
         , AUTHTY_DIV_CCD
         , AUTHTY_CD
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT TAUTHTY.TEN_ID
         , RANDOMUUID  , #{p.err_task_dtl_uuid}
         , #{p.err_task_uuid}
         , #{p.dat_src_typ_ccd}
         , TAUTHTY.AUTHTY_DIV_CCD
         , TAUTHTY.AUTHTY_CD
         , #{g.username}
         , #{g.now}
         , #{g.username}
         , #{g.now}
      FROM TASK
     INNER JOIN TASK_AUTHTY TAUTHTY
       ON TASK.TEN_ID = TAUTHTY.TEN_ID
      AND TASK.TASK_UUID = TAUTHTY.TASK_UUID
    WHERE TAUTHTY.TEN_ID = #{g.tenant}
      AND TAUTHTY.TASK_UUID = #{p.task_uuid}
      AND TASK.TASK_STS_UUID = #{p.task_sts_uuid}
    </insert>
    <insert id="insertErrorTaskAuthtyByDatSrc">
    /* workplace-monitoring.insertErrorTaskAuthtyByDatSrc : task의 권한자를 저장한다. */
    INSERT INTO ERR_TASK_AUTHTY (
           TEN_ID
         , ERR_TASK_AUTHTY_UUID
         , ERR_TASK_DTL_UUID
         , ERR_TASK_UUID
         , DAT_SRC_TYP_CCD
         , AUTHTY_DIV_CCD
         , AUTHTY_CD
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT DAT_SRC.TASK_TEN_ID
         , RANDOMUUID  , #{p.err_task_dtl_uuid}
         , #{p.err_task_uuid}
         , #{p.dat_src_typ_ccd}
         , DAT_SRC.TASK_AUTHTY_DIV_CCD
         , DAT_SRC.TASK_AUTHTY_CD
         , #{g.username}
         , #{g.now}
         , #{g.username}
         , #{g.now}
      FROM #{p.dat_src_phyc_nm} DAT_SRC
     WHERE DAT_SRC.TEN_ID = #{g.tenant}
       AND DAT_SRC.TASK_UUID = #{p.task_uuid}
       AND DAT_SRC.TASK_STS_CCD = #{p.task_sts_dtl_ccd}
    </insert>
    <delete id="deleteErrorTaskAuthty">
    /* workplace-monitoring.deleteErrorTaskAuthty */
    DELETE
      FROM ERR_TASK_AUTHTY
    </delete>
    <delete id="deleteErrorTaskDetail">
    /* workplace-monitoring.deleteErrorTaskDetail */
    DELETE
      FROM ERR_TASK_DTL
    </delete>
    <delete id="deleteErrorTask">
    /* workplace-monitoring.deleteErrorTask */
    DELETE
      FROM ERR_TASK
    </delete>
    <select id="findTaskConfigByTaskStsUuid" resultType="map">
    /* workplace-monitoring.findTaskConfigByTaskStsUuid */
    SELECT MT.MAIN_TASK_UUID
         , MT.MAIN_TASK_CD
         , TS.TASK_STS_UUID
         , TS.TASK_STS_CD
         , TS.MENU_CD
         , TS.TASK_STS_GRP_CCD
         , TS.TASK_STS_DTL_CCD
         , TS.DELAY_NOFN_CRTRA_DCNT  /* 지연 통보 기준 일수 */
         , TS.IMMNT_NOFN_CRTRA_DCNT  /* 임박 통보 기준 일수 */
         , TS.NEW_NOFN_PD_DCNT       /* 신규 통보 기준 일수 */
         , DS.DAT_SRC_PHYC_NM        /* 데이터 소스 물리 명 */
      FROM MAIN_TASK MT
     INNER JOIN TASK_STS TS
        ON TS.TEN_ID           = MT.TEN_ID
       AND TS.MAIN_TASK_UUID   = MT.MAIN_TASK_UUID
       AND TS.STS              <![CDATA[<>]]> 'D'
       AND TS.USE_YN           = 'Y'
     INNER JOIN DAT_SRC DS
        ON DS.TEN_ID           = TS.TEN_ID
       AND DS.DAT_SRC_UUID     = TS.DAT_SRC_UUID
     WHERE TS.TEN_ID           = #{g.tenant}
       AND TS.TASK_STS_UUID    = #{p.task_sts_uuid}
       AND MT.STS              <![CDATA[<>]]> 'D'
    </select>
    <insert id="insertTaskByDatSrc">
    /* workplace-monitoring.insertTaskByDatSrc */
    <bind name="nowDate" value="g.getFormatNow(g.now, 'yyyyMMdd')"/>
    INSERT INTO TASK (
           TEN_ID
         , TASK_UUID
         , TASK_STS_UUID
         , TASK_TIT
         , CLSG_DT
         , DELAY_DSPY_ST_DT
         , IMMNT_DSPY_ST_DT
         , NEW_DSPY_ED_DT
         , SNDR_ID
         , SND_DTTM
         , RMK
         , STS
         , REGR_ID
         , REG_DTTM
         , MODR_ID
         , MOD_DTTM
    )
    SELECT TSTS.TEN_ID
         , SRC.TASK_UUID
         , TSTS.TASK_STS_UUID
         , SRC.TASK_TIT
         , SRC.TASK_CLSG_DT
         , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT, 'YYYYMMDD')  /* 지연 표시 시작 일자  */
         , TO_CHAR(TO_DATE(SRC.TASK_CLSG_DT, 'YYYYMMDD') - TSTS.DELAY_NOFN_CRTRA_DCNT - TSTS.IMMNT_NOFN_CRTRA_DCNT, 'YYYYMMDD') /* 임박 표시 시작 일자  */
         , TO_CHAR(TO_DATE(#{nowDate}, 'YYYYMMDD') + TSTS.NEW_NOFN_PD_DCNT, 'YYYYMMDD')    /* 신규 표시 시작 일자  */  , #{g.username}
         , #{g.now}
         , NULL
         , 'C'
         , #{g.username}
         , #{g.now}
         , #{g.username}
         , #{g.now}
       FROM TASK_STS TSTS
      INNER JOIN (
            SELECT SRC.TASK_TEN_ID
                 , SRC.TASK_UUID
                 , SRC.TASK_TIT
                 , SRC.TASK_CLSG_DT
              FROM ${p.dat_src_phyc_nm} SRC
             WHERE SRC.TASK_TEN_ID = #{g.tenant}
               AND SRC.TASK_UUID = #{p.task_uuid}
               AND SRC.TASK_STS_CCD = #{p.task_sts_dtl_ccd}
             GROUP BY SRC.TASK_TEN_ID
                    , SRC.TASK_UUID
                    , SRC.TASK_TIT
                    , SRC.TASK_CLSG_DT
          ) SRC
         ON TSTS.TEN_ID = SRC.TASK_TEN_ID
        AND SRC.TASK_UUID = #{p.task_uuid}
      WHERE TSTS.TEN_ID = #{g.tenant}
        AND TSTS.TASK_STS_UUID = #{p.task_sts_uuid}
    </insert>
    <insert id="insertTaskAuthtyByDatSrc">
    /* workplace-monitoring.insertTaskAuthtyByDatSrc */
     INSERT INTO TASK_AUTHTY (
            TEN_ID
          , TASK_AUTHTY_UUID
          , TASK_UUID
          , AUTHTY_DIV_CCD
          , AUTHTY_CD
     )
     SELECT TSTS.TEN_ID
          , RANDOMUUID  , SRC.TASK_UUID
          , SRC.TASK_AUTHTY_DIV_CCD
          , SRC.TASK_AUTHTY_CD
       FROM TASK_STS TSTS
      INNER JOIN (
            SELECT SRC.TASK_TEN_ID
                 , SRC.TASK_UUID
                 , SRC.TASK_AUTHTY_DIV_CCD
                 , SRC.TASK_AUTHTY_CD
              FROM ${p.dat_src_phyc_nm} SRC
             WHERE SRC.TASK_TEN_ID = #{g.tenant}
               AND SRC.TASK_UUID = #{p.task_uuid}
               AND SRC.TASK_STS_CCD = #{p.task_sts_dtl_ccd}
          ) SRC
        ON TSTS.TEN_ID = SRC.TASK_TEN_ID
       AND SRC.TASK_UUID = #{p.task_uuid}
     WHERE TSTS.TEN_ID = #{g.tenant}
       AND TSTS.TASK_STS_UUID = #{p.task_sts_uuid}
    </insert>
</mapper>
