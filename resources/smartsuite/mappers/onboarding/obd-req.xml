<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="obd-req">
    <!-- 협력사 목록 조회 (운영조직 등록 여부 무관) -->
    <select id="findListVendorAll" resultType="map">
        /* obd-req.findListVendorAll : 온보딩 요청 대상인 협력사 목록 조회 */
        SELECT CUR.VD_CD,                       /* 협력사 코드*/
               CUR.OORG_CD,                     /* 운영조직 코드*/
               CUR.VD_OORG_UUID,                /* 협력사 운영 조직 정보 아이디*/
               CUR.OBD_TYP_CCD,                 /* 온보딩 유형 공통코드(등록유형)*/
               CUR.PO_POSS_YN,                  /* 거래가능여부(거래상태)*/
               CASE WHEN 'ko_KR' = #{g.locale} THEN LORG.LOGIC_ORG_NM
                    ELSE LORG.LOGIC_ORG_NM_EN  END AS ORG_NM,  /* 운영조직 명*/
               CUR.ERP_VD_CD,                   /* ERP 협력사 코드*/
               CUR.VD_NM,                       /* 협력사 명*/
               CUR.VD_NM_EN,                    /* 협력사 영문 명*/
               CUR.BIZREGNO,                    /* 사업자 등록 번호*/
               CUR.CORPNO,                      /* 법인번호*/
               CUR.HQ_BIZREGNO,                 /* 본사사업자등록번호*/
               CUR.TAX_ID,                      /* 세금 아이디(TAX ID)*/
               CUR.EU_VAT_REG_ID,               /* EU VAT 등록 아이디*/
               CUR.CTRY_CCD,                    /* 국가 코드*/
               --CONCAT( CONCAT(CUR.DTL_ADDR_1, ' '), CONCAT(CUR.DTL_ADDR_2, ' ') ) AS ADDR_INFO,  /* 주소*/
               CASE WHEN 'ko_KR' = #{g.locale} THEN CONCAT( CONCAT(CUR.DTL_ADDR_1, ' '), CONCAT(CUR.DTL_ADDR_2, ' ') )
                    ELSE CASE WHEN CUR.DTL_ADDR_EN_1 IS NOT NULL  THEN CONCAT( CONCAT(CUR.DTL_ADDR_EN_1, ' '), CONCAT(CUR.DTL_ADDR_EN_2, ' ') )
                    ELSE CONCAT( CONCAT(CUR.DTL_ADDR_1, ' '), CONCAT(CUR.DTL_ADDR_2, ' ') ) END END AS ADDR_INFO,  /* 주소*/
               CUR.MODR_ID,                     /* 수정자 아이디*/
               CUR.MOD_DTTM,                    /* 수정 일시*/
               CUR.CHG_TYP_CCD,                 /* 최근결재구분 E027*/
               CUR.CHG_REQ_STS_CCD,             /* 변경 요청 상태 G002*/
               CUR.VD_MAND_FACT_SAVE_YN,
               CASE WHEN 'ko_KR' = #{g.locale} THEN CUR.CEO_NM
                    ELSE COALESCE(CUR.CEO_NM_EN, CUR.CEO_NM) END AS CEO_NM  /* 대표 명 */
          FROM (SELECT VD.TEN_ID,                  /* 시스템 아이디*/
                       VD.VD_CD,                   /* 협력사 코드*/
                       VD.ERP_VD_CD,               /* ERP 협력사 코드*/
                       VD.VD_NM,                   /* 협력사 명*/
                       VD.VD_NM_EN,                /* 협력사 영문 명*/
                       VD.CEO_NM,                  /* 대표 명*/
                       VD.CEO_NM_EN,               /* 대표 영문 명*/
                       VD.BIZREGNO,                /* 사업자 등록 번호*/
                       VD.HQ_BIZREGNO,             /* 본사사업자등록번호*/
                       VD.CORPNO,                  /* 법인번호*/
                       VD.TAX_ID,                  /* 세금 아이디(TAX ID)*/
                       VD.EU_VAT_REG_ID,           /* EU VAT 등록 아이디*/
                       VD.CTRY_CCD,                /* 국가 코드*/
                       VD.ZIPCD,                   /* 우편 번호*/
                       VD.DTL_ADDR_1,              /* 상세 주소 1*/
                       VD.DTL_ADDR_2,              /* 상세 주소 2*/
                       VD.DTL_ADDR_EN_1,           /* 상세 주소 영문 1*/
                       VD.DTL_ADDR_EN_2,           /* 상세 주소 영문 2*/
                       VD.IND,                     /* 업종*/
                       VD.BIZTYP,                  /* 업태*/
                       VD.VD_EML,                  /* 이메일*/
                       VD.STS,                     /* 상태*/
                       VD.RMK AS VD_RMK,           /* 비고*/
                       VD.REGR_ID,                 /* 등록자 아이디*/
                       VD.REG_DTTM,                /* 등록 일시*/
                       VD.MODR_ID,                 /* 수정자 아이디*/
                       VD.MOD_DTTM,                /* 수정 일시*/
                       VD.TAXNSUBJ_YN,             /* 사업자단위과세적용사업자 여부*/
                       VD.TAXNSUBJ_SEQNO,          /* 사업자단위과세적용사업자 번호*/
                       VD.VD_MAND_FACT_SAVE_YN,    /* VALID여부*/
                       VD.VD_SIZE_CCD,             /* 협력사 규모*/
                       VD.VD_ESTD_DT,              /* 설립 일자*/
                       VD.STKMKT_TYP_CCD,          /* 주식시장 유형 공통코드*/
                       VD.HMPG_URL,                /* 홈페이지 주소*/
                       VD.MAIN_TRANSN_POSS_ITEM,   /* 메인 거래 가능 품목*/
                       ORGVD.VD_OORG_UUID,         /* 협력사 운영 조직 정보 아이디*/
                       CASE WHEN ORGVD.PO_POSS_YN = '' OR ORGVD.PO_POSS_YN IS NULL THEN 'N'
                            ELSE ORGVD.PO_POSS_YN END PO_POSS_YN,  /* 거래 가능 여부*/
                       CASE WHEN ORGVD.OBD_TYP_CCD = '' OR ORGVD.OBD_TYP_CCD IS NULL THEN 'NEW'
                            ELSE ORGVD.OBD_TYP_CCD END OBD_TYP_CCD,  /* 온보딩 유형 공통코드*/
                       ORGVD.PYMTMETH_CCD,           /* 지급방법 공통코드*/
                       ORGVD.CUR_CCD,                /* 통화*/
                       ORGVD.OORG_INI_TRANSN_ST_DT,  /* 운영조직 최초 거래 시작일 */
                       ORGVD.RMK AS ORGVD_RMK,       /* 비고*/
                       ORGVD.TAX_TYP_CCD,            /* 세금 유형 공통코드(세금계산서유형)*/
                       OORG.OORG_CD,                 /* 운영조직 코드*/
                       OORG.PARNODE_OORG_CD,             /* 상위 운영조직 코드*/
                       OORG.LOGIC_ORG_TYP_CCD,       /* 조직 유형 공통코드*/
                       OORG.LOGIC_ORG_CD,            /* 조직 코드*/
                       VDH.CHG_TYP_CCD,              /* 변경유형 공통코드 (최근결재구분 E027)*/
                       VDH.CHG_REQ_STS_CCD		     /* 변경 요청 상태 공통코드 (G002)*/
                  FROM VD VD
                  LEFT OUTER JOIN OORG OORG 
                        ON OORG.TEN_ID = VD.TEN_ID  /* ESAOOMG */
               <choose>
	               <when test="p.oorg_cd != null and p.oorg_cd.size() != 0">
		               AND OORG.OORG_CD IN
		               <foreach close=")" collection="p.oorg_cd" item="oorg_cd" open="(" separator=",">
		                   #{oorg_cd}
		               </foreach>
	               </when>
	               <otherwise>
                       AND OORG.OORG_CD = ''
	               </otherwise>
               </choose>
                  LEFT OUTER JOIN VD_OORG ORGVD
                    ON VD.TEN_ID = ORGVD.TEN_ID
                   AND VD.VD_CD = ORGVD.VD_CD
                   AND OORG.OORG_CD = ORGVD.OORG_CD
                   AND ORGVD.STS != 'D'
                  LEFT OUTER JOIN ( SELECT SUBVDH.TEN_ID, SUBVDH.VD_CD, SUBVDH.CHG_TYP_CCD, SUBVDH.CHG_REQ_STS_CCD, SUBOVCH.VD_OORG_UUID
                                      FROM ( SELECT MAX(MOD_SEQNO) AS MOD_SEQNO, TEN_ID, VD_CD
                                               FROM VD_CHG_HISTREC
                                              GROUP BY TEN_ID, VD_CD ) MAXVDH
                                     INNER JOIN VD_CHG_HISTREC SUBVDH
                                        ON SUBVDH.TEN_ID = MAXVDH.TEN_ID
                                       AND SUBVDH.VD_CD = MAXVDH.VD_CD
                                       AND SUBVDH.MOD_SEQNO = MAXVDH.MOD_SEQNO
                                     INNER JOIN VD_OORG_CHG_HISTREC SUBOVCH ON SUBOVCH.TEN_ID = SUBVDH.TEN_ID
                                       AND SUBOVCH.VD_MST_CHG_HISTREC_UUID = SUBVDH.VD_MST_CHG_HISTREC_UUID
                                  ) VDH
                    ON VDH.TEN_ID = VD.TEN_ID
                   AND VDH.VD_CD = VD.VD_CD
                   AND VDH.VD_OORG_UUID = ORGVD.VD_OORG_UUID  /* 협력사 정보변경 상태*/
                 WHERE VD.TEN_ID = #{g.tenant}
                 <if test="p.obd_typ_ccd != null and p.obd_typ_ccd != ''">
                     /* 등록유형이 없는 경우 신규('NEW') 협력사 */
                     AND CASE WHEN ORGVD.OBD_TYP_CCD = '' OR ORGVD.OBD_TYP_CCD IS NULL THEN 'NEW' ELSE ORGVD.OBD_TYP_CCD END = #{p.obd_typ_ccd}
                 </if>
                 <if test="p.vd_cd != null and p.vd_cd != ''">
                     <bind name="vd_cd" value="'%' + p.vd_cd + '%'"/>
                     AND UPPER(VD.VD_CD) LIKE UPPER(#{vd_cd})  /* 협력사 코드 검색조건*/
                 </if>
                 <if test="p.erp_vd_cd != null and p.erp_vd_cd != ''">
                     <bind name="erp_vd_cd" value="'%' + p.erp_vd_cd + '%'"/>
                     AND UPPER(VD.ERP_VD_CD) LIKE UPPER(#{erp_vd_cd})  /* 협력사 코드 검색조건*/
                 </if>
                 <if test="p.vd_nm != null and p.vd_nm != ''">
                     <bind name="vd_nm" value="'%' + p.vd_nm + '%'"/>
                     AND (UPPER(VD.VD_NM) LIKE UPPER(#{vd_nm}) OR UPPER(VD.VD_NM_EN) LIKE UPPER(#{vd_nm}))  /* 협력사명 검색조건*/
                 </if>
                     AND VD.STS != 'D'
               ) CUR
         INNER JOIN LOGIC_ORG LORG
            ON LORG.TEN_ID = CUR.TEN_ID
           AND CUR.LOGIC_ORG_TYP_CCD = LORG.LOGIC_ORG_TYP_CCD
           AND CUR.LOGIC_ORG_CD = LORG.LOGIC_ORG_CD
         ORDER BY CUR.OBD_TYP_CCD, CUR.VD_CD DESC, CUR.OORG_CD
    </select>
	<select id="findRegOeExistInfo" resultType="string">
		/* obd-req.findRegOeExistInfo : 평가요청한 온보딩평가그룹 요청 정보(=OE) 존재여부 확인 */
		SELECT CASE WHEN OE.OE_UUID IS NULL OR OE.OE_UUID = '' THEN 'N' ELSE 'Y' END AS OE_EXISTS_YN
		FROM DUM_TBL
		LEFT OUTER JOIN (
			SELECT O.OE_UUID
			FROM OE O
			WHERE O.TEN_ID = #{g.tenant}
				AND O.VD_CD = #{p.vd_cd}
			    AND O.PRCSG_ED_YN != 'Y'
				AND STS != 'D'
				AND EXISTS (
					SELECT 'Y'
					FROM OEG OG
					INNER JOIN OEG_VMG OGV
						ON OGV.TEN_ID = OG.TEN_ID
					    AND OGV.OEG_UUID = OG.OEG_UUID
				        AND OGV.STS != 'D'
				    WHERE OG.TEN_ID = #{g.tenant}
						AND OGV.VMG_OORG_UUID = #{p.vmg_oorg_uuid}
					    AND OG.OORG_CD = #{p.oorg_cd}
					    AND OG.STS != 'D'
					    AND OG.OEG_UUID = O.OEG_UUID)
	    ) OE ON 1 = 1
	</select>
	<insert id="insertOe">
		/* obd-req.insertOe : 온보딩평가 요청 저장 */
		INSERT INTO OE (
			  TEN_ID           /* 시스템 아이디 */
			, OE_UUID          /* 협력사 심사 그룹 아이디 */
			, OEG_UUID         /* 온보딩평가그룹 UUID */
			, VD_CD            /* 협력사 코드 */
			, OORG_CD          /* 운영조직 코드 */
			, OE_REQ_DT        /* 온보딩평가 요청 일자 */
			, PRCSG_ED_YN      /* 처리 종료 여부 */
			, OE_PRGS_STS_CCD  /* 진행 상태 코드(E030) */
			, OE_RES_STS_CCD   /* 결과 상태 코드(E008) */
			, STS              /* 상태 */
			, REGR_ID          /* 등록자 아이디 */
		    , REG_DTTM         /* 등록 일시 */
			, MODR_ID          /* 수정자 아이디 */
			, MOD_DTTM         /* 수정 일시 */
		) SELECT
              #{g.tenant}      /* 시스템 아이디*/
			, #{p.oe_uuid}     /* 협력사 심사 그룹 아이디 */
			, #{p.oeg_uuid}    /* 온보딩평가그룹 UUID */
			, #{p.vd_cd}       /* 협력사 코드 */
			, #{p.oorg_cd}     /* 운영조직 코드 */
			, #{p.oe_req_dt}   /* 온보딩평가 요청 일자 */
			, 'N'              /* 처리 종료 여부 */
			, 'EVAL_PRGSG'     /* 처리 상태 코드 (EVAL_PRGSG : 평가 진행중) */
			, 'PRGSG'          /* 요청 결과 코드 (PRGSG : 평가 진행중) */
			, 'C'              /* 상태 */
			, #{g.username}    /* 등록자 아이디 */
		    , #{g.now}         /* 등록 일시 */
			, #{g.username}    /* 수정자 아이디 */
            , #{g.now}         /* 수정 일시 */
         FROM DUM_TBL
	</insert>
	<insert id="insertOeVmg">
		/* obd-req.insertOeVmg : 온보딩평가 요청 온보딩그룹 저장 */
		INSERT INTO OE_VMG (
			  TEN_ID           /* 시스템 아이디 */
			, OE_VMG_UUID      /* 협력사 등록 요청 대상 그룹 아이디 */
			, VMG_OORG_UUID         /* 협력사관리그룹 UUID */
			, OE_UUID          /* 협력사 심사 그룹 아이디 */
			, STS              /* 상태*/
			, REGR_ID          /* 등록자 아이디 */
		    , REG_DTTM         /* 등록 일시 */
			, MODR_ID          /* 수정자 아이디 */
			, MOD_DTTM         /* 수정 일시 */
		) VALUES (
			  #{g.tenant}       /* 시스템 아이디*/
			, #{p.oe_vmg_uuid}  /* 협력사 등록 요청 대상 그룹 아이디 */
			, #{p.vmg_oorg_uuid}     /* 협력사관리그룹 UUID */
			, #{p.oe_uuid}      /* 협력사 심사 그룹 아이디 */
			, 'C'               /* 상태*/
			, #{g.username}     /* 등록자 아이디 */
		    , #{g.now}          /* 등록 일시 */
			, #{g.username}     /* 수정자 아이디 */
            , #{g.now}          /* 수정 일시 */
		)
	</insert>
	<insert id="insertOePrcs">
        /* obd-req.insertOePrcs : 온보딩평가 프로세스 저장(PE_PRCS) */
        INSERT INTO OE_PRCS
        (
               TEN_ID                         /* 시스템 아이디 */
		     , OE_PRCS_UUID                   /* 협력사 심사 그룹 평가 절차 아이디 */
             , OE_UUID                        /* 협력사 심사 그룹 아이디 */
             , EVAL_SUBJ_RES_UUID             /* 평가 대상 결과 UUID */
             , OBD_EVALSHT_UUID               /* 온보딩 평가시트 UUID */
             , OBD_EVALSHT_PRCS_UUID          /* 온보딩 평가시트 프로세스 UUID */
             , EVAL_CMPLD_DT                  /* 심사 완료 일 */
             , OE_PRCS_STS_CCD                /* 절차 상태 */
             , PRCS_EVAL_SC                   /* 평가 점수 */
             , PRCS_CONL_PASS_RSN             /* 프로세스 조건부 합격 사유 */
             , PRE_OE_PRCS_PASS_DT            /* 이전 온보딩평가 프로세스 합격 일자 */
             , STS                            /* 상태 */
             , RMK                            /* 비고 */
             , REGR_ID                        /* 등록자 아이디 */
		     , REG_DTTM                       /* 등록 일시 */
			 , MODR_ID                        /* 수정자 아이디 */
             , MOD_DTTM                       /* 수정 일시 */
        )
        SELECT O.TEN_ID                       /* 시스템 아이디 */
			 , RANDOMUUID() AS OE_PRCS_UUID   /* 협력사 심사 그룹 평가 절차 아이디 */  , O.OE_UUID                      /* 협력사 심사 그룹 아이디 */
             , NULL AS EVAL_SUBJ_RES_UUID     /* 평가 대상 결과 UUID */
             , EFCT_SHT.OBD_EVALSHT_UUID      /* 온보딩 평가시트 UUID */
             , OESP.OBD_EVALSHT_PRCS_UUID     /* 온보딩 평가시트 프로세스 UUID */
             , NULL AS EVAL_CMPLD_DT          /* 심사 완료 일 */
             , 'PRCS_WTG' AS OE_PRCS_STS_CCD  /* 절차 상태 (PRCS_WTG : 프로세스 대기) */
             , NULL AS PRCS_EVAL_SC           /* 평가 점수 */
             , NULL AS PRCS_CONL_PASS_RSN     /* 프로세스 조건부 합격 사유 */
             , NULL AS PRE_OE_PRCS_PASS_DT    /* 이전 온보딩평가 프로세스 합격 일자 */
             , 'C'                            /* 상태 */
             , NULL                           /* 비고 */
             , #{g.username}                  /* 등록자 아이디 */
		     , #{g.now}                       /* 등록 일시 */
			 , #{g.username}                  /* 수정자 아이디 */
		     , #{g.now}                       /* 수정 일시 */
          FROM OE O
         INNER JOIN OEG OG
            ON OG.TEN_ID   = O.TEN_ID
           AND OG.OEG_UUID = O.OEG_UUID
           AND OG.STS     != 'D'
         INNER JOIN (
                           SELECT OES.*
                                , ROW_NUMBER() OVER(PARTITION BY OES.OEG_UUID ORDER BY REG_DTTM DESC, MOD_DTTM DESC) RK
                            FROM OBD_EVALSHT OES
                           WHERE OES.TEN_ID = #{g.tenant}
                           	   AND TO_CHAR(#{g.now}, 'YYYYMMDD') &gt;= TO_CHAR(OES.EFCT_ST_DT, 'YYYYMMDD')
                           	   AND TO_CHAR(#{g.now}, 'YYYYMMDD') <![CDATA[<]]> TO_CHAR(OES.EFCT_EXP_DT, 'YYYYMMDD')  AND OES.CNFD_YN ='Y'
                               AND OES.STS != 'D'
                    ) EFCT_SHT  /* 온보딩 평가그룹의 현재 유효한 평가시트 아이디 조회 */
            ON OG.TEN_ID   = EFCT_SHT.TEN_ID
           AND OG.OEG_UUID = EFCT_SHT.OEG_UUID
           AND EFCT_SHT.RK = 1
         INNER JOIN OBD_EVALSHT_PRCS OESP
            ON OESP.TEN_ID           = EFCT_SHT.TEN_ID
           AND OESP.OBD_EVALSHT_UUID = EFCT_SHT.OBD_EVALSHT_UUID
           AND OESP.STS             != 'D'
         WHERE O.TEN_ID     = #{g.tenant}
           AND O.OE_UUID    = #{p.oe_uuid}
           AND O.STS       != 'D'
    </insert>
    <insert id="insertOePrcsEvaltr">
        /* obd-req.insertOePrcsEvaltr : 온보딩평가 프로세스 평가자 저장(OE_PRCS_EVALTR) */
        INSERT INTO OE_PRCS_EVALTR
        (      TEN_ID                          /* 테넌트 아이디 */
	         , OE_PRCS_EVALTR_UUID             /* 온보딩평가 프로세스 평가자 UUID */
             , EVAL_SUBJ_EVALTR_RES_UUID       /* 평가 대상 평가자 결과 UUID */
             , OE_PRCS_UUID                    /* 온보딩평가 프로세스 UUID */
             , EVALTR_ID                       /* 평가자 아이디 */
             , EVALFACT_EVALTR_AUTHTY_CCD      /* 평가항목 평가자 권한 공통코드 */
             , EVALTR_SC                       /* 평가자 점수 */
             , EVAL_STS_CCD                    /* 평가 상태 공통코드 */
             , RMK                             /* 비고 */
             , STS                             /* 상태 */
             , REGR_ID                         /* 등록자 아이디 */
	         , REG_DTTM                        /* 등록 일시 */
             , MODR_ID                         /* 수정자 아이디 */
             , MOD_DTTM                        /* 수정 일시 */
        )
        SELECT OP.TEN_ID                          /* 테넌트 아이디 */
		     , RANDOMUUID() AS OE_PRCS_EVALTR_UUID  /* 온보딩평가 프로세스 평가자 UUID */  , NULL AS EVAL_SUBJ_EVALTR_RES_UUID  /* 평가 대상 평가자 결과 UUID */
             , OP.OE_PRCS_UUID                    /* 온보딩평가 프로세스 UUID */
             , (CASE WHEN OEP.EVALTR_TYP_CCD = 'VD' THEN O.VD_CD
                     WHEN OEP.EVALTR_TYP_CCD = 'VMG_PIC' THEN VE.EVALTR_ID
                     ELSE EPE.EVALTR_ID
                 END) AS EVALTR_ID                /* 평가자 아이디 */
             , (CASE WHEN OEP.EVALTR_TYP_CCD != 'EVALFACT_AUTHTY_PIC' THEN 'ALL' ELSE EPE.EVALFACT_EVALTR_AUTHTY_CCD END) AS EVALFACT_EVALTR_AUTHTY_CCD  /* 평가항목 평가자 권한 공통코드 */
             , NULL AS EVALTR_SC                  /* 평가자 점수 */
             , 'WTG' AS EVAL_STS_CCD              /* 절차 상태 (WTG: 대기) */
             , NULL AS RMK                        /* 비고 */
             , 'C'                                /* 상태 */
             , #{g.username}                      /* 등록자 아이디 */
	         , #{g.now}                           /* 등록 일시 */
	         , #{g.username}                      /* 수정자 아이디 */
	         , #{g.now}                           /* 수정 일시 */
          FROM OE_PRCS OP
         INNER JOIN OE O
            ON (    O.TEN_ID  = OP.TEN_ID
                AND O.OE_UUID = OP.OE_UUID
                AND O.STS    != 'D'
               )
         INNER JOIN OBD_EVALSHT OE
            ON (    OE.TEN_ID           = OP.TEN_ID
                AND OE.OBD_EVALSHT_UUID = OP.OBD_EVALSHT_UUID
                AND OE.STS             != 'D'
               )
         INNER JOIN OBD_EVALSHT_PRCS OEP
            ON (    OEP.TEN_ID                = OP.TEN_ID
                AND OEP.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID
                AND OEP.STS                  != 'D'
               )
          LEFT OUTER JOIN EVALSHT_PRCS_EVALTR EPE
            ON (    EPE.TEN_ID                = OP.TEN_ID
                AND EPE.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID
                AND OEP.EVALTR_TYP_CCD IN ('EVALFACT_AUTHTY_PIC', '')  -- EVALFACT_AUTHTY_PIC: 평가항목 권한 담당자, : 직접 선택
                AND EPE.STS                  != 'D'
               )
          LEFT OUTER JOIN OEG_VMG OV
            ON (    OV.TEN_ID          = O.TEN_ID
                AND OV.OEG_UUID        = O.OEG_UUID
                AND OEP.EVALTR_TYP_CCD = 'VMG_PIC'  -- 협력사 관리 그룹 담당자
                AND OV.STS            != 'D'
               )
          LEFT OUTER JOIN VMG_OORG_EVALTR VE
            ON (    VE.TEN_ID   = OV.TEN_ID
                AND VE.VMG_OORG_UUID = OV.VMG_OORG_UUID
                AND VE.STS     != 'D'
               )
         WHERE OP.TEN_ID = #{g.tenant}
            AND O.OE_UUID = #{p.oe_uuid}
            AND (CASE WHEN OEP.EVALTR_TYP_CCD = 'VD' THEN O.VD_CD
                     WHEN OEP.EVALTR_TYP_CCD = 'VMG_PIC' THEN VE.EVALTR_ID
                     ELSE EPE.EVALTR_ID
                 END) IS NOT NULL </insert>
	<select id="findListAllOePrcs" resultType="map">
        /* obd-req.findListAllOePrcs : 온보딩평가의 전체 온보딩평가 프로세스 조회(OE_PRCS) */
        SELECT '0' LVL
             , OE_UUID
             , VD_CD
             , OEG_UUID
             , OEG_CD
             , LEAF
             , OBD_EVALSHT_PRCS_UUID
             , OE_PRCS_UUID
             , PRCS_CCD
             , PRCS_CCD AS TARG_PRCS_CCD
             , PRCS_SORT
             , OE_PRCS_STS_CCD
             , PRE_OE_FCD_PASS_TCAPPL_YN
             , PRE_OE_TCAPPL_YN
             , PTNL_VD_SLCTN_CRTRA_YN
             , PRCS_EFCTPD_MNTHS
             , PRE_OE_EFCTPD_MNTHS
          FROM ( SELECT OE_UUID
                      , VD_CD
                      , OEG_UUID
                      , OEG_CD
                      , CASE WHEN X.OBD_EVALSHT_UUID IS NOT NULL  THEN 'Y' ELSE 'N' END AS LEAF
                      , OBD_EVALSHT_PRCS_UUID
                      , OE_PRCS_UUID
                      , PRCS_CCD
                      , PRCS_SORT
                      , OE_PRCS_STS_CCD
                      , PRE_OE_FCD_PASS_TCAPPL_YN
                      , PRE_OE_TCAPPL_YN
                      , PTNL_VD_SLCTN_CRTRA_YN
                      , PRCS_EFCTPD_MNTHS
                      , PRE_OE_EFCTPD_MNTHS
                   FROM ( SELECT OP.OE_UUID
                               , O.VD_CD
                               , OG.OEG_UUID
                               , OG.OEG_CD
                               , CONCAT(OEP.PRCS_CCD, CONCAT(O.VD_CD, O.OEG_UUID)) AS CD
                               , OP.OBD_EVALSHT_UUID
                               , OP.OBD_EVALSHT_PRCS_UUID
                               , OP.OE_PRCS_UUID
                               , OEP.PRCS_CCD
                               , OEP.PRCS_SORT
                               , OP.OE_PRCS_STS_CCD
                               , OEP.PRE_OE_FCD_PASS_TCAPPL_YN  /* 이전 강제 패스 인정 여부 */
                               , OEP.PRE_OE_TCAPPL_YN           /* 자동 패스 여부 */
                               , OEP.PTNL_VD_SLCTN_CRTRA_YN      /* 잠재 협력사 기준 여부 */
                               , OEP.PRCS_EFCTPD_MNTHS
                               , OEP.PRE_OE_EFCTPD_MNTHS
                            FROM OE O
                           INNER JOIN OE_PRCS OP
                              ON ( OP.TEN_ID = O.TEN_ID AND OP.OE_UUID = O.OE_UUID)
                           INNER JOIN OEG OG
                              ON ( OG.TEN_ID = O.TEN_ID AND OG.OEG_UUID = O.OEG_UUID)
                           INNER JOIN OBD_EVALSHT_PRCS OEP
                              ON ( OEP.TEN_ID = OP.TEN_ID AND OEP.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID)
                           WHERE O.TEN_ID  = #{g.tenant}
                             AND O.OE_UUID = #{p.oe_uuid}
                             AND (CASE WHEN O.STS IS NULL OR O.STS = '' THEN 'C' ELSE O.STS END) <![CDATA[<>]]> 'D'
                             AND (CASE WHEN OP.STS IS NULL OR OP.STS = '' THEN 'C' ELSE OP.STS END) <![CDATA[<>]]> 'D'
                        ) X
               ) ALL_DATA  /* 전체 절차의 표본 데이타 추출 */
         WHERE ALL_DATA.OE_PRCS_STS_CCD = 'PRCS_WTG' /* 절차 상태 (PRCS_WTG: 대기)*/
    </select>
	<select id="findPreObdEvalPrcsResult" resultType="map">
	    /* obd-req.findPreObdEvalPrcsResult : 이전 온보딩평가 프로세스 중 최종 결과 조회(Pre OE_PRCS) */
	    /*
	      동일심사그룹내 해당 절차의 최종 심사결과를 가져온다
	      심사완료일 기준으로 유효 월 수에 해당 하며 재갱신기간에 포함 되지 않은 유효한 데이터를 조회한다.
	    */
	    SELECT J.PRE_OE_PRCS_PASS_DT
	         , J.OE_PRCS_STS_CCD
	         , J.OE_PRCS_UUID
	      FROM (
	               SELECT /* 이전 강제 패스 인정 여부에 따른 상태 추출 */
	                      CASE WHEN (
	                      <choose>
	                          <when test="p.pre_oe_fcd_pass_tcappl_yn == null || p.pre_oe_fcd_pass_tcappl_yn == &quot;&quot;">
	                              'N'
	                          </when>
	                          <otherwise>
	                              #{p.pre_oe_fcd_pass_tcappl_yn}
	                          </otherwise>
	                      </choose>) = 'N'
	                           THEN (CASE WHEN OP.OE_PRCS_STS_CCD = 'PRCS_CONL_PASS' THEN 'PRCS_FLR' ELSE OP.OE_PRCS_STS_CCD END)  /* PRCS_CONL_PASS: 프로세스 조건부 합격, PRCS_FLR: 프로세스 불합격 */
	                           ELSE OP.OE_PRCS_STS_CCD
	                      END                                   AS OE_PRCS_STS_CCD
	                    , OP.OE_PRCS_UUID
	                    , MAX(OP.PRE_OE_PRCS_PASS_DT)           AS PRE_OE_PRCS_PASS_DT
	                    , RANK() OVER(ORDER BY O.REG_DTTM DESC) AS RK
	                 FROM OE_PRCS OP /* 의존성 대상 심사절차 TABLE */
	                INNER JOIN OE O  /* 의존성 대상 심사그룹 TABLE */
	                   ON ( O.TEN_ID = OP.TEN_ID AND O.OE_UUID = OP.OE_UUID )
	                INNER JOIN OBD_EVALSHT_PRCS OEP
	                   ON ( OEP.TEN_ID = OP.TEN_ID AND OEP.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID)
	                WHERE OP.TEN_ID  = #{g.tenant}
	                  AND O.VD_CD    = #{p.vd_cd}
	                  AND O.OEG_UUID = #{p.oeg_uuid}
	                  AND ( OP.OE_PRCS_STS_CCD IN ('PRCS_CONL_PASS', 'PRCS_PASS', 'PRE_OE_RES_APPL')  /* PRCS_CONL_PASS: 프로세스 조건부 합격,PRCS_PASS: 프로세스 합격, PRE_OE_RES_APPL: 이전 온보딩평가 결과 적용 */
	                     OR OP.OE_PRCS_STS_CCD IN ('PRCS_FLR') /* PRCS_FLR: 프로세스 불합격 */
	                      )
	                  AND O.OE_RES_STS_CCD IN ('CONL_PASS', 'PASS')  /* CONL_PASS: 조건부 합격/ PASS: 합격 */
	                  /* 참조 평가의 심사완료일 + (유효월수 - 재등록 개시월수) &gt; 현재일자 */
	                  <bind name="getFormatNow" value="g.getFormatNow(g.now,'yyyyMMdd')"/>
	                  AND ADD_MONTHS(
	                        TO_DATE(OP.PRE_OE_PRCS_PASS_DT, 'yyyyMMdd'),
	                        COALESCE(CAST(#{p.prcs_efctpd_mnths} AS NUMERIC), 9999) - COALESCE(CAST(#{p.pre_oe_efctpd_mnths} AS NUMERIC), 0)
	                  ) &gt; TO_DATE(#{getFormatNow}, 'yyyyMMdd')  AND OEP.PRCS_CCD = #{p.prcs_ccd}
	                GROUP BY OP.OE_PRCS_STS_CCD, OP.OE_PRCS_UUID, O.REG_DTTM
	           ) J
	     WHERE J.RK = 1
    </select>
	<update id="updateObdEvalPrcdResult">
	    /* obd-req.updateObdEvalPrcdResult : 이전 온보딩평가 프로세스를 참조하여 현재 프로세스의 결과 update */
	    MERGE INTO OE_PRCS A
	    USING (
	               SELECT TEN_ID
	                    , #{p.oe_prcs_uuid} AS OE_PRCS_UUID
	                    , PRCS_EVAL_SC
	                    <bind name="getFormatNow" value="g.getFormatNow(g.now,'yyyyMMdd')"/>
	                    , #{getFormatNow} AS EVAL_CMPLD_DT
	                    , PRE_OE_PRCS_PASS_DT
	                    , CASE WHEN #{p.oe_prcs_sts_ccd} = 'PRCS_CONL_PASS' THEN 'PRCS_CONL_PASS'  /* PRCS_CONL_PASS: 프로세스 조건부 합격 */
	                           ELSE 'PRE_OE_RES_APPL'  /* PRE_OE_RES_APPL: 이전 온보딩평가 결과 적용 */
	                       END AS OE_PRCS_STS_CCD
	                 FROM OE_PRCS
	                WHERE TEN_ID       = #{g.tenant}
	                  AND OE_PRCS_UUID = #{p.oe_prcs_uuid}
	          ) B
	       ON (
	           A.TEN_ID       = B.TEN_ID
	       AND A.OE_PRCS_UUID = B.OE_PRCS_UUID
	          )
	      WHEN MATCHED THEN
	    UPDATE SET PRCS_EVAL_SC        = B.PRCS_EVAL_SC
	             , EVAL_CMPLD_DT       = B.EVAL_CMPLD_DT
	             , PRE_OE_PRCS_PASS_DT = B.PRE_OE_PRCS_PASS_DT
	             , OE_PRCS_STS_CCD     = B.OE_PRCS_STS_CCD
	             , MODR_ID             = #{g.username}
	             , MOD_DTTM            = #{g.now} </update>
	<select id="findObdEvalTargObdEvalGrp" resultType="map">
        /* obd-req.findObdEvalTargObdEvalGrp : 평가대상 온보딩평가그룹 조회 */
        SELECT O.OE_UUID
             , O.VD_CD
             , O.OEG_UUID
             , OG.OEG_CD
          FROM OE O
         INNER JOIN OEG OG
            ON OG.TEN_ID   = O.TEN_ID
           AND OG.OEG_UUID = O.OEG_UUID
         WHERE O.TEN_ID  = #{g.tenant}
           AND O.OE_UUID = #{p.oe_uuid}
    </select>
	<select id="findNextOnboardingEvalProcess" resultType="map">
        /* obd-req.findNextOnboardingEvalProcess : 다음 온보딩 평가 프로세스 조회 */
        SELECT O.TEN_ID
             , O.OORG_CD
             , OP.OE_PRCS_UUID
             , OP.OE_UUID
             , O.OEG_UUID
             , O.VD_CD
             , OEP.EVALTMPL_UUID
          FROM OE_PRCS OP
         INNER JOIN OBD_EVALSHT_PRCS OEP
            ON OEP.TEN_ID                = OP.TEN_ID
           AND OEP.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID
         INNER JOIN OE O
            ON O.TEN_ID  = OP.TEN_ID
           AND O.OE_UUID = OP.OE_UUID
         WHERE OP.TEN_ID       = #{g.tenant}
           AND OP.OE_UUID      = #{p.oe_uuid}
           AND OP.OE_PRCS_UUID = #{p.oe_prcs_uuid}
    </select>
	<select id="updateEvalSubjResKey" resultType="map">
	    /* obd-req.updateEvalSubjResKey : eval 평가대상 결과 아이디를 온보딩평가대상(OE_PRCS) 테이블에 저장 */
	    UPDATE OE_PRCS
	       SET EVAL_SUBJ_RES_UUID = #{p.eval_subj_res_uuid}
	         , OE_PRCS_STS_CCD    = 'EVAL_WTG'
	         , STS                = 'U'
	         , MODR_ID            = #{g.username}
	         , MOD_DTTM           = #{g.now}
	     WHERE TEN_ID       = #{g.tenant}
	       AND OE_PRCS_UUID = #{p.oe_prcs_uuid}
    </select>
	<select id="findActOrFailOnboardingEvalProcessCnt" resultType="map">
        /* obd-req.findActOrFailOnboardingEvalProcessCnt : 불합격 또는 진행중인 평가 프로세스 조회 */
        SELECT CASE WHEN SUM(FAIL_CNT) IS NULL THEN 0 ELSE SUM(FAIL_CNT) END   AS FAIL_CNT
             , CASE WHEN SUM(ACT_CNT) IS NULL THEN 0 ELSE SUM(ACT_CNT) END     AS ACT_CNT
          FROM ( SELECT CASE WHEN OP.OE_PRCS_STS_CCD = 'PRCS_FLR' THEN 1 ELSE 0 END AS FAIL_CNT  /* PRCS_FLR: 프로세스 불합격 */
                      , CASE WHEN OP.OE_PRCS_STS_CCD IN ('EVAL_WTG', 'EVAL_PRGSG')  /* EVAL_WTG: 평가 대기, EVAL_PRGSG: 평가 진행중 */
                                      OR ( OP.OE_PRCS_STS_CCD = 'PRCS_WTG'
                                               AND OP.EVAL_SUBJ_RES_UUID IS NOT NULL  ) THEN 1 ELSE 0 END AS ACT_CNT  /* PRCS_WTG: 프로세스 대기 */
                   FROM OE_PRCS OP   /* 협력사심사그룹평가절차 */
                  WHERE OP.TEN_ID        = #{g.tenant}
                    AND OP.OE_UUID       = #{p.oe_uuid}
               ) X
    </select>
	<select id="findNextOnboardingEvalProcessPrcsUuid" resultType="string">
        /* obd-req.findNextOnboardingEvalProcessPrcsUuid : 프로세스 대기 중인 다음 온보딩 평가 프로세스 절차 UUID 조회 */
        SELECT OE_PRCS_UUID
          FROM OE_PRCS OP
         INNER JOIN OBD_EVALSHT_PRCS OEP
            ON OEP.TEN_ID                = OP.TEN_ID
           AND OEP.OBD_EVALSHT_PRCS_UUID = OP.OBD_EVALSHT_PRCS_UUID
         WHERE OP.TEN_ID      = #{g.tenant}
           AND OEP.PRCS_SORT  = (SELECT MIN(PRCS_SORT)
                                   FROM OE_PRCS T_OP
                                  INNER JOIN OBD_EVALSHT_PRCS T_OEP
                                     ON T_OEP.TEN_ID                = T_OP.TEN_ID
                                    AND T_OEP.OBD_EVALSHT_PRCS_UUID = T_OP.OBD_EVALSHT_PRCS_UUID
                                  WHERE T_OP.TEN_ID          = #{g.tenant}
                                    AND T_OP.OE_UUID         = #{p.oe_uuid}
                                    AND T_OP.OE_PRCS_STS_CCD = 'PRCS_WTG' )  /* PRCS_WTG: 프로세스 대기 */
           AND OP.OE_UUID         = #{p.oe_uuid}
           AND OP.OE_PRCS_STS_CCD = 'PRCS_WTG'
    </select>
	<update id="saveOnboardingEvalComplete">
        /* obd-req.saveOnboardingEvalComplete : 온보딩평가 평가 완료 - OE update */
        UPDATE OE
           SET OE_PRGS_STS_CCD = 'EVAL_CMPLD'                 /* 진행 상태 코드 (EVAL_CMPLD: 평가 완료) */
             , OE_RES_STS_CCD  = (CASE WHEN (SELECT COUNT(*)
                                               FROM OE_PRCS
                                              WHERE TEN_ID = OE.TEN_ID
                                               AND OE_UUID = OE.OE_UUID
                                               AND OE_PRCS_STS_CCD = 'PRCS_CONL_PASS') &gt; 0
                 					   THEN 'CONL_PASS'
                                       ELSE 'PASS'
                                   END)
		     <bind name="getFormatNow" value="g.getFormatNow(g.now,'yyyyMMdd')"/>
             , OE_ED_DT        = #{getFormatNow}
             , MODR_ID         = #{g.username}
             , MOD_DTTM        = #{g.now}
         WHERE TEN_ID          = #{g.tenant}
           AND OE_UUID         = #{p.oe_uuid}
    </update>
	<select id="findListOePrcsEvalSubjEvaltrByOePrcsEvalSubjRes" resultType="map">
	    /* obd-req.findListOePrcsEvalSubjEvaltrByOePrcsEvalSubjRes : 온보딩 프로세스 평가대상 평가자 목록 조회 (oe_prcs_uuid 단위로 조회) */
	    SELECT OP.TEN_ID                          -- required : tenant 아이디
	         , OP.OE_UUID
	         , OP.OE_PRCS_UUID                    -- required : 운영조직 코드
	         , OPE.OE_PRCS_EVALTR_UUID
	         , OPE.EVALFACT_EVALTR_AUTHTY_CCD     -- required : 평가항목 평가자 권한 공통코드
	         , OPE.EVALTR_ID                      -- required : 평가자 아이디
	      FROM OE_PRCS OP
	     INNER JOIN OE_PRCS_EVALTR OPE
	        ON OPE.TEN_ID       = OP.TEN_ID
	       AND OPE.OE_PRCS_UUID = OP.OE_PRCS_UUID
	       AND OPE.STS         != 'D'
	     WHERE OP.TEN_ID       = #{g.tenant}
	       AND OP.OE_UUID      = #{p.oe_uuid}
	       AND OP.OE_PRCS_UUID = #{p.oe_prcs_uuid}
    </select>
	<update id="updateEvalSubjEvaltrResKey">
	    /* obd-req.updateEvalSubjEvaltrResKey : eval 평가대상 평가자 결과 아이디를 온보딩평가대상 평가자(OE_PRCS_EVALTR) 테이블에 저장 */
	    UPDATE OE_PRCS_EVALTR
	       SET EVAL_SUBJ_EVALTR_RES_UUID = #{p.eval_subj_evaltr_res_uuid}
	         , STS                       = 'U'
	         , MODR_ID                   = #{g.username}
	         , MOD_DTTM                  = #{g.now}
	     WHERE TEN_ID                    = #{g.tenant}
	       AND OE_PRCS_EVALTR_UUID       = #{p.oe_prcs_evaltr_uuid}
    </update>
    <select id="findOeReqObdEvalshtInfo" resultType="map">
        /* obd-req.findOeReqObdEvalshtInfo : OE 생성 전 평가그룹의 유효 평가시트 정보를 조회한다. */
	    SELECT TEMP.TEN_ID
	         , TEMP.OEG_UUID
	         , TEMP.OBD_EVALSHT_UUID
	         , TEMP.PRCS_APPL_SUBJ_YN
	      FROM (SELECT OES.*
	                 , ROW_NUMBER() OVER(PARTITION BY OES.OEG_UUID ORDER BY REG_DTTM DESC, MOD_DTTM DESC) RK
	            FROM OBD_EVALSHT OES
	            WHERE OES.TEN_ID   = #{g.tenant}
	              AND OES.OEG_UUID = #{p.oeg_uuid}
	              AND TO_CHAR(#{g.now}, 'YYYYMMDD') &gt;= TO_CHAR(OES.EFCT_ST_DT, 'YYYYMMDD')
	              AND TO_CHAR(#{g.now}, 'YYYYMMDD') <![CDATA[<]]> TO_CHAR(OES.EFCT_EXP_DT, 'YYYYMMDD')  AND OES.CNFD_YN  = 'Y'
	              AND OES.STS     != 'D'
	         ) TEMP
	     WHERE TEMP.RK = 1
    </select>
    <update id="updateOeByPrcsApplSubjN">
	    /* obd-req.updateOeByPrcsApplSubjN 프로세스 적용 대상 여부가 N 인 경우 OE 상태 변경 */
	    <bind name="getFormatNow" value="g.getFormatNow(g.now,'yyyyMMdd')"/>
	    UPDATE OE
	       SET OE_PRGS_STS_CCD = 'EVAL_CMPLD'                 /* [E030] EVAL_CMPLD : 평가 완료 */
	         , PRCSG_ED_YN     = 'N'
	         , OE_RES_STS_CCD  = NULL
	         , OE_ED_DT        = #{getFormatNow}
	         , MODR_ID         = #{g.username}
	         , MOD_DTTM        = #{g.now}
	    WHERE TEN_ID  = #{g.tenant}
	      AND OE_UUID = #{p.oe_uuid}
    </update>
</mapper>
